{"version":3,"file":"types.esm.js","sources":["../../src/api/types.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createApiRef } from '@backstage/core-plugin-api';\n\n/**\n * Report from a PuppetDB.\n */\nexport type PuppetDbReport = {\n  /** The name of the node that the report was received from. */\n  certname: string;\n  /** The ID of the report. */\n  hash: string;\n  /** The environment assigned to the node that submitted the report. */\n  environment: string;\n  /** The status associated to report's node. */\n  status: string;\n  /** The job id associated with the report. */\n  job_id?: string;\n  /** A flag indicating whether the report was produced by a noop run. */\n  noop: boolean;\n  /** A flag indicating whether the report contains noop events. */\n  noop_pending?: boolean;\n  /** The version of Puppet that generated the report. */\n  puppet_version: string;\n  /** The version number of the report format that Puppet used to generate the original report data. */\n  report_format: number;\n  /** An identifier string that Puppet uses to match a specific catalog for a node to a specific Puppet run. */\n  configuration_version: string;\n  /** The time on the agent at which the Puppet run began. */\n  start_time: string;\n  /** The time on the agent at which the Puppet run ended. */\n  end_time: string;\n  /** The time of catalog submission from the Puppet Server to PuppetDB. */\n  producer_timestamp: string;\n  /** The time at which PuppetDB received the report. */\n  receive_time: string;\n  /** The certname of the Puppet Server that sent the report to PuppetDB. */\n  producer: string;\n  /** A string used to identify a Puppet run. */\n  transaction_uuid: string;\n  /** A string used to tie a catalog to a report to the catalog used from that Puppet run. */\n  catalog_uuid: string;\n  /** A string used to tie a catalog to the Puppet code which generated the catalog. */\n  code_id: string;\n  /** A string used to identify whether the Puppet run used a cached catalogs. */\n  cached_catalog_status: string;\n  /** Either \"agent\", \"plan\", or \"any\" to restrict the results to reports submitted from that source. */\n  type: string;\n  /** A flag indicating whether any of the report's events remediated configuration drift. */\n  corrective_change: boolean;\n  /** Report metrics. */\n  metrics?: {\n    /** Metrics data. */\n    data: PuppetDbReportMetric[];\n    /** Link to the metrics endpoint. */\n    href: string;\n  };\n};\n\n/**\n * Resource event generated from Puppet report.\n */\nexport type PuppetDbReportEvent = {\n  /** The name of the node on which the event occurred. */\n  certname: string;\n  /** The ID of the report that the event occurred in. */\n  report: string;\n  /** The status of the event. Legal values are success, failure, noop, and skipped. */\n  status: string;\n  /** The timestamp (from the Puppet agent) at which the event occurred. Timestamps are always ISO-8601 compatible date/time strings. */\n  timestamp: string;\n  /** The timestamp (from the Puppet agent) at which the Puppet run began. Timestamps are always ISO-8601 compatible date/time strings. */\n  run_start_time: string;\n  /** The timestamp (from the Puppet agent) at which the Puppet run finished. Timestamps are always ISO-8601 compatible date/time strings. */\n  run_end_time: string;\n  /** The timestamp (from the PuppetDB server) at which the Puppet report was received. Timestamps are always ISO-8601 compatible date/time strings. */\n  report_receive_time: string;\n  /** The type of resource that the event occurred on, such as File, Package, etc. */\n  resource_type: string;\n  /** The title of the resource on which the event occurred. */\n  resource_title: string;\n  /** The property/parameter of the resource on which the event occurred. For example, on a Package resource, this field might have a value of ensure. */\n  property?: string;\n  /** The name of the resource on which the event occurred. */\n  name?: string;\n  /** The new value that Puppet was attempting to set for the specified resource property. Any rich data values will appear as readable strings. */\n  new_value?: string;\n  /** The previous value of the resource property, which Puppet was attempting to change. Any rich data values will appear as readable strings. */\n  old_value?: string;\n  /** A description (supplied by the resource provider) of what happened during the event. */\n  message?: string;\n  /** The manifest file in which the resource definition is located. */\n  file?: string;\n  /** The line (of the containing manifest file) at which the resource definition can be found. */\n  line?: number;\n  /** The Puppet class where this resource is declared. */\n  containing_class?: string;\n  /** Whether the event occurred in the most recent Puppet run (per-node). */\n  latest_report?: boolean;\n  /** The environment associated with the reporting node. */\n  environment: string;\n  /** An identifier string that Puppet uses to match a specific catalog for a node to a specific Puppet run. */\n  configuration_version: string;\n  /** The containment path associated with the event, as an ordered array that ends with the most specific containing element. */\n  containment_path: string[];\n  /** Whether the event represents a \"corrective change\", meaning the event rectified configuration drift. */\n  corrective_change: boolean;\n};\n\n/**\n * Resource log generated from Puppet report.\n */\nexport type PuppetDbReportLog = {\n  /** The manifest file in which the resource definition is located. */\n  file?: string;\n  /** The line (of the containing manifest file) at which the resource definition can be found. */\n  line?: number;\n  /** The timestamp (from the Puppet agent) at which the event occurred. Timestamps are always ISO-8601 compatible date/time strings. */\n  time: string;\n  /** A description (supplied by the resource provider) of what happened during the event. */\n  message?: string;\n  /** The log level. */\n  level: string;\n  /** Log source */\n  source: string;\n  /** Resource tags */\n  tags: string[];\n};\n\n/**\n * A metric from a PuppetDB report.\n */\nexport type PuppetDbReportMetric = {\n  /**\n   * The name of the metric.\n   */\n  name: string;\n  /**\n   * The value of the metric.\n   */\n  value: string;\n  /**\n   * The category of the metric.\n   */\n  category: string;\n};\n\nexport const puppetDbApiRef = createApiRef<PuppetDbApi>({\n  id: 'plugin.puppetdb.service',\n});\n\n/**\n * The API provided by the PuppetDB plugin.\n */\nexport type PuppetDbApi = {\n  /**\n   * Get a list of PuppetDB reports for the specified node.\n   *\n   * @param puppetDbCertName - The name of the node that the report was received from.\n   * @returns A list of PuppetDB reports for the specified node.\n   */\n  getPuppetDbNodeReports(\n    puppetDbCertName: string,\n  ): Promise<PuppetDbReport[] | undefined>;\n\n  /**\n   * Get a specific PuppetDB report events.\n   *\n   * @param puppetDbReportHash - The ID of the report.\n   * @returns Events from a specific PuppetDB report.\n   */\n  getPuppetDbReportEvents(\n    puppetDbReportHash: string,\n  ): Promise<PuppetDbReportEvent[] | undefined>;\n\n  /**\n   * Get a specific PuppetDB report logs.\n   *\n   * @param puppetDbReportHash - The ID of the report.\n   * @returns Logs from a specific PuppetDB report.\n   */\n  getPuppetDbReportLogs(\n    puppetDbReportHash: string,\n  ): Promise<PuppetDbReportLog[] | undefined>;\n};\n"],"names":[],"mappings":";;AAgKO,MAAM,iBAAiB,YAA0B,CAAA;AAAA,EACtD,EAAI,EAAA,yBAAA;AACN,CAAC;;;;"}