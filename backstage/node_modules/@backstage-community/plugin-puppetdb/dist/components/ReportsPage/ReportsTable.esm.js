import { puppetDbApiRef } from '../../api/types.esm.js';
import '@backstage/errors';
import useAsync from 'react-use/esm/useAsync';
import React from 'react';
import { ResponseErrorPanel, Table, Link } from '@backstage/core-components';
import { useApi, useRouteRef } from '@backstage/core-plugin-api';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import { Link as Link$1 } from 'react-router-dom';
import { puppetDbReportRouteRef } from '../../routes.esm.js';
import { StatusField } from '../StatusField/StatusField.esm.js';

const useStyles = makeStyles((theme) => ({
  empty: {
    padding: theme.spacing(2),
    display: "flex",
    justifyContent: "center"
  }
}));
const ReportsTable = (props) => {
  const { certName } = props;
  const puppetDbApi = useApi(puppetDbApiRef);
  const reportsRouteLink = useRouteRef(puppetDbReportRouteRef);
  const classes = useStyles();
  const { value, loading, error } = useAsync(async () => {
    return puppetDbApi.getPuppetDbNodeReports(certName);
  }, [puppetDbApi, certName]);
  if (error) {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error });
  }
  const columns = [
    {
      title: "Configuration Version",
      field: "configuration_version",
      render: (rowData) => /* @__PURE__ */ React.createElement(
        Link,
        {
          component: Link$1,
          to: reportsRouteLink({ hash: rowData.hash })
        },
        rowData.configuration_version !== "" ? /* @__PURE__ */ React.createElement(Typography, { noWrap: true }, rowData.configuration_version) : /* @__PURE__ */ React.createElement(Typography, { noWrap: true }, /* @__PURE__ */ React.createElement("em", null, "(N/A)"))
      )
    },
    {
      title: "Start Time",
      field: "start_time",
      align: "center",
      width: "300px",
      render: (rowData) => /* @__PURE__ */ React.createElement(Typography, { noWrap: true }, new Date(Date.parse(rowData.start_time)).toLocaleString())
    },
    {
      title: "End Time",
      field: "end_time",
      align: "center",
      width: "300px",
      render: (rowData) => /* @__PURE__ */ React.createElement(Typography, { noWrap: true }, new Date(Date.parse(rowData.end_time)).toLocaleString())
    },
    {
      title: "Run Duration",
      align: "center",
      width: "400px",
      render: (rowData) => {
        const start_date = new Date(Date.parse(rowData.start_time));
        const end_date = new Date(Date.parse(rowData.end_time));
        const duration = new Date(end_date.getTime() - start_date.getTime());
        return /* @__PURE__ */ React.createElement(Typography, { noWrap: true }, duration.getUTCHours().toString().padStart(2, "0"), ":", duration.getUTCMinutes().toString().padStart(2, "0"), ":", duration.getUTCSeconds().toString().padStart(2, "0"), ".", duration.getUTCMilliseconds().toString().padStart(4, "0"));
      }
    },
    {
      title: "Environment",
      field: "environment"
    },
    {
      title: "Mode",
      field: "noop",
      align: "center",
      render: (rowData) => rowData.noop ? /* @__PURE__ */ React.createElement(Typography, null, "NOOP") : /* @__PURE__ */ React.createElement(Typography, null, "NO-NOOP")
    },
    {
      title: "Status",
      field: "status",
      align: "center",
      render: (rowData) => /* @__PURE__ */ React.createElement(StatusField, { status: rowData.status })
    }
  ];
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      options: {
        sorting: true,
        actionsColumnIndex: -1,
        loadingType: "linear",
        padding: "dense",
        showEmptyDataSourceMessage: !loading,
        showTitle: true,
        toolbar: true,
        pageSize: 10,
        pageSizeOptions: [10]
      },
      emptyContent: /* @__PURE__ */ React.createElement(Typography, { color: "textSecondary", className: classes.empty }, "No reports"),
      title: `Latest PuppetDB reports from node ${certName}`,
      columns,
      data: value || [],
      isLoading: loading
    }
  );
};

export { ReportsTable };
//# sourceMappingURL=ReportsTable.esm.js.map
