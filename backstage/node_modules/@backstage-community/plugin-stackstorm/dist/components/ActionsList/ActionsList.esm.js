import React, { useState } from 'react';
import useAsync from 'react-use/esm/useAsync';
import { Progress, ResponseErrorPanel, Link } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import List from '@material-ui/core/List';
import ListItemText from '@material-ui/core/ListItemText';
import Collapse from '@material-ui/core/Collapse';
import ListItem from '@material-ui/core/ListItem';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import { makeStyles } from '@material-ui/core/styles';
import ExpandMore from '@material-ui/icons/ExpandMore';
import ExpandLess from '@material-ui/icons/ExpandLess';
import { stackstormApiRef } from '../../api/types.esm.js';
import '@backstage/errors';

const useStyles = makeStyles((theme) => ({
  root: {
    width: "100%",
    backgroundColor: theme.palette.background.paper
  },
  actions: {
    borderBottom: `2px solid ${theme.palette.divider}`
  },
  nested: {
    paddingLeft: theme.spacing(8),
    paddingRight: theme.spacing(4)
  },
  icon: {
    minWidth: "34px"
  }
}));
const ActionItems = ({ pack }) => {
  const classes = useStyles();
  const st2 = useApi(stackstormApiRef);
  const { value, loading, error } = useAsync(async () => {
    const data = await st2.getActions(pack.ref);
    return data;
  }, []);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error });
  }
  return /* @__PURE__ */ React.createElement(List, { component: "div", disablePadding: true, className: classes.actions }, (value || []).map((a) => {
    return /* @__PURE__ */ React.createElement(
      ListItem,
      {
        key: a.ref,
        component: Link,
        to: st2.getActionUrl(a.ref),
        className: classes.nested,
        underline: "none",
        color: "inherit",
        button: true
      },
      /* @__PURE__ */ React.createElement(ListItemText, { primary: a.name, secondary: a.description }),
      /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, a.runner_type)
    );
  }));
};
const PackListItem = ({ pack, opened, onClick }) => {
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ListItem, { button: true, onClick: () => onClick(pack.ref) }, /* @__PURE__ */ React.createElement(ListItemIcon, { className: classes.icon }, opened ? /* @__PURE__ */ React.createElement(ExpandLess, null) : /* @__PURE__ */ React.createElement(ExpandMore, null)), /* @__PURE__ */ React.createElement(ListItemText, { primary: pack.ref, secondary: pack.description }), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, "version: ", pack.version)), /* @__PURE__ */ React.createElement(Collapse, { in: opened, timeout: "auto", unmountOnExit: true }, /* @__PURE__ */ React.createElement(ActionItems, { pack })));
};
const ActionsList = () => {
  const st2 = useApi(stackstormApiRef);
  const classes = useStyles();
  const [expanded, setExpanded] = useState([]);
  const onClick = (ref) => {
    setExpanded(
      (refs) => refs.includes(ref) ? refs.filter((r) => r !== ref) : refs.concat(ref)
    );
  };
  const { value, loading, error } = useAsync(async () => {
    const data = await st2.getPacks();
    return data;
  }, []);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error });
  }
  return /* @__PURE__ */ React.createElement(
    List,
    {
      component: "nav",
      "aria-labelledby": "nested-list-subheader",
      className: classes.root
    },
    (value || []).map((p) => {
      return /* @__PURE__ */ React.createElement(
        PackListItem,
        {
          key: p.ref,
          pack: p,
          opened: expanded.includes(p.ref),
          onClick
        }
      );
    })
  );
};

export { ActionItems, ActionsList, PackListItem };
//# sourceMappingURL=ActionsList.esm.js.map
