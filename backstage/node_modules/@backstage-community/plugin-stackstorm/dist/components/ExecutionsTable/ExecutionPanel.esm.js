import React from 'react';
import { Progress, ResponseErrorPanel, CodeSnippet } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import { stackstormApiRef } from '../../api/types.esm.js';
import '@backstage/errors';
import useAsync from 'react-use/esm/useAsync';
import Button from '@material-ui/core/Button';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableRow from '@material-ui/core/TableRow';
import Typography from '@material-ui/core/Typography';
import { makeStyles, withStyles } from '@material-ui/core/styles';
import { Status } from './Status.esm.js';

const useStyles = makeStyles((theme) => ({
  table: {
    maxWidth: "50%",
    flex: "i"
  },
  title: {
    paddingTop: theme.spacing(2),
    fontSize: 14,
    fontWeight: "bold",
    textTransform: "uppercase"
  },
  card: {
    borderBottom: `2px solid ${theme.palette.divider}`
  }
}));
const THead = withStyles(() => ({
  root: {
    paddingLeft: 0
  }
}))(TableCell);
const TRow = withStyles((theme) => ({
  root: {
    "&:nth-of-type(odd)": {
      backgroundColor: theme.palette.background.paper
    }
  }
}))(TableRow);
const ExecutionCard = ({ e }) => {
  const st2 = useApi(stackstormApiRef);
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(Card, { className: classes.card }, /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Table, { className: classes.table, size: "small" }, /* @__PURE__ */ React.createElement(TableBody, null, /* @__PURE__ */ React.createElement(TRow, null, /* @__PURE__ */ React.createElement(THead, { component: "th", scope: "row" }, "Name"), /* @__PURE__ */ React.createElement(TableCell, null, e.action.ref)), /* @__PURE__ */ React.createElement(TRow, null, /* @__PURE__ */ React.createElement(THead, { component: "th", scope: "row" }, "Status"), /* @__PURE__ */ React.createElement(TableCell, null, /* @__PURE__ */ React.createElement(Status, { status: e.status }))), /* @__PURE__ */ React.createElement(TRow, null, /* @__PURE__ */ React.createElement(THead, { component: "th", scope: "row" }, "Execution ID"), /* @__PURE__ */ React.createElement(TableCell, null, e.id)), /* @__PURE__ */ React.createElement(TRow, null, /* @__PURE__ */ React.createElement(THead, { component: "th", scope: "row" }, "Started"), /* @__PURE__ */ React.createElement(TableCell, null, new Date(e.start_timestamp).toUTCString())), /* @__PURE__ */ React.createElement(TRow, null, /* @__PURE__ */ React.createElement(THead, { component: "th", scope: "row" }, "Finished"), /* @__PURE__ */ React.createElement(TableCell, null, new Date(e.end_timestamp).toUTCString())), /* @__PURE__ */ React.createElement(TRow, null, /* @__PURE__ */ React.createElement(THead, { component: "th", scope: "row" }, "Execution Time"), /* @__PURE__ */ React.createElement(TableCell, null, Math.round(e.elapsed_seconds), " s")), /* @__PURE__ */ React.createElement(TRow, null, /* @__PURE__ */ React.createElement(THead, { component: "th", scope: "row" }, "Runner"), /* @__PURE__ */ React.createElement(TableCell, null, e.action.runner_type)))), /* @__PURE__ */ React.createElement(Typography, { className: classes.title, gutterBottom: true }, "Action Output"), /* @__PURE__ */ React.createElement(
    CodeSnippet,
    {
      text: JSON.stringify(e.result, null, 2),
      language: "json",
      customStyle: { width: 800 }
    }
  ), /* @__PURE__ */ React.createElement(Typography, { className: classes.title, gutterBottom: true }, "Action Input"), /* @__PURE__ */ React.createElement(
    CodeSnippet,
    {
      text: JSON.stringify(e.parameters, null, 2),
      language: "json",
      customStyle: { width: 800 }
    }
  )), /* @__PURE__ */ React.createElement(CardActions, null, /* @__PURE__ */ React.createElement(
    Button,
    {
      size: "small",
      href: `${st2.getExecutionHistoryUrl(e.id)}`,
      target: "_blank"
    },
    "View in ST2"
  )));
};
const ExecutionPanel = ({ id }) => {
  const st2 = useApi(stackstormApiRef);
  const { value, loading, error } = useAsync(async () => {
    const data = await st2.getExecution(id);
    return data;
  }, []);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error });
  }
  return /* @__PURE__ */ React.createElement(ExecutionCard, { e: value });
};

export { ExecutionPanel };
//# sourceMappingURL=ExecutionPanel.esm.js.map
