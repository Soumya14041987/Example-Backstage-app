{"version":3,"file":"ExecutionPanel.esm.js","sources":["../../../src/components/ExecutionsTable/ExecutionPanel.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport {\n  CodeSnippet,\n  Progress,\n  ResponseErrorPanel,\n} from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { Execution, stackstormApiRef } from '../../api';\nimport useAsync from 'react-use/esm/useAsync';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { Status } from './Status';\n\nconst useStyles = makeStyles(theme => ({\n  table: {\n    maxWidth: '50%',\n    flex: 'i',\n  },\n  title: {\n    paddingTop: theme.spacing(2),\n    fontSize: 14,\n    fontWeight: 'bold',\n    textTransform: 'uppercase',\n  },\n  card: {\n    borderBottom: `2px solid ${theme.palette.divider}`,\n  },\n}));\n\nconst THead = withStyles(() => ({\n  root: {\n    paddingLeft: 0,\n  },\n}))(TableCell);\n\nconst TRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.paper,\n    },\n  },\n}))(TableRow);\n\nconst ExecutionCard = ({ e }: { e: Execution }) => {\n  const st2 = useApi(stackstormApiRef);\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Table className={classes.table} size=\"small\">\n          <TableBody>\n            <TRow>\n              <THead component=\"th\" scope=\"row\">\n                Name\n              </THead>\n              <TableCell>{e.action.ref}</TableCell>\n            </TRow>\n            <TRow>\n              <THead component=\"th\" scope=\"row\">\n                Status\n              </THead>\n              <TableCell>\n                <Status status={e.status} />\n              </TableCell>\n            </TRow>\n            <TRow>\n              <THead component=\"th\" scope=\"row\">\n                Execution ID\n              </THead>\n              <TableCell>{e.id}</TableCell>\n            </TRow>\n            <TRow>\n              <THead component=\"th\" scope=\"row\">\n                Started\n              </THead>\n              <TableCell>{new Date(e.start_timestamp).toUTCString()}</TableCell>\n            </TRow>\n            <TRow>\n              <THead component=\"th\" scope=\"row\">\n                Finished\n              </THead>\n              <TableCell>{new Date(e.end_timestamp).toUTCString()}</TableCell>\n            </TRow>\n            <TRow>\n              <THead component=\"th\" scope=\"row\">\n                Execution Time\n              </THead>\n              <TableCell>{Math.round(e.elapsed_seconds)} s</TableCell>\n            </TRow>\n            <TRow>\n              <THead component=\"th\" scope=\"row\">\n                Runner\n              </THead>\n              <TableCell>{e.action.runner_type}</TableCell>\n            </TRow>\n          </TableBody>\n        </Table>\n        <Typography className={classes.title} gutterBottom>\n          Action Output\n        </Typography>\n        <CodeSnippet\n          text={JSON.stringify(e.result, null, 2)}\n          language=\"json\"\n          customStyle={{ width: 800 }}\n        />\n        <Typography className={classes.title} gutterBottom>\n          Action Input\n        </Typography>\n        <CodeSnippet\n          text={JSON.stringify(e.parameters, null, 2)}\n          language=\"json\"\n          customStyle={{ width: 800 }}\n        />\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          href={`${st2.getExecutionHistoryUrl(e.id)}`}\n          target=\"_blank\"\n        >\n          View in ST2\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport const ExecutionPanel = ({ id }: { id: string }) => {\n  const st2 = useApi(stackstormApiRef);\n\n  const { value, loading, error } = useAsync(async (): Promise<Execution> => {\n    const data = await st2.getExecution(id);\n    return data;\n  }, []);\n\n  if (loading) {\n    return <Progress />;\n  } else if (error) {\n    return <ResponseErrorPanel error={error} />;\n  }\n\n  return <ExecutionCard e={value!} />;\n};\n"],"names":[],"mappings":"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"}