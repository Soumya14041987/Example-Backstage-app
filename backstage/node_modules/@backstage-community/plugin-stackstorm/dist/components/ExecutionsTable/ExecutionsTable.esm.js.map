{"version":3,"file":"ExecutionsTable.esm.js","sources":["../../../src/components/ExecutionsTable/ExecutionsTable.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useState } from 'react';\nimport {\n  Link,\n  ResponseErrorPanel,\n  Table,\n  TableColumn,\n} from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { Execution, stackstormApiRef } from '../../api';\nimport { Status } from './Status';\nimport { ExecutionPanel } from './ExecutionPanel';\nimport useAsync from 'react-use/esm/useAsync';\n\ntype DenseTableProps = {\n  executions: Execution[];\n  loading: boolean;\n  page: number;\n  pageSize: number;\n  onPageChange: (page: number) => void;\n  onRowsPerPageChange: (rows: number) => void;\n};\n\nexport const DenseTable = ({\n  executions,\n  loading,\n  page,\n  pageSize,\n  onPageChange,\n  onRowsPerPageChange,\n}: DenseTableProps) => {\n  const st2 = useApi(stackstormApiRef);\n\n  const columns: TableColumn<Execution>[] = [\n    {\n      title: 'Status',\n      field: 'status',\n      render: e => <Status status={e.status} />,\n    },\n    {\n      title: 'Time',\n      field: 'start_timestamp',\n      render: e => `${new Date(e.start_timestamp).toUTCString()}`,\n    },\n    { title: 'Name', field: 'action.ref' },\n    {\n      title: 'Execution ID',\n      field: 'id',\n      render: e => <Link to={st2.getExecutionHistoryUrl(e.id)}>{e.id}</Link>,\n    },\n  ];\n\n  const count =\n    pageSize > executions.length\n      ? (page + 1) * pageSize + executions.length - pageSize\n      : (page + 1) * pageSize + 1;\n\n  return (\n    <Table\n      title=\"Executions\"\n      columns={columns}\n      data={executions}\n      page={page}\n      totalCount={count}\n      isLoading={loading}\n      options={{\n        paging: true,\n        search: false,\n        pageSize: pageSize,\n        padding: 'dense',\n        showFirstLastPageButtons: false,\n      }}\n      onPageChange={onPageChange}\n      onRowsPerPageChange={onRowsPerPageChange}\n      detailPanel={rowData => {\n        return <ExecutionPanel id={rowData.rowData.id} />;\n      }}\n    />\n  );\n};\n\nexport const ExecutionsTable = () => {\n  const st2 = useApi(stackstormApiRef);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const { value, loading, error } = useAsync(async (): Promise<Execution[]> => {\n    const data = await st2.getExecutions(rowsPerPage, page * rowsPerPage);\n    return data;\n  }, [page, rowsPerPage, st2]);\n\n  if (error) {\n    return <ResponseErrorPanel error={error} />;\n  }\n\n  return (\n    <DenseTable\n      page={page}\n      pageSize={rowsPerPage}\n      loading={loading}\n      executions={value || []}\n      onRowsPerPageChange={setRowsPerPage}\n      onPageChange={setPage}\n    />\n  );\n};\n"],"names":[],"mappings":"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"}