import { createApiRef, createRouteRef, useApi, configApiRef, errorApiRef, createPlugin, createApiFactory, fetchApiRef, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import { scmAuthApiRef, scmIntegrationsApiRef } from '@backstage/integration-react';
import { EntityRefLink, catalogApiRef } from '@backstage/plugin-catalog-react';
import { DEFAULT_NAMESPACE, RELATION_OWNED_BY, stringifyEntityRef, parseEntityRef } from '@backstage/catalog-model';
import { getGithubFileFetchUrl } from '@backstage/integration';
import React, { useEffect } from 'react';
import { ResponseErrorPanel, Progress, Table, Link } from '@backstage/core-components';
import useAsync from 'react-use/lib/useAsync';
import { createTheme } from '@material-ui/core/styles';
import { Chip } from '@material-ui/core';

var ScoreSuccessEnum = /* @__PURE__ */ ((ScoreSuccessEnum2) => {
  ScoreSuccessEnum2["Success"] = "success";
  ScoreSuccessEnum2["AlmostSuccess"] = "almost-success";
  ScoreSuccessEnum2["Partial"] = "partial";
  ScoreSuccessEnum2["AlmostFailure"] = "almost-failure";
  ScoreSuccessEnum2["Failure"] = "failure";
  return ScoreSuccessEnum2;
})(ScoreSuccessEnum || {});

const scoringDataApiRef = createApiRef({
  id: "plugin.scoringdata.service"
});

var __defProp$1 = Object.defineProperty;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$1 = (obj, key, value) => {
  __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class ScoringDataJsonClient {
  constructor({
    configApi,
    catalogApi,
    fetchApi,
    scmAuthApi,
    scmIntegrationsApi
  }) {
    __publicField$1(this, "configApi");
    __publicField$1(this, "catalogApi");
    __publicField$1(this, "fetchApi");
    __publicField$1(this, "scmAuthApi");
    __publicField$1(this, "scmIntegrationsApi");
    this.configApi = configApi;
    this.catalogApi = catalogApi;
    this.fetchApi = fetchApi;
    this.scmAuthApi = scmAuthApi;
    this.scmIntegrationsApi = scmIntegrationsApi;
  }
  async getScore(entity) {
    var _a;
    if (!entity) {
      return void 0;
    }
    const jsonFromAnnotation = this.getAnnotationValue(
      entity,
      "scorecard/jsonDataUrl"
    );
    let urlWithData;
    if (jsonFromAnnotation) {
      urlWithData = jsonFromAnnotation;
    } else {
      const jsonDataUrl = this.getJsonDataUrl();
      urlWithData = `${jsonDataUrl}${(_a = entity.metadata.namespace) != null ? _a : DEFAULT_NAMESPACE}/${entity.kind}/${entity.metadata.name}.json`.toLowerCase();
    }
    this.logConsole(
      `ScoringDataJsonClient: fetching score from: ${urlWithData}`
    );
    const result = await this.getResult(
      urlWithData
    );
    if (!result) {
      return void 0;
    }
    return this.extendEntityScore(result, [entity]);
  }
  async getAllScores(entityKindFilter, entity) {
    var _a;
    const jsonFromAnnotation = entity ? this.getAnnotationValue(entity, "scorecard/jsonDataUrl") : void 0;
    let urlWithData;
    if (jsonFromAnnotation) {
      urlWithData = jsonFromAnnotation;
    } else {
      const jsonDataUrl = this.getJsonDataUrl();
      urlWithData = `${jsonDataUrl}all.json`;
    }
    this.logConsole(
      `ScoringDataJsonClient: fetching all scores from ${urlWithData}`
    );
    let result = await this.getResult(
      urlWithData
    );
    if (!result)
      return void 0;
    if (entityKindFilter && entityKindFilter.length) {
      result = result.filter(
        (e) => {
          var _a2;
          return entityKindFilter.map((f) => f.toLocaleLowerCase()).includes((_a2 = e.entityRef) == null ? void 0 : _a2.kind.toLowerCase());
        }
      );
    }
    const entity_names = result.reduce((acc, a) => {
      var _a2;
      if ((_a2 = a.entityRef) == null ? void 0 : _a2.name) {
        acc.add(a.entityRef.name);
      }
      return acc;
    }, /* @__PURE__ */ new Set());
    const fetchAllEntities = (_a = this.configApi.getOptionalBoolean("scorecards.fetchAllEntities")) != null ? _a : false;
    const response = await this.catalogApi.getEntities({
      filter: fetchAllEntities ? void 0 : {
        "metadata.name": Array.from(entity_names)
      },
      fields: ["kind", "metadata.name", "spec.owner", "relations"]
    });
    const entities = fetchAllEntities ? response.items.filter((i) => entity_names.has(i.metadata.name)) : response.items;
    return result.map((score) => {
      return this.extendEntityScore(score, entities);
    });
  }
  // ---- HELPER METHODS ---- //
  logConsole(_) {
  }
  async getResult(jsonDataUrl) {
    const integration = this.scmIntegrationsApi.byUrl(jsonDataUrl);
    let auth;
    try {
      auth = await this.scmAuthApi.getCredentials({ url: jsonDataUrl });
    } catch (error) {
      this.logConsole(
        `No authentication config found for ${jsonDataUrl}, proceeding without authentication`
      );
    }
    let requestUrl;
    let headers = {};
    switch (integration == null ? void 0 : integration.type) {
      case "github":
        requestUrl = getGithubFileFetchUrl(
          jsonDataUrl,
          integration.config,
          { ...auth, type: "token" }
        );
        headers = {
          ...auth && auth.headers,
          Accept: "application/vnd.github.v3.raw"
        };
        break;
      default:
        requestUrl = jsonDataUrl;
        break;
    }
    try {
      const result = await this.fetchApi.fetch(requestUrl, {
        headers
      });
      if (result.status === 404) {
        return void 0;
      } else if (result.status !== 200) {
        return void 0;
      }
      const json = await result.json();
      this.logConsole(`result: ${JSON.stringify(json)}`);
      return json;
    } catch (error) {
      throw new Error(`error from server (code ${error.status})`);
    }
  }
  getJsonDataUrl() {
    var _a;
    return (_a = this.configApi.getOptionalString("scorecards.jsonDataUrl")) != null ? _a : "https://unknown-url-please-configure/";
  }
  extendEntityScore(score, entities) {
    var _a, _b, _c, _d, _e, _f;
    if (score === null) {
      throw new Error(`can not extend null entity score.`);
    }
    if (typeof score === "undefined") {
      throw new Error(`can not extend undefined entity score.`);
    }
    const catalogEntity = entities ? entities.find((entity) => {
      var _a2;
      return entity.metadata.name === ((_a2 = score.entityRef) == null ? void 0 : _a2.name);
    }) : void 0;
    const owner = (_b = (_a = catalogEntity == null ? void 0 : catalogEntity.relations) == null ? void 0 : _a.find(
      (r) => r.type === RELATION_OWNED_BY
    )) == null ? void 0 : _b.targetRef;
    let reviewer = void 0;
    if (score.scoringReviewer && !((_c = score.scoringReviewer) == null ? void 0 : _c.name)) {
      reviewer = {
        name: score.scoringReviewer,
        kind: "User",
        namespace: "default"
      };
    } else if ((_d = score.scoringReviewer) == null ? void 0 : _d.name) {
      const scoringReviewer = score.scoringReviewer;
      reviewer = {
        name: scoringReviewer.name,
        kind: (_e = scoringReviewer == null ? void 0 : scoringReviewer.kind) != null ? _e : "User",
        namespace: (_f = scoringReviewer == null ? void 0 : scoringReviewer.namespace) != null ? _f : DEFAULT_NAMESPACE
      };
    }
    const reviewDate = score.scoringReviewDate ? new Date(score.scoringReviewDate) : void 0;
    return {
      id: stringifyEntityRef(score.entityRef),
      owner: owner ? parseEntityRef(owner) : void 0,
      reviewer,
      reviewDate,
      ...score
    };
  }
  getAnnotationValue(entity, annotation) {
    if (!entity.metadata.annotations) {
      return void 0;
    }
    if (annotation && !entity.metadata.annotations[annotation]) {
      return void 0;
    }
    return entity.metadata.annotations[annotation];
  }
}

const rootRouteRef = createRouteRef({
  id: "score-card"
});

const scoreToColorConverter = (scoreSuccess) => {
  const theme = createTheme();
  if (typeof scoreSuccess === "undefined") {
    return theme.palette.grey[500];
  }
  switch (scoreSuccess) {
    case ScoreSuccessEnum.Success:
      return "rgb(114, 175, 80)";
    case ScoreSuccessEnum.AlmostSuccess:
      return "rgb(172, 191, 140)";
    case ScoreSuccessEnum.Partial:
      return "rgb(226, 232, 179)";
    case ScoreSuccessEnum.AlmostFailure:
      return "rgb(255, 192, 85)";
    case ScoreSuccessEnum.Failure:
      return "rgb(235, 111, 53)";
    default:
      return theme.palette.grey[500];
  }
};

const getWarningPanel = (error) => {
  return /* @__PURE__ */ React.createElement(
    ResponseErrorPanel,
    {
      error,
      title: "Could not load data",
      defaultExpanded: true,
      key: "error"
    }
  );
};

var DisplayPolicy = /* @__PURE__ */ ((DisplayPolicy2) => {
  DisplayPolicy2["IfDataPresent"] = "if-data-present";
  DisplayPolicy2["Never"] = "never";
  DisplayPolicy2["Always"] = "always";
  return DisplayPolicy2;
})(DisplayPolicy || {});

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class DisplayConfig {
  constructor({ configApi }) {
    __publicField(this, "configApi");
    this.configApi = configApi;
  }
  getDisplayPolicies() {
    var _a, _b;
    const displayConfig = this.configApi.getOptionalConfig("scorecards.display");
    return {
      reviewer: (_a = displayConfig == null ? void 0 : displayConfig.getOptionalString("reviewer")) != null ? _a : DisplayPolicy.Always,
      reviewDate: (_b = displayConfig == null ? void 0 : displayConfig.getOptionalString("reviewDate")) != null ? _b : DisplayPolicy.Always
    };
  }
}
const useDisplayConfig = () => {
  const configApi = useApi(configApiRef);
  return new DisplayConfig({ configApi });
};

const useScoringAllDataLoader = (entityKindFilter, entity) => {
  const errorApi = useApi(errorApiRef);
  const scorigDataApi = useApi(scoringDataApiRef);
  const { error, value, loading } = useAsync(
    async () => scorigDataApi.getAllScores(entityKindFilter, entity),
    [scorigDataApi]
  );
  useEffect(() => {
    if (error) {
      errorApi.post(error);
    }
  }, [error, errorApi]);
  return { loading, value, error };
};
const ScoreTable = ({ title, scores }) => {
  const displayPolicies = useDisplayConfig().getDisplayPolicies();
  const columns = [
    {
      title: "Name",
      field: "entityRef.name",
      render: (entityScore) => {
        var _a, _b;
        if (!((_a = entityScore.entityRef) == null ? void 0 : _a.name)) {
          return /* @__PURE__ */ React.createElement(React.Fragment, null, "Missing entityRef.name key");
        }
        return /* @__PURE__ */ React.createElement(
          Link,
          {
            to: `/catalog/${(_b = entityScore.entityRef.namespace) != null ? _b : DEFAULT_NAMESPACE}/${entityScore.entityRef.kind}/${entityScore.entityRef.name}/score`,
            "data-id": entityScore.entityRef.name
          },
          entityScore.entityRef.name
        );
      }
    },
    {
      title: "Kind",
      field: "entityRef.kind",
      render: (entityScore) => {
        return /* @__PURE__ */ React.createElement(React.Fragment, null, entityScore.entityRef.kind);
      }
    },
    {
      title: "Owner",
      field: "owner.name",
      render: (entityScore) => entityScore.owner ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(EntityRefLink, { entityRef: entityScore.owner }, entityScore.owner.name)) : null
    }
  ];
  if (displayPolicies.reviewer === DisplayPolicy.Always || displayPolicies.reviewer === DisplayPolicy.IfDataPresent && scores.some((s) => !!s.scoringReviewer)) {
    columns.push({
      title: "Reviewer",
      field: "scoringReviewer",
      render: (entityScore) => {
        var _a;
        return entityScore.reviewer ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(EntityRefLink, { entityRef: entityScore.reviewer }, (_a = entityScore.reviewer) == null ? void 0 : _a.name)) : null;
      }
    });
  }
  if (displayPolicies.reviewDate === DisplayPolicy.Always || displayPolicies.reviewDate === DisplayPolicy.IfDataPresent && scores.some((s) => !!s.scoringReviewDate)) {
    columns.push({
      title: "Date",
      field: "scoringReviewDate",
      render: (entityScore) => entityScore.reviewDate ? /* @__PURE__ */ React.createElement(React.Fragment, null, entityScore.reviewDate.toLocaleDateString()) : null
    });
  }
  scores.flatMap((s) => {
    var _a;
    return (_a = s.areaScores) != null ? _a : [];
  }).reduce((areas, area) => {
    if (!area || !area.title || areas.findIndex((x) => x === area.title) !== -1)
      return areas;
    areas.push(area.title);
    columns.push({
      title: area.title,
      field: "n/a",
      customSort: (d1, d2) => {
        var _a, _b;
        const d1ScoreEntry = (d1 == null ? void 0 : d1.areaScores) ? (_a = d1.areaScores.find((a) => a.title === area.title)) == null ? void 0 : _a.scorePercent : void 0;
        const d2ScoreEntry = (d2 == null ? void 0 : d2.areaScores) ? (_b = d2.areaScores.find((a) => a.title === area.title)) == null ? void 0 : _b.scorePercent : void 0;
        if (!d1ScoreEntry || d1ScoreEntry < (d2ScoreEntry != null ? d2ScoreEntry : 0))
          return -1;
        if (!d2ScoreEntry || d2ScoreEntry < d1ScoreEntry)
          return 1;
        return 0;
      },
      render: (entityScoreEntry) => {
        var _a;
        const currentScoreEntry = (entityScoreEntry == null ? void 0 : entityScoreEntry.areaScores) ? entityScoreEntry.areaScores.find((a) => a.title === area.title) : void 0;
        const chipStyle = {
          margin: 0,
          backgroundColor: scoreToColorConverter(
            currentScoreEntry == null ? void 0 : currentScoreEntry.scoreSuccess
          ),
          minWidth: "4rem"
        };
        const label = (_a = currentScoreEntry == null ? void 0 : currentScoreEntry.scoreLabel) != null ? _a : `${currentScoreEntry == null ? void 0 : currentScoreEntry.scorePercent} %`;
        return typeof (currentScoreEntry == null ? void 0 : currentScoreEntry.scorePercent) !== "undefined" ? /* @__PURE__ */ React.createElement(Chip, { label, style: chipStyle }) : null;
      }
    });
    return areas;
  }, []);
  columns.push({
    title: "Total",
    align: "right",
    field: "scorePercent",
    render: (entityScoreEntry) => {
      var _a;
      const chipStyle = {
        margin: 0,
        backgroundColor: scoreToColorConverter(entityScoreEntry == null ? void 0 : entityScoreEntry.scoreSuccess),
        float: "right",
        minWidth: "4rem"
      };
      const label = (_a = entityScoreEntry == null ? void 0 : entityScoreEntry.scoreLabel) != null ? _a : `${entityScoreEntry == null ? void 0 : entityScoreEntry.scorePercent} %`;
      return typeof entityScoreEntry.scorePercent !== "undefined" ? /* @__PURE__ */ React.createElement(Chip, { label, style: chipStyle }) : null;
    }
  });
  const minDefaultPageSizeOption = scores.length >= 10 ? scores.length : 10;
  const maxDefaultPageSizeOption = scores.length < 100 ? minDefaultPageSizeOption : 100;
  const defaultPageSizeOption = minDefaultPageSizeOption > maxDefaultPageSizeOption ? maxDefaultPageSizeOption : minDefaultPageSizeOption;
  return /* @__PURE__ */ React.createElement("div", { "data-testid": "score-board-table" }, /* @__PURE__ */ React.createElement(
    Table,
    {
      title: title != null ? title : "Entities scores overview",
      options: {
        search: true,
        paging: true,
        padding: "dense",
        pageSize: defaultPageSizeOption,
        pageSizeOptions: [defaultPageSizeOption, 20, 50, 100, 200]
      },
      columns,
      data: scores
    }
  ));
};
const ScoreCardTable = ({
  title,
  entityKindFilter,
  entity
}) => {
  const {
    loading,
    error,
    value: data
  } = useScoringAllDataLoader(entityKindFilter, entity);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return getWarningPanel(error);
  }
  return /* @__PURE__ */ React.createElement(ScoreTable, { title, scores: data || [] });
};

const scoreCardPlugin = createPlugin({
  id: "score-card",
  routes: {
    root: rootRouteRef
  },
  apis: [
    createApiFactory({
      api: scoringDataApiRef,
      deps: {
        configApi: configApiRef,
        catalogApi: catalogApiRef,
        fetchApi: fetchApiRef,
        scmAuthApi: scmAuthApiRef,
        scmIntegrationsApi: scmIntegrationsApiRef
      },
      factory: ({
        configApi,
        catalogApi,
        fetchApi,
        scmAuthApi,
        scmIntegrationsApi
      }) => {
        return new ScoringDataJsonClient({
          configApi,
          catalogApi,
          fetchApi,
          scmAuthApi,
          scmIntegrationsApi
        });
      }
    })
  ]
});
const ScoreBoardPage = scoreCardPlugin.provide(
  createRoutableExtension({
    name: "score-board-page",
    component: () => import('./index-a78040ce.esm.js').then((m) => m.ScoreBoardPage),
    mountPoint: rootRouteRef
  })
);
const EntityScoreCardContent = scoreCardPlugin.provide(
  createComponentExtension({
    name: "score-board-card",
    component: {
      lazy: () => import('./index-ed2ccf32.esm.js').then((m) => m.ScoreCard)
    }
  })
);
const EntityScoreCardTable = scoreCardPlugin.provide(
  createComponentExtension({
    name: "entity-score-card-table",
    component: {
      lazy: () => import('./index-28a4474c.esm.js').then(
        (m) => m.EntityScoreCardTable
      )
    }
  })
);

export { DisplayPolicy as D, EntityScoreCardContent as E, ScoreCardTable as S, scoringDataApiRef as a, scoreCardPlugin as b, ScoreBoardPage as c, EntityScoreCardTable as d, ScoreSuccessEnum as e, ScoringDataJsonClient as f, getWarningPanel as g, scoreToColorConverter as s, useDisplayConfig as u };
//# sourceMappingURL=index-f8a1c12a.esm.js.map
