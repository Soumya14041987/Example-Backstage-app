"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSchema = exports.attachAdvancedValidators = void 0;
function attachAdvancedValidators(ajv) {
    ajv.addKeyword({
        keyword: 'x-custom-validator',
        errors: true,
        validate: function myValidation(customValidator, schemaFromSpec) {
            // @ts-ignore
            if (myValidation.errors === null)
                myValidation.errors = [];
            try {
                if (customValidator === 'validateSchema')
                    validateSchema(schemaFromSpec);
            }
            catch (e) {
                // @ts-ignore
                myValidation.errors.push({
                    keyword: 'x-custom-validator',
                    message: e.message,
                    params: {
                        keyword: 'customValidator',
                    },
                });
                return false;
            }
            return true;
        },
    });
}
exports.attachAdvancedValidators = attachAdvancedValidators;
function validateSchema(schema) {
    if (schema.type === 'object') {
        checkForDisallowedKeywords('schema with type "object" cannot also include keywords: ', ['items'], schema);
    }
    else if (schema.type === 'array') {
        checkForDisallowedKeywords('schema with type "array" cannot also include keywords: ', ['properties', 'required'], schema);
    }
    else if (schema.oneOf) {
        checkForDisallowedKeywords('schema with oneOf cannot also include keywords: ', ['allOf', 'anyOf'], schema);
    }
    else if (schema.anyOf) {
        checkForDisallowedKeywords('schema with anyOf cannot also include keywords: ', ['allOf', 'oneOf'], schema);
    }
    else if (schema.allOf) {
        checkForDisallowedKeywords('schema with anyOf cannot also include keywords: ', ['anyOf', 'oneOf'], schema);
    }
}
exports.validateSchema = validateSchema;
function checkForDisallowedKeywords(errorPrefix, keywords, schema) {
    const found = keywords.filter((keyword) => schema.hasOwnProperty(keyword));
    if (found.length) {
        throw new Error(`${errorPrefix}${found.sort().join(', ')}`);
    }
}
//# sourceMappingURL=advanced-validation.js.map