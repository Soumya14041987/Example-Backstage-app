"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonPointerLogger = void 0;
const chalk_1 = __importDefault(require("chalk"));
const openapi_utilities_1 = require("@useoptic/openapi-utilities");
function jsonPointerLogger(sourceMap) {
    const reader = (0, openapi_utilities_1.sourcemapReader)(sourceMap);
    return {
        log: (pointer, options) => {
            const lookupPosition = reader.findFileAndLines(pointer);
            if (lookupPosition) {
                const [start, end] = getDisplayedLineNumbers(lookupPosition.startLine);
                const source = sourceMap.files.find((file) => file.path === lookupPosition.filePath);
                if (!source)
                    throw new Error('could not render issue for file ' + lookupPosition.filePath);
                const previewLines = source.contents.split('\n').slice(start, end);
                return renderCodeFrame(start, end, previewLines, lookupPosition.filePath, lookupPosition.startLine, options);
            }
            return '';
        },
    };
}
exports.jsonPointerLogger = jsonPointerLogger;
function getDisplayedLineNumbers(line, before = 4, after = 3) {
    const start = line - before >= 0 ? line - before : 0;
    const end = line + after;
    return [start, end];
}
function renderCodeFrame(start, end, lines, fileName, focus, options) {
    const optionsOrDefault = options || {
        highlightColor: 'red',
        observation: '',
    };
    const maxLineWidth = end.toString().length + 1;
    const smallestLeadingWhiteSpace = Math.min(...lines.map((lineContents) => lineContents.search(/\S|$/) || 0));
    const formattedLines = lines.map((lineContents, index) => {
        const lineNumber = start + index;
        lineNumber.toString().padStart(maxLineWidth, ' ');
        const line = lineContents.substring(smallestLeadingWhiteSpace);
        const shouldHighlight = typeof focus === 'number' && focus - 1 === lineNumber;
        const observation = splitObservationLine(options?.observation || '');
        const lineWithObservation = observation
            ? `${line}  ${chalk_1.default.bgRed(observation)}`
            : line;
        return `${chalk_1.default.grey(lineNumber + 1 + ' |')} ${!shouldHighlight
            ? line
            : optionsOrDefault.highlightColor === 'red'
                ? chalk_1.default.bold.red(lineWithObservation)
                : optionsOrDefault.highlightColor === 'green'
                    ? chalk_1.default.bold.green(lineWithObservation)
                    : optionsOrDefault.highlightColor === 'yellow'
                        ? chalk_1.default.bold.yellow(lineWithObservation)
                        : line}`;
    });
    return `${formattedLines.join('\n')}\n${chalk_1.default.grey(fileName)}`;
}
function splitObservationLine(observation) {
    const lines = observation.split('\n');
    const firstLine = lines[0];
    if (firstLine.length > 40) {
        return firstLine.substring(0, 25) + '...';
    }
    else {
        return firstLine + (lines.length > 1 ? '...' : '');
    }
}
//# sourceMappingURL=log-json-pointer.js.map