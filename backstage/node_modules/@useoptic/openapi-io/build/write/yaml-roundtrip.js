"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyOperationsToYamlString = void 0;
const yaml_1 = __importDefault(require("yaml"));
const json_pointer_helpers_1 = require("@useoptic/json-pointer-helpers");
function applyOperationsToYamlString(yamlFileContent, operations) {
    const doc = yaml_1.default.parseDocument(yamlFileContent);
    operations.forEach((operation) => {
        const path = json_pointer_helpers_1.jsonPointerHelpers.decode(operation.path);
        switch (operation.op) {
            case 'add': {
                const node = doc.createNode(operation.value);
                const collectionPath = [...path];
                const lastPathItem = collectionPath.pop();
                const collection = doc.getIn(collectionPath);
                const isArray = Array.isArray(collection?.toJSON());
                // we are adding to an array collection
                if (isArray) {
                    const arrayCollection = doc.getIn(collectionPath);
                    const lastIndex = Number(lastPathItem);
                    arrayCollection.items = insert(arrayCollection.items, !isNaN(Number(lastIndex))
                        ? lastIndex
                        : lastPathItem === '-'
                            ? arrayCollection.items.length
                            : 0, node);
                    // we are adding to an map collection
                }
                else {
                    doc.addIn(collectionPath, {
                        key: lastPathItem,
                        value: node,
                    });
                }
                break;
            }
            case 'remove': {
                doc.deleteIn(path);
                break;
            }
            case 'replace':
                doc.setIn(path, operation.value);
                break;
            default:
                throw new Error('unsupported json patch operation ' + JSON.stringify(operation));
        }
    });
    return doc.toString({ collectionStyle: 'block' });
}
exports.applyOperationsToYamlString = applyOperationsToYamlString;
function insert(arr, index, item) {
    const copy = [...arr];
    copy.splice(index, 0, item);
    return copy;
}
//# sourceMappingURL=yaml-roundtrip.js.map