/// <reference types="node" />
import http from 'http';
export type ProcessResult = {
    stdout: string;
    stderr: string;
    combined: string;
    code: number | null;
};
export declare function run(command: string, print?: boolean, cwd?: string): Promise<ProcessResult>;
export declare function setupWorkspace(template: string, providedOptions?: {
    repo?: boolean;
    commit?: boolean;
}): Promise<string>;
export declare function runOptic(workspace: string, cmd: string, print?: boolean): Promise<ProcessResult>;
export declare function fileExists(path: string): Promise<boolean>;
export declare function normalizeWorkspace(workspace: string, text: string): string;
type MockHttpHandler = (req: {
    url: string;
    method: string;
    headers: http.IncomingHttpHeaders;
}) => any;
export declare let reqs: http.IncomingMessage[];
export declare function setupTestServer(maybeHandler?: MockHttpHandler): void;
export {};
//# sourceMappingURL=integration.d.ts.map