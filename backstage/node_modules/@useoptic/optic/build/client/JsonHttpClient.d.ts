/// <reference types="node" />
import fetch from 'node-fetch';
export declare class JsonHttpClient {
    fetch: typeof fetch;
    source: string;
    private verifyOkResponse;
    private handleJsonResponse;
    getJson<T = any>(url: string, additionalHeaders?: Record<string, string>): Promise<T>;
    getJsonWithoutHandlingResponse(url: string): Promise<fetch.Response>;
    postJsonString<T = any>(url: string, body: string, additionalHeaders?: Record<string, string>): Promise<T>;
    postJson<T = any>(url: string, body: any, additionalHeaders?: Record<string, string>): Promise<T>;
    patchJsonString<T = any>(url: string, body: string, additionalHeaders?: Record<string, string>): Promise<T>;
    patchJson<T = any>(url: string, body: any, additionalHeaders?: Record<string, string>): Promise<T>;
    postJsonWithoutBody<T = any>(url: string, additionalHeaders?: Record<string, string>): Promise<T>;
    getJsonAsText(url: string): Promise<string>;
    putJson<T = any>(url: string, body: object, additionalHeaders?: Record<string, string>): Promise<T>;
    putJsonString<T = any>(url: string, body: string, additionalHeaders?: Record<string, string>): Promise<T>;
    putBytes(url: string, body: Buffer, additionalHeaders?: Record<string, string>): Promise<string>;
}
//# sourceMappingURL=JsonHttpClient.d.ts.map