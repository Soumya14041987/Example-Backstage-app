"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsonHttpClient = void 0;
var _nodeFetch = _interopRequireDefault(require("node-fetch"));
var _errors = require("./errors");
class JsonHttpClient {
  // Create overridable this.fetch instance
  fetch = _nodeFetch.default;
  source = 'client';
  async verifyOkResponse(response) {
    const text = await response.text();
    if (!response.ok) {
      throw new Error(`expected a successful response. got ${response.status} ${response.statusText} \n${text}`);
    }
    return text;
  }
  handleJsonResponse = async response => {
    if (response.ok) {
      if (response.status === 204) {
        return;
      }
      const json = await response.json();
      return json;
    } else {
      const text = await response.text();
      const message = `${response.status} ${response.statusText} \n${text}`;
      const error = response.status === 400 ? new _errors.BadRequestError(message, this.source) : response.status === 401 ? new _errors.UnauthorizedError(message, this.source) : response.status === 403 ? new _errors.ForbiddenError(message, this.source) : response.status === 404 ? new _errors.NotFoundError(message, this.source) : response.status === 500 ? new _errors.InternalError(message, this.source) : response.status === 503 ? new _errors.ServiceUnavailableError(message, this.source) : new Error(message);
      throw error;
    }
  };
  async getJson(url, additionalHeaders = {}) {
    return this.fetch(url, {
      method: 'GET',
      headers: {
        accept: 'application/json',
        ...additionalHeaders
      }
    }).then(this.handleJsonResponse);
  }
  async getJsonWithoutHandlingResponse(url) {
    return this.fetch(url, {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    });
  }
  async postJsonString(url, body, additionalHeaders = {}) {
    return this.fetch(url, {
      method: 'POST',
      body,
      headers: {
        accept: 'application/json',
        'content-type': 'application/json',
        ...additionalHeaders
      }
    }).then(this.handleJsonResponse);
  }
  async postJson(url, body, additionalHeaders = {}) {
    return this.postJsonString(url, JSON.stringify(body), additionalHeaders);
  }
  async patchJsonString(url, body, additionalHeaders = {}) {
    return this.fetch(url, {
      method: 'PATCH',
      body,
      headers: {
        accept: 'application/json',
        'content-type': 'application/json',
        ...additionalHeaders
      }
    }).then(this.handleJsonResponse);
  }
  async patchJson(url, body, additionalHeaders = {}) {
    return this.patchJsonString(url, JSON.stringify(body), additionalHeaders);
  }
  async postJsonWithoutBody(url, additionalHeaders = {}) {
    return this.fetch(url, {
      method: 'POST',
      headers: {
        accept: 'application/json',
        ...additionalHeaders
      }
    }).then(this.handleJsonResponse);
  }
  async getJsonAsText(url) {
    return this.fetch(url, {
      headers: {
        accept: 'application/json'
      }
    }).then(this.verifyOkResponse);
  }
  async putJson(url, body, additionalHeaders = {}) {
    return this.putJsonString(url, JSON.stringify(body), additionalHeaders);
  }
  async putJsonString(url, body, additionalHeaders = {}) {
    return this.fetch(url, {
      method: 'PUT',
      body: body,
      headers: {
        accept: 'application/json',
        'content-type': 'application/json',
        ...additionalHeaders
      }
    }).then(this.handleJsonResponse);
  }
  async putBytes(url, body, additionalHeaders = {}) {
    return this.fetch(url, {
      method: 'PUT',
      body,
      headers: {
        'content-length': body.length.toString(),
        ...additionalHeaders
      }
    }).then(this.verifyOkResponse);
  }
}
exports.JsonHttpClient = JsonHttpClient;