"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerApiList = exports.getApiListAction = void 0;
var _path = _interopRequireDefault(require("path"));
var _promises = _interopRequireDefault(require("node:fs/promises"));
var _specLoaders = require("../../utils/spec-loaders");
var _logger = require("../../logger");
var _constants = require("../../constants");
var _chalk = _interopRequireDefault(require("chalk"));
var FsCandidates = _interopRequireWildcard(require("./get-file-candidates"));
var _segment = require("../../segment");
var _errorHandler = require("../../error-handler");
var _openapiIo = require("@useoptic/openapi-io");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const usage = () => `
  optic api list
  optic api list ./specs/`;
const registerApiList = (cli, config) => {
  cli.command('list').configureHelp({
    commandUsage: usage
  }).argument('[path_to_specs]', 'path to directory for spec list (defaults to the git root or current working directory)').description('List specs within a directory').action((0, _errorHandler.errorHandler)(getApiListAction(config), {
    command: 'api-list'
  }));
};
exports.registerApiList = registerApiList;
const getApiListAction = config => async (dir_path, options) => {
  let file;
  if (dir_path) {
    try {
      const isDir = (await _promises.default.lstat(dir_path)).isDirectory();
      file = {
        path: _path.default.resolve(dir_path),
        isDir
      };
    } catch (e) {
      _logger.logger.error(_chalk.default.red(`${_path.default} is not a file or directory`));
      process.exitCode = 1;
      return;
    }
  } else {
    file = {
      path: _path.default.resolve(config.root),
      isDir: true
    };
  }
  _logger.logger.info(_chalk.default.bold.gray(`Looking for OpenAPI specs in directory ${file.path}`));
  const files = !file.isDir ? [_path.default.resolve(file.path)] : await FsCandidates.getFileCandidates({
    startsWith: file.path
  });
  const candidates = new Map(files.map(f => [f, []]));
  let hasUntrackedApis = false;
  for await (const [file_path] of candidates) {
    const relativePath = _path.default.relative(process.cwd(), file_path);
    let spec;
    try {
      spec = await (0, _specLoaders.loadRaw)(file_path, config);
      // Checks that the document looks like an openapi document (i.e. has paths, etc )
      (0, _openapiIo.validateOpenApiV3Document)(spec, undefined, {
        strictOpenAPI: false
      });
    } catch (e) {
      continue;
    }
    if (spec[_constants.OPTIC_EMPTY_SPEC_KEY]) {
      continue;
    }
    const existingOpticUrl = spec[_constants.OPTIC_URL_KEY];
    if (!existingOpticUrl) {
      hasUntrackedApis = true;
    }
    _logger.logger.info(`${relativePath} ${!existingOpticUrl ? _chalk.default.red(` (untracked)`) : ''}`);
  }
  if (hasUntrackedApis) {
    _logger.logger.info('');
    _logger.logger.info(_chalk.default.blue.bold('Run optic api add to add untracked apis'));
  }
  await (0, _segment.flushEvents)();
};
exports.getApiListAction = getApiListAction;