"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initCommand = initCommand;
var _commander = require("commander");
var _init = require("./init");
var _logger = require("../../logger");
var _capture = require("../../utils/capture");
var _path = _interopRequireDefault(require("path"));
var _chalk = _interopRequireDefault(require("chalk"));
function initCommand(config) {
  const command = new _commander.Command('init');
  command.helpOption('-h, --help', 'Display help for the command');
  command.description('Add a `capture` block to your Optic.yml').argument('openapi-file', 'The OpenAPI specification to write the `capture` block for').option('--stdout', 'Print the capture config to stdout instead of writing to optic.yml', false).action(async specPath => {
    var _config$capture;
    const options = command.opts();
    const relativeOasFile = (0, _capture.resolveRelativePath)(config.root, specPath);
    let configPath = undefined;
    if ((_config$capture = config.capture) !== null && _config$capture !== void 0 && _config$capture[relativeOasFile] && !options.stdout) {
      _logger.logger.error(`optic.yml already contains a capture config for the file ${relativeOasFile}. This command would overwrite the existing configuration. Make changes manually, or view a sample capture configuration with: \`optic capture init optic.yml --stdout\``);
      process.exitCode = 1;
      return;
    }
    try {
      configPath = await (0, _init.initCaptureConfig)(relativeOasFile, options.stdout, config);
    } catch (err) {
      _logger.logger.error(err);
      process.exitCode = 1;
      return;
    }
    if (configPath) {
      _logger.logger.info(`${_chalk.default.green('âœ”')} Wrote capture config to ${_path.default.relative(process.cwd(), configPath)}`);
      _logger.logger.info(`Run ${_chalk.default.bold(`optic capture ${relativeOasFile} --update interactive`)}`);
    }
  });
  return command;
}