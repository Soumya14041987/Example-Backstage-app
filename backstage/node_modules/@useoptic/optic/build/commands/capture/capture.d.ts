import { Command } from 'commander';
import { CaptureConfigData, OpticCliConfig } from '../../config';
import { ParseResult } from '../../utils/spec-loaders';
import { ApiCoverageCounter } from './coverage/api-coverage';
import { GroupedCaptures } from './interactions/grouped-interactions';
export declare function registerCaptureCommand(cli: Command, config: OpticCliConfig): void;
type CaptureActionOptions = {
    proxyPort?: string;
    serverOverride?: string;
    postman?: string;
    har?: string;
    update?: 'documented' | 'interactive' | 'automatic';
    upload: boolean;
    verbose: boolean;
};
export declare function processCaptures({ captureConfig, cliConfig, captures, spec, filePath, }: {
    filePath: string;
    spec: Exclude<ParseResult, {
        version: '2.x.x';
    }>;
    captures: GroupedCaptures;
    captureConfig?: CaptureConfigData;
    cliConfig: OpticCliConfig;
}, options: Pick<CaptureActionOptions, 'update' | 'verbose'> & {
    bufferLogs: boolean;
}): Promise<{
    unmatchedInteractions: number;
    totalInteractions: number;
    coverage: ApiCoverageCounter;
    endpointsAdded: number;
    mismatchedEndpoints: number;
    endpointCounts: {
        total: number;
        unmatched: number;
        matched: number;
    };
    bufferedOutput: string[];
    hasAnyDiffs: boolean;
    success: true;
} | {
    success: false;
    bufferedOutput: string[];
}>;
export {};
//# sourceMappingURL=capture.d.ts.map