import { ErrorObject } from 'ajv';
import { Result } from 'ts-results';
import { JsonPath } from '@useoptic/openapi-io';
import { SchemaObject } from './schema';
import { Body } from './documented-bodies';
import { CapturedInteraction } from '../../../sources/captured-interactions';
export declare function diffBodyBySchema(body: Body, schema: SchemaObject, { specJsonPath, interaction, }: {
    specJsonPath: string;
    interaction: CapturedInteraction;
}): Result<IterableIterator<ShapeDiffResult | UnpatchableDiff>, SchemaCompilationError>;
export declare enum ShapeDiffResultKind {
    AdditionalProperty = "AdditionalProperty",
    MissingRequiredProperty = "MissingRequiredProperty",
    MissingEnumValue = "MissingEnumValue",
    UnmatchedType = "UnmatchedType"
}
export type ShapeDiffResult = {
    keyword: JsonSchemaKnownKeyword;
    key: string;
    example: any;
    instancePath: JsonPath;
    description: string;
} & ({
    kind: ShapeDiffResultKind.AdditionalProperty;
    keyword: JsonSchemaKnownKeyword.additionalProperties;
    propertyExamplePath: JsonPath;
    parentObjectPath: JsonPath;
    propertyPath: JsonPath;
} | {
    kind: ShapeDiffResultKind.MissingRequiredProperty;
    keyword: JsonSchemaKnownKeyword.required;
    parentObjectPath: JsonPath;
    propertyPath: JsonPath;
} | {
    kind: ShapeDiffResultKind.UnmatchedType;
    keyword: JsonSchemaKnownKeyword.type | JsonSchemaKnownKeyword.oneOf;
    expectedType: string;
    propertyPath: JsonPath;
} | {
    kind: ShapeDiffResultKind.MissingEnumValue;
    keyword: JsonSchemaKnownKeyword.enum;
    value: string;
    propertyPath: JsonPath;
});
export type UnpatchableDiff = {
    validationError: ErrorObject;
    path: string;
    bodyPath: string;
    schemaPath: string;
    example: any;
    unpatchable: true;
    interaction: CapturedInteraction;
};
export type { ErrorObject };
export declare class ShapeDiffTraverser {
    private validator;
    private validate?;
    private bodyValue?;
    private specJsonPath;
    private interaction;
    private schema?;
    constructor({ specJsonPath, interaction, }: {
        specJsonPath: string;
        interaction: CapturedInteraction;
    });
    traverse(bodyValue: any, schema: SchemaObject): Result<void, SchemaCompilationError>;
    results(): IterableIterator<ShapeDiffResult | UnpatchableDiff>;
}
export declare enum JsonSchemaKnownKeyword {
    required = "required",
    additionalProperties = "additionalProperties",
    unevaluatedProperties = "unevaluatedProperties",
    type = "type",
    oneOf = "oneOf",
    enum = "enum"
}
export declare class SchemaCompilationError extends Error {
    constructor(ajvError: Error);
}
//# sourceMappingURL=diff.d.ts.map