import { BodyLocation } from '@useoptic/openapi-utilities';
import { Option } from 'ts-results';
import { DocumentedInteraction } from '../../../../oas/operations';
import { CapturedBody } from '../../../sources/body';
import { ShapePatch } from './patches';
import { SchemaObject } from './schema';
import { CapturedInteraction } from '../../../sources/captured-interactions';
export interface Body {
    contentType?: string;
    value: any;
}
export type { BodyLocation };
export type ShapeLocation = BodyLocation | {
    inComponentSchema: {
        schemaName: string;
    };
};
export interface DocumentedBody {
    body: Option<Body>;
    bodySource?: CapturedBody;
    schema: SchemaObject | null;
    shapeLocation: ShapeLocation | null;
    specJsonPath: string;
    interaction: CapturedInteraction;
}
export declare class DocumentedBody {
    static applyShapePatch(body: DocumentedBody, patch: ShapePatch): DocumentedBody;
}
export interface DocumentedBodies extends AsyncIterable<DocumentedBody> {
}
export declare class DocumentedBodies {
    static fromDocumentedInteraction({ interaction, specJsonPath, operation, }: DocumentedInteraction): AsyncIterable<DocumentedBody>;
}
//# sourceMappingURL=documented-bodies.d.ts.map