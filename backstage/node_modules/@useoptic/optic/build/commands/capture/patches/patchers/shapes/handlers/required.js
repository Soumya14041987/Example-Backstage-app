"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requiredKeywordDiffs = requiredKeywordDiffs;
exports.requiredPatches = requiredPatches;
var _diff = require("../diff");
var _jsonPointerHelpers = require("@useoptic/json-pointer-helpers");
var _patchOperations = require("../../../patch-operations");
function* requiredKeywordDiffs(validationError, example) {
  if (validationError.keyword !== _diff.JsonSchemaKnownKeyword.required) return;
  const parentObjectPath = _jsonPointerHelpers.jsonPointerHelpers.pop(validationError.schemaPath.substring(1));
  const key = validationError.params.missingProperty;
  yield {
    description: `required property '${validationError.params.missingProperty}' was missing`,
    instancePath: _jsonPointerHelpers.jsonPointerHelpers.append(validationError.instancePath, validationError.params.missingProperty),
    propertyPath: _jsonPointerHelpers.jsonPointerHelpers.append(parentObjectPath, 'properties', key),
    kind: _diff.ShapeDiffResultKind.MissingRequiredProperty,
    keyword: _diff.JsonSchemaKnownKeyword.required,
    parentObjectPath,
    key,
    example: undefined
  };
}
function* requiredPatches(diff, schema, interaction, shapeContext, openAPIVersion) {
  if (diff.kind !== _diff.ShapeDiffResultKind.MissingRequiredProperty) return;
  const requiredPath = _jsonPointerHelpers.jsonPointerHelpers.append(diff.parentObjectPath, 'required');
  const requiredArray = _jsonPointerHelpers.jsonPointerHelpers.get(schema, requiredPath);
  function* makeOptionalOperations(indexOfRequired) {
    if (indexOfRequired > -1) yield {
      op: 'remove',
      path: _jsonPointerHelpers.jsonPointerHelpers.append(requiredPath, indexOfRequired.toString())
    };
  }
  function* removePropertyOperations(parentObjectPath, key) {
    const propertyPath = _jsonPointerHelpers.jsonPointerHelpers.append(parentObjectPath, 'properties', key);
    yield {
      op: 'remove',
      path: propertyPath
    };
  }
  // patch one: make required field optional
  let makeOptionalPatch = {
    impact: [_patchOperations.PatchImpact.Addition, !shapeContext.location ? _patchOperations.PatchImpact.BackwardsCompatibilityUnknown : 'inRequest' in shapeContext.location ? _patchOperations.PatchImpact.BackwardsCompatible : _patchOperations.PatchImpact.BackwardsIncompatible],
    diff,
    description: `make property ${diff.key} optional`,
    groupedOperations: [...makeOptionalOperations(requiredArray.indexOf(diff.key))],
    interaction,
    shouldRegeneratePatches: false
  };
  if (makeOptionalPatch.groupedOperations.length > 0) {
    yield makeOptionalPatch;
  }

  // patch two: remove property
  yield {
    description: `remove property ${diff.key}`,
    diff,
    impact: [!shapeContext.location ? _patchOperations.PatchImpact.BackwardsCompatibilityUnknown : 'inRequest' in shapeContext.location ? _patchOperations.PatchImpact.BackwardsCompatible : _patchOperations.PatchImpact.BackwardsIncompatible],
    groupedOperations: [...makeOptionalOperations(requiredArray.indexOf(diff.key)), ...removePropertyOperations(diff.parentObjectPath, diff.key)],
    shouldRegeneratePatches: false,
    interaction
  };
}