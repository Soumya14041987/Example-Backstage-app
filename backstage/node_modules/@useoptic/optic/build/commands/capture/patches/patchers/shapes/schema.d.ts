import { OpenAPIV3 } from '@useoptic/openapi-utilities';
import { PatchOperation } from '../../patch-operations';
import { SupportedOpenAPIVersions } from '@useoptic/openapi-io';
import { ShapePatch } from './patches';
export type SchemaObject = OpenAPIV3.SchemaObject;
export declare class Schema {
    static baseFromValue(value: any, openAPIVersion: SupportedOpenAPIVersions): SchemaObject;
    static clone(value: SchemaObject): SchemaObject;
    static equals(a: SchemaObject, b: SchemaObject): boolean;
    static merge(currentSchema: SchemaObject, newSchema: SchemaObject): SchemaObject;
    static mergeOperations(currentSchema: SchemaObject | null, newSchema: SchemaObject): IterableIterator<PatchOperation>;
    static applyShapePatch(schema: SchemaObject | null, patch: ShapePatch): SchemaObject;
    static isPolymorphic(schema: SchemaObject): boolean;
}
export declare const allowedMetaDataForAll: string[];
export declare const allowedKeysForOneOf: string[];
export declare const allowedKeysForObject: string[];
export declare const allowedKeysForArray: string[];
export declare const allowedKeysForString: string[];
export declare const allowedKeysForInteger: string[];
export declare const isExtension: (key: string) => boolean;
//# sourceMappingURL=schema.d.ts.map