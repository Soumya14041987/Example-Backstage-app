"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateRequestParameterPatches = generateRequestParameterPatches;
var _patches = require("./patches");
var _jsonPointerHelpers = require("@useoptic/json-pointer-helpers");
var _types = require("./types");
async function* generateRequestParameterPatches(interaction, operation) {
  const interactionParams = [...interaction.request.query.map(q => ({
    location: 'query',
    ...q
  }))
  // To learn about new headers, uncomment the line below. The reason we don't learn headers is because there are lots of headers that would be noisy / external to the API
  // We likely would want to specify an allowlist here that lets a user specify headers that they care about that we would look out for and filter for
  // ...interaction.request.headers.map((h) => ({ location: 'header', ...h })), // Turned off
  ];
  const hasAnyParam = interactionParams.length > 0;
  const specPath = _jsonPointerHelpers.jsonPointerHelpers.compile(['paths', operation.pathPattern, operation.method]);
  if (hasAnyParam) {
    if (!operation.parameters) {
      yield {
        description: 'add parameters array to operation',
        impact: [_patches.PatchImpact.Addition, _patches.PatchImpact.BackwardsCompatible],
        diff: {
          kind: _types.OperationDiffResultKind.MissingRequestParametersArray
        },
        path: specPath,
        groupedOperations: [{
          op: 'add',
          path: _jsonPointerHelpers.jsonPointerHelpers.append(specPath, 'parameters'),
          value: []
        }],
        interaction
      };
    }
    for (const {
      location,
      name
    } of interactionParams) {
      var _operation$parameters;
      const existingParam = (_operation$parameters = operation.parameters) === null || _operation$parameters === void 0 ? void 0 : _operation$parameters.find(p => !('$ref' in p) && p.in === location && p.name === name);
      if (!existingParam) {
        yield {
          description: `add ${name} ${location} parameter`,
          impact: [_patches.PatchImpact.Addition, _patches.PatchImpact.BackwardsCompatible],
          diff: {
            kind: _types.OperationDiffResultKind.UnmatchedRequestParameter,
            in: location,
            name
          },
          path: _jsonPointerHelpers.jsonPointerHelpers.append(specPath, 'parameters'),
          groupedOperations: [{
            op: 'add',
            path: _jsonPointerHelpers.jsonPointerHelpers.append(specPath, 'parameters', '-'),
            value: {
              schema: {
                type: 'string'
              },
              // we assume everything is a string
              in: location,
              name,
              required: true // we assume everything is required until we see something is not required
            }
          }],
          interaction
        };
      }
      // In the future we can check for parameter type and or format and generate schema diffs here
    }
  }
  const operationParams = operation.parameters ?? [];
  for (let i = 0; i < operationParams.length; i++) {
    const param = operationParams[i];
    if ('$ref' in param) continue;
    if (!(param.in === 'query' || param.in === 'header')) continue;
    if (!param.required) continue;
    const paramsToLookIn = param.in === 'query' ? interaction.request.query : interaction.request.headers;
    if (!paramsToLookIn.find(p => p.name !== param.name)) {
      const paramPath = _jsonPointerHelpers.jsonPointerHelpers.append(specPath, 'parameters', String(i));
      yield {
        description: `make ${param.name} ${param.in} parameter optional`,
        impact: [_patches.PatchImpact.BackwardsCompatible],
        diff: {
          kind: _types.OperationDiffResultKind.MissingRequiredRequiredParameter,
          in: param.in,
          name: param.name
        },
        path: paramPath,
        groupedOperations: [{
          op: 'replace',
          path: _jsonPointerHelpers.jsonPointerHelpers.append(paramPath, 'required'),
          value: false
        }],
        interaction
      };
    }
  }
}