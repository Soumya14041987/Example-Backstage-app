import { Operation as JsonOps } from 'fast-json-patch';
import { ParseResult } from '../../../utils/spec-loaders';
import { ApiCoverageCounter } from '../coverage/api-coverage';
import { SpecPatch, SpecPatches } from './patchers/spec/patches';
import { CapturedInteractions } from '../sources/captured-interactions';
import { UnpatchableDiff } from './patchers/shapes/diff';
export declare function generatePathAndMethodSpecPatches(specHolder: {
    spec: Exclude<ParseResult, {
        version: '2.x.x';
    }>['jsonLike'];
}, endpoint: {
    method: string;
    path: string;
}): AsyncGenerator<SpecPatch, void, unknown>;
export declare function generateEndpointSpecPatches(interactions: CapturedInteractions, specHolder: {
    spec: Exclude<ParseResult, {
        version: '2.x.x';
    }>['jsonLike'];
}, endpoint: {
    method: string;
    path: string;
}, opts?: {
    coverage?: ApiCoverageCounter;
    schemaAdditionsSet?: Set<string>;
}): AsyncIterable<SpecPatch | UnpatchableDiff>;
export declare function generateRefRefactorPatches(specHolder: {
    spec: Exclude<ParseResult, {
        version: '2.x.x';
    }>['jsonLike'];
}, meta: {
    schemaAdditionsSet: Set<string>;
    usedExistingRef: boolean;
}): AsyncGenerator<SpecPatch, void, unknown>;
export declare function jsonOpsFromSpecPatches(specPatches: SpecPatches): Promise<JsonOps[]>;
//# sourceMappingURL=patches.d.ts.map