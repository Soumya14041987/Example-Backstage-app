/// <reference types="node" />
import { Readable } from 'stream';
import { ErrorObject } from 'ajv';
import { ProxyInteractions } from '../../oas/captures/proxy';
import { Result } from 'ts-results';
export declare function getHarEntriesFromFs(harPath: string): AsyncGenerator<Result<HttpArchive.Entry, HarEntryValidationError>, void, undefined>;
export interface HarEntries extends AsyncIterable<HttpArchive.Entry> {
}
export interface TryHarEntries extends AsyncIterable<Result<HttpArchive.Entry, HarEntryValidationError>> {
}
export declare class HarEntries {
    static fromReadable(source: Readable): TryHarEntries;
    static fromProxyInteractions(interactions: ProxyInteractions): HarEntries;
    static toHarJSON(entries: HarEntries): Readable;
}
export declare class HarEntryValidationError extends Error {
    errors: ErrorObject[];
    constructor(invalidEntry: any, entryIndex: number, validationErrors: ErrorObject[]);
}
export declare namespace HttpArchive {
    interface Entry {
        request: Request;
        response: Response;
        cache: Cache;
        timings: Timings;
        startedDateTime: string;
        time: number;
        serverIPAddress?: string;
        connection?: string;
        comment?: string;
    }
    interface Request {
        method: string;
        url: string;
        httpVersion: string;
        cookies: Cookie[];
        headers: Header[];
        headersSize: number;
        queryString: QueryString[];
        postData?: PostData;
        bodySize: number;
        comment?: string;
    }
    interface Response {
        status: number;
        statusText: string;
        httpVersion: string;
        cookies: Cookie[];
        headers: Header[];
        content: Content;
        redirectURL: string;
        headersSize: number;
        bodySize: number;
        comment?: string;
    }
    interface Header {
        name: string;
        value: string;
        comment?: string;
    }
    interface QueryString {
        name: string;
        value: string;
        comment?: string;
    }
    interface PostData {
        mimeType: string;
        encoding?: string;
        params: Param[];
        text: string;
        comment?: string;
    }
    interface Content {
        size: number;
        compression?: number;
        mimeType: string;
        text?: string;
        encoding?: string;
        comment?: string;
    }
    interface Param {
    }
    interface Cache {
    }
    interface Timings {
        send: number;
        wait: number;
        receive: number;
    }
    interface Cookie {
    }
    interface Document {
    }
    interface Log {
    }
    interface Creator {
    }
    interface Browser {
    }
    interface Page {
    }
    interface PageTiming {
    }
}
//# sourceMappingURL=har.d.ts.map