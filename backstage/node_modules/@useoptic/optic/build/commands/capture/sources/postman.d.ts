/// <reference types="node" />
import { Readable } from 'stream';
import { Result } from 'ts-results';
import { Request, RequestBody, Response, VariableScope } from 'postman-collection';
export type ExtendedRequest = Request & {
    body?: RequestBody & {
        options?: {
            raw?: {
                language?: string;
            };
        };
    };
};
export type ExtendedResponse = Response & {
    contentInfo(): {
        contentType: string;
        mimeType: string;
        mimeFormat: string;
        charset: string;
        extension: string;
    };
};
export type ExtendedVariableScope = VariableScope & {
    replaceIn(template: string): string;
};
export type PostmanEntry = {
    request: ExtendedRequest;
    response?: ExtendedResponse;
    variableScope: ExtendedVariableScope;
};
export interface PostmanCollectionEntries extends AsyncIterable<PostmanEntry> {
}
export interface TryPostmanCollection extends AsyncIterable<Result<PostmanEntry, Error>> {
}
export declare class PostmanCollectionEntries {
    static fromReadable(source: Readable): TryPostmanCollection;
}
//# sourceMappingURL=postman.d.ts.map