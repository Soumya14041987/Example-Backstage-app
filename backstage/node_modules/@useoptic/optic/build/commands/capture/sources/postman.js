"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PostmanCollectionEntries = void 0;
var _tsResults = require("ts-results");
var _tsInvariant = _interopRequireDefault(require("ts-invariant"));
var _postmanCollection = require("postman-collection");
// Fix incorrect type definition

// Fix incorrect type definition

// Fix incorrect type definition

class PostmanCollectionEntries {
  // Note: The postman-collection SDK doesn't support async
  // data loading. The implementation of this function essentially
  // turns fromReadable into a synchronous iterable, but we maintain
  // the async interface.
  static async *fromReadable(source) {
    var _collectionDefinition;
    (0, _tsInvariant.default)(!source.readableObjectMode, 'Expecting raw bytes to parse Postman Collection entries');

    // Read to end as UTF-8 string
    let collectionSource = '';
    source.setEncoding('utf-8');
    for await (const chunk of source) {
      collectionSource += chunk;
    }

    // Ensure input can be parsed as JSON.
    let collectionDefinition = null;
    try {
      collectionDefinition = JSON.parse(collectionSource);
    } catch (err) {
      if (err instanceof SyntaxError) {
        throw new Error(`Source could not be read as Postman Collection: ${err.message}`);
      } else {
        throw err;
      }
    }

    // Only iterate if this collection is non-empty.
    if (!((_collectionDefinition = collectionDefinition) !== null && _collectionDefinition !== void 0 && _collectionDefinition.item)) {
      return;
    }
    const collection = new _postmanCollection.Collection(collectionDefinition);
    const variableScope = new _postmanCollection.VariableScope(collection.variables);

    // Recursively iterate through folders.
    const items = [];
    collection.forEachItem(item => items.push(item));

    // Yield valid PostmanEntry items.
    for (const item of items) {
      yield (0, _tsResults.Ok)({
        request: item.request,
        variableScope
      });
      for (const res of item.responses.all()) {
        const request = res.originalRequest;
        const response = res;
        if (request && response) yield (0, _tsResults.Ok)({
          request,
          response,
          variableScope
        });
      }
    }
  }
}
exports.PostmanCollectionEntries = PostmanCollectionEntries;