import * as mockttp from 'mockttp';
import { CompletedRequest, CompletedResponse, TimingEvents } from 'mockttp';
export interface ProxyInteractions extends AsyncIterable<ProxySource.Interaction> {
}
export declare namespace ProxySource {
    interface Interaction {
        request: Request;
        response: Response;
    }
    interface Request extends Omit<CompletedRequest, 'matchedRuleId' | 'remoteIpAddress' | 'remotePort' | 'tags' | 'body'> {
        timingEvents: TimingEvents;
        body: Body;
    }
    interface Response extends Omit<CompletedResponse, 'tags' | 'body'> {
        timingEvents: TimingEvents;
        body: Body;
    }
    type Body = Pick<mockttp.CompletedBody, 'buffer'>;
}
export declare class ProxyServer {
    private interactionSubject?;
    private url;
    private capturingProxy?;
    constructor(target: string);
    start(port: number | undefined): Promise<[ProxyInteractions, string]>;
    stop(): void;
}
//# sourceMappingURL=proxy.d.ts.map