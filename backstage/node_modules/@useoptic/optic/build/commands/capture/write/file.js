"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writePatchesToFiles = writePatchesToFiles;
var Sentry = _interopRequireWildcard(require("@sentry/node"));
var _promises = _interopRequireDefault(require("node:fs/promises"));
var _openapiUtilities = require("@useoptic/openapi-utilities");
var _openapiIo = require("@useoptic/openapi-io");
var _fastJsonPatch = _interopRequireDefault(require("fast-json-patch"));
var _logger = require("../../../logger");
var _chalk = _interopRequireDefault(require("chalk"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function writePatchesToFiles(jsonPatches, sourcemap) {
  const sourcemapQueries = (0, _openapiUtilities.sourcemapReader)(sourcemap);
  const operationsByFile = {};
  for (const patch of jsonPatches) {
    const result = sourcemapQueries.findFilePosition(patch.path);
    const {
      filePath,
      startsAt
    } = result;
    const adjustedPatch = {
      ...patch,
      path: startsAt
    };
    if (!operationsByFile[filePath]) operationsByFile[filePath] = [];
    operationsByFile[filePath].push(adjustedPatch);
  }

  // Then apply the patches and write files to disk
  for (let [filePath, operations] of Object.entries(operationsByFile)) {
    const file = sourcemap.files.find(({
      path
    }) => path === filePath);
    let stringified;
    try {
      if ((0, _openapiIo.isYaml)(filePath)) {
        stringified = (0, _openapiIo.applyOperationsToYamlString)(file.contents, operations);
      } else {
        const parsed = file.contents ? JSON.parse(file.contents) : {};
        const patchedContents = _fastJsonPatch.default.applyPatch(parsed || {}, operations).newDocument;
        stringified = JSON.stringify(patchedContents, null, 2);
      }
    } catch (e) {
      _logger.logger.error('');
      _logger.logger.error(_chalk.default.red.bold(`Error: Failed writing patches to ${filePath}`));
      _logger.logger.debug({
        location: 'patch files',
        error: e,
        operations: JSON.stringify(operations),
        parsed: file.contents
      });
      Sentry.captureException(e, {
        extra: {
          operations,
          parsed: file.contents
        }
      });
      throw new _openapiUtilities.UserError();
    }
    await _promises.default.writeFile(filePath, stringified);
  }
}