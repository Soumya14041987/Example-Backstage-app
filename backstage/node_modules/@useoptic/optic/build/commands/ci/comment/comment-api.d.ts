import { JsonHttpClient } from '../../../client/JsonHttpClient';
export interface CommentApi {
    getComment: (commentIdentifier: string) => Promise<{
        id: string;
        body: string;
    } | null>;
    updateComment: (commentId: string, body: string) => Promise<void>;
    createComment: (body: string) => Promise<void>;
}
export declare class GithubCommenter implements CommentApi {
    private options;
    private octokit;
    constructor(options: {
        token: string;
        owner: string;
        repo: string;
        pullRequest: string;
        sha: string;
        enterpriseBaseUrl?: string;
    });
    getComment(commentIdentifier: string): Promise<{
        id: string;
        body: string;
    } | null>;
    updateComment(commentId: string, body: string): Promise<void>;
    createComment(body: string): Promise<void>;
}
export declare class GitlabCommenter extends JsonHttpClient implements CommentApi {
    private options;
    private baseUrl;
    constructor(options: {
        token: string;
        projectId: string;
        mergeRequestId: string;
        sha: string;
        enterpriseBaseUrl?: string;
    });
    getComment(commentIdentifier: string): Promise<{
        id: string;
        body: string;
    } | null>;
    updateComment(commentId: string, body: string): Promise<void>;
    createComment(body: string): Promise<void>;
}
//# sourceMappingURL=comment-api.d.ts.map