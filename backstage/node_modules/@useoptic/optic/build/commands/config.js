"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerConfigCommand = void 0;
var _config = require("../config");
var yaml = _interopRequireWildcard(require("yaml"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const registerConfigCommand = (cli, cliConfig) => {
  const config = cli.command('config');
  config.helpOption('-h, --help', 'Display help for the command').addHelpCommand(false).configureHelp({
    commandUsage: () => `\n  optic config <command>`
  }).description('Commands to manage the Optic configuration');
  config.command('show').description('Display the rendered Optic configuration from optic.yml').configureHelp({
    commandUsage: () => `\n  optic config show`
  }).action(async () => {
    if (cliConfig.configPath) {
      console.log(
      // rendering the template a second time isn't awesome (it first happens when the CLI is initialized), but an OpticCliConfig contains more than just whats in optic.yml and doesn't have a simple way to convert to yaml anyway.
      yaml.stringify(await (0, _config.RenderTemplate)(cliConfig.configPath), null, 2));
    } else {
      console.log('no config was found');
    }
  });
};
exports.registerConfigCommand = registerConfigCommand;