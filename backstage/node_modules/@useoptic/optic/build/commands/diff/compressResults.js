"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compressDataV2 = void 0;
var _nodeZlib = _interopRequireDefault(require("node:zlib"));
var _openapiUtilities = require("@useoptic/openapi-utilities");
var _openapiTraverser = require("@useoptic/openapi-utilities/build/openapi3/implementations/openapi3/openapi-traverser");
// We can remove the components from spec since the changelog is flattened, and any valid refs will
// already be added into endpoints they're used in
const removeComponentsFromSpec = spec => {
  const {
    components,
    definitions,
    ...componentlessSpec
  } = spec;
  return componentlessSpec;
};
const removeUnusedEndpoints = (spec, changelogData) => {
  const {
    paths,
    ...specWithoutPaths
  } = spec;
  const newPaths = {};
  for (const [pathPattern, methodObj] of Object.entries(paths ?? {})) {
    newPaths[pathPattern] = {};
    for (const method of Object.values(_openapiUtilities.OpenAPIV3.HttpMethods)) {
      const normalized = (0, _openapiTraverser.normalizeOpenApiPath)(pathPattern);
      const operation = methodObj === null || methodObj === void 0 ? void 0 : methodObj[method];
      const hasChangelogDataForEndpoint = ((0, _openapiUtilities.getEndpointId)({
        method,
        path: normalized
      }) in changelogData.endpoints);
      if (operation && hasChangelogDataForEndpoint) {
        newPaths[pathPattern][method] = operation;
      }
    }
  }
  return {
    ...specWithoutPaths,
    paths: newPaths
  };
};
const compressDataV2 = (baseFile, headFile, specResults, meta, changelogData) => {
  const dataToCompress = {
    base: removeUnusedEndpoints(removeComponentsFromSpec(baseFile.jsonLike), changelogData),
    head: removeUnusedEndpoints(removeComponentsFromSpec(headFile.jsonLike), changelogData),
    results: {
      ...specResults,
      results: specResults.results.filter(r => !r.passed)
    },
    meta,
    version: '2'
  };
  const compressed = _nodeZlib.default.brotliCompressSync(Buffer.from(JSON.stringify(dataToCompress)));
  const urlSafeString = Buffer.from(compressed).toString('base64');
  return urlSafeString;
};
exports.compressDataV2 = compressDataV2;