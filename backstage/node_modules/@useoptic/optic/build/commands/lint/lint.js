"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerLint = void 0;
var _commander = require("commander");
var _path = _interopRequireDefault(require("path"));
var _compute = require("../diff/compute");
var _specLoaders = require("../../utils/spec-loaders");
var _errorHandler = require("../../error-handler");
var _logger = require("../../logger");
var _openapiUtilities = require("@useoptic/openapi-utilities");
var _chalk = _interopRequireDefault(require("chalk"));
var _diffRenderer = require("../../utils/diff-renderer");
var _compressResults = require("../diff/compressResults");
var _segment = require("../../segment");
var _openUrl = require("../../utils/open-url");
const description = `lints and validates an OpenAPI file`;
const usage = () => `
  optic lint ./spec.yml
  optic lint main:spec.yml`;
const registerLint = (cli, config) => {
  cli.command('lint', {
    hidden: true
  }).configureHelp({
    commandUsage: usage
  }).addOption(new _commander.Option('--severity <severity>', 'specify the severity level to exit with exit code, options are error, warn and info').choices(['error', 'warn', 'info']).default('error')).option('--web', 'view the lint results in the optic web view', false).description(description).argument('<file_path>', 'path to file to lint').action((0, _errorHandler.errorHandler)(getLintAction(config), {
    command: 'lint'
  }));
};
exports.registerLint = registerLint;
const getLintAction = config => async (path, options) => {
  _logger.logger.info(`Linting spec ${path}...`);
  let file;
  try {
    file = await (0, _specLoaders.loadSpec)(path, config, {
      strict: true,
      denormalize: true
    });
  } catch (e) {
    _logger.logger.error(e instanceof Error ? e.message : e);
    process.exitCode = 1;
    return;
  }
  const {
    changelogData,
    specResults,
    checks
  } = await (0, _compute.compute)([file, file], config, {
    check: true,
    path
  });
  _logger.logger.info(_chalk.default.green.bold('✔ OpenAPI is valid'));
  if (checks.total > 0) {
    _logger.logger.info('');
    _logger.logger.info('Running Optic Checks');
    _logger.logger.info('');
    for (const log of (0, _diffRenderer.generateComparisonLogsV2)(changelogData, {
      from: file.sourcemap,
      to: file.sourcemap
    }, specResults, {
      output: 'pretty',
      verbose: false,
      severity: (0, _openapiUtilities.textToSev)(options.severity)
    })) {
      _logger.logger.info(log);
    }
    _logger.logger.info('');
    const failures = checks.failed;
    const failuresForSeverity = options.severity === 'error' ? failures.error : options.severity === 'warn' ? failures.warn + failures.error : failures.warn + failures.error + failures.info;
    if (options.web) {
      const analyticsData = {
        isInCi: config.isInCi
      };
      const meta = {
        createdAt: new Date(),
        command: ['optic', ...process.argv.slice(2)].join(' '),
        file1: path
      };
      const compressedData = (0, _compressResults.compressDataV2)(file, file, specResults, meta, changelogData);
      analyticsData.compressedDataLength = compressedData.length;
      _logger.logger.info('Opening up lint results in web view');
      (0, _segment.trackEvent)('optic.lint.view_web', analyticsData);
      await (0, _segment.flushEvents)();
      const baseHtml = _path.default.resolve(__dirname, '../../../web/build/index.html');
      await (0, _openUrl.openUrl)(`${baseHtml}#${compressedData}`);
    }
    if (failuresForSeverity > 0) {
      _logger.logger.info(_chalk.default.red.bold('x Check failures detected with your OpenAPI spec.'));
      process.exitCode = 1;
    } else {
      _logger.logger.info(_chalk.default.green.bold('✔ Checks passed.'));
    }
  }
};