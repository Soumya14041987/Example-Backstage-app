"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearCommand = clearCommand;
var _commander = require("commander");
var _path = _interopRequireDefault(require("path"));
var fs = _interopRequireWildcard(require("fs-extra"));
var _captureStorage = require("./captures/capture-storage");
var _feedback = require("./reporters/feedback");
var _os = _interopRequireDefault(require("os"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const tmpDirectory = _os.default.tmpdir();
function clearCommand() {
  const command = new _commander.Command('clear');
  const feedback = (0, _feedback.createCommandFeedback)(command);
  command.description('Clear captures for an OpenAPI spec').helpOption('-h, --help', 'Display help for the command').argument('[openapi-file]', 'The OpenAPI spec to clear').option('--all', 'Clear all captured traffic').action(async specPath => {
    const options = command.opts();
    if (options.all) {
      const allCaptures = _path.default.join(tmpDirectory, 'optic', 'captures');
      await fs.remove(allCaptures);
      feedback.success('Cleared all captures ' + allCaptures);
    }
    if (specPath) {
      const absoluteSpecPath = _path.default.resolve(specPath);
      const {
        trafficDirectory,
        openApiExists
      } = await (0, _captureStorage.captureStorage)(specPath);
      if (!openApiExists) {
        return await feedback.inputError('OpenAPI specification file could not be found', _feedback.InputErrors.SPEC_FILE_NOT_FOUND);
      }
      await fs.remove(trafficDirectory);
      feedback.success('Cleared capture folder for ' + _path.default.relative(process.cwd(), absoluteSpecPath));
    }
  });
  return command;
}