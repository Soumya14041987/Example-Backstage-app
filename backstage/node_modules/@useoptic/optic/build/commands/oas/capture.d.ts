/// <reference types="node" />
import { Command } from 'commander';
import { Writable } from 'stream';
import { OpticCliConfig } from '../../config';
import { HarEntries } from '../capture/sources/har';
export declare function captureV1(filePath: string, targetUrl: string, config: OpticCliConfig, command: Command): Promise<void>;
export declare function captureCommand(config: OpticCliConfig): Promise<Command>;
export declare function writeInteractions(harEntries: HarEntries, destination: Writable & {
    fd?: number;
}): CaptureObservations;
export declare enum CaptureObservationKind {
    InteractionCaptured = "interaction-captured",
    CaptureWritten = "capture-written"
}
export type CaptureObservation = {
    kind: CaptureObservationKind;
} & ({
    kind: CaptureObservationKind.InteractionCaptured;
    path: string;
    method: string;
} | {
    kind: CaptureObservationKind.CaptureWritten;
});
export interface CaptureObservations extends AsyncIterable<CaptureObservation> {
}
//# sourceMappingURL=capture.d.ts.map