"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SystemProxy = void 0;
exports.chooseInterfaceMac = chooseInterfaceMac;
var _url = _interopRequireDefault(require("url"));
var _shellUtils = require("../lib/shell-utils");
var _macSystemProxy = require("./mac-system-proxy");
class SystemProxy {
  constructor(proxyUrl, feedback) {
    this.proxyUrl = proxyUrl;
    this.feedback = feedback;
  }
  stopCommand = undefined;
  async start(device) {
    const {
      port
    } = _url.default.parse(this.proxyUrl);
    if (_shellUtils.platform === 'mac') {
      const name = await chooseInterfaceMac();
      const previousState = await Promise.all([(0, _shellUtils.runCommand)(`networksetup -getwebproxy "${name}"`).then(_macSystemProxy.parseMacNetworkLine), (0, _shellUtils.runCommand)(`networksetup -getsecurewebproxy "${name}"`).then(_macSystemProxy.parseMacNetworkLine), (0, _shellUtils.runCommand)(`networksetup -getproxybypassdomains "${name}"`).then(result => result.trim())]);
      if (previousState[0].enabled || previousState[1].enabled) {
        this.feedback.notable(`Your computer already has a system proxy configured. Optic will not overwrite those settings. `);
        this.feedback.notable(`The Optic proxy is on ${this.proxyUrl}. Route traffic through that proxy to record it`);
        this.stopCommand = async () => {};
        return;
      }
      await Promise.all([(0, _shellUtils.runCommand)(`networksetup -setwebproxy "${name}" 127.0.0.1 ${port}`), (0, _shellUtils.runCommand)(`networksetup -setsecurewebproxy "${name}" 127.0.0.1 ${port}`), (0, _shellUtils.runCommand)(`networksetup -setproxybypassdomains "${name}" "<-loopback>"`)]);
      this.feedback.notable(`Proxy running on ${this.proxyUrl}. System proxy updated`);
      this.stopCommand = async () => {
        await Promise.all([(0, _shellUtils.runCommand)(`networksetup -setwebproxystate "${name}" off`), (0, _shellUtils.runCommand)(`networksetup -setsecurewebproxystate "${name}" off`)]);
        this.feedback.notable(`Mac System Proxy settings cleared`);
      };
    } else {
      this.feedback.notable(`Proxy running on ${this.proxyUrl}. System proxy updated`);
      console.log(`automatic proxy configuration is not supported on ${_shellUtils.platform}`);
    }
  }
  async stop() {
    if (this.stopCommand) await this.stopCommand();
  }
}
exports.SystemProxy = SystemProxy;
async function chooseInterfaceMac() {
  const network = await (0, _shellUtils.runCommand)('scutil --nwi');
  const device = new RegExp(/Network interfaces: (en[0-9])/);
  const result = network.match(device);
  let devicePreference = result ? result[1] : 'en0';
  const hardware = await (0, _shellUtils.runCommand)('networksetup -listallhardwareports');
  const regex = new RegExp(/(Hardware Port: (.*)\nDevice: (.*)\n)/);
  let name = undefined;
  hardware.split(/\n\s*\n/).forEach(entry => {
    if (name) return;
    const match = regex.exec(entry);
    if (match && match[3] === devicePreference) {
      name = match[2];
    }
  });
  return name || 'Wi-Fi';
}