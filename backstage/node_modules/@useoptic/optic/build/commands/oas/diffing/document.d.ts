import { Result } from 'ts-results';
import { HttpMethod } from '../operations';
import { FlatOpenAPIV3, FlatOpenAPIV3_1, OpenAPIV3 } from '@useoptic/openapi-utilities';
import { SpecFilesAsync, SpecFilesSourcemap } from '../specs';
import { ApiCoverageCounter } from '../../capture/coverage/api-coverage';
import { CapturedInteractions } from '../../capture/sources/captured-interactions';
import { SpecPatches } from '../../capture/patches/patchers/spec/patches';
export interface ParsedOperation {
    methods: HttpMethod[];
    pathPattern: string;
}
export declare function parseAddOperations(input: string[]): Result<ParsedOperation[], string>;
export declare function addIfUndocumented(operationsToAdd: ParsedOperation[], isAddAll: boolean, statusObservations: StatusObservations, interactions: CapturedInteractions, spec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document, sourcemap: SpecFilesSourcemap): Promise<Result<RecentlyDocumented, string>>;
export declare function observationToUndocumented(observations: StatusObservations, operations: {
    pathPattern: string;
    methods: string[];
}[]): Promise<{
    methods: OpenAPIV3.HttpMethods[];
    pathPattern: string;
    examplePath: string;
}[]>;
export declare function matchInteractions(spec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document, interactions: CapturedInteractions, coverage?: ApiCoverageCounter): {
    observations: StatusObservations;
    coverage: ApiCoverageCounter;
};
export declare enum StatusObservationKind {
    InteractionCaptured = "interaction-captured",
    InteractionMatchedOperation = "interaction-matched-operation",
    InteractionUnmatchedMethod = "interaction-unmatched-method",
    InteractionUnmatchedPath = "interaction-unmatched-path"
}
export type StatusObservation = {
    kind: StatusObservationKind;
} & ({
    kind: StatusObservationKind.InteractionCaptured;
    path: string;
    method: string;
} | {
    kind: StatusObservationKind.InteractionMatchedOperation;
    capturedPath: string;
    path: string;
    method: string;
} | {
    kind: StatusObservationKind.InteractionUnmatchedMethod;
    path: string;
    method: string;
} | {
    kind: StatusObservationKind.InteractionUnmatchedPath;
    path: string;
    method: string;
});
export interface StatusObservations extends AsyncIterable<StatusObservation> {
}
export declare function addOperations(spec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document, requiredOperations: ParsedOperation[], interactions: CapturedInteractions): {
    results: SpecPatches;
    observations: AsyncIterable<AddObservation>;
};
export declare function updateSpecFiles(updatePatches: SpecPatches, sourcemap: SpecFilesSourcemap): {
    results: SpecFilesAsync;
    observations: AddObservations;
};
export declare enum AddObservationKind {
    UnmatchedPath = "unmatched-path",
    UnmatchedMethod = "unmatched-method",
    NewOperation = "new-operation",
    SpecFileUpdated = "spec-file-updated",
    RequiredOperations = "required-operations",
    InteractionBodyMatched = "interaction-body-matched",
    InteractionCaptured = "interaction-captured",
    InteractionMatchedOperation = "interaction-matched-operation",
    InteractionPatchGenerated = "interaction-patch-generated"
}
export type AddObservation = {
    kind: AddObservationKind;
} & ({
    kind: AddObservationKind.UnmatchedPath;
    requiredPath: string;
} | {
    kind: AddObservationKind.UnmatchedMethod;
    matchedPathPattern: string;
    requiredMethod: string;
} | {
    kind: AddObservationKind.NewOperation;
    pathPattern: string;
    method: HttpMethod;
} | {
    kind: AddObservationKind.SpecFileUpdated;
    path: string;
    overwrittenComments: boolean;
} | {
    kind: AddObservationKind.RequiredOperations;
    operations: ParsedOperation[];
} | {
    kind: AddObservationKind.InteractionBodyMatched;
    capturedPath: string;
    pathPattern: string;
    method: string;
    capturedContentType: string | null;
    decodable: boolean;
} | {
    kind: AddObservationKind.InteractionCaptured;
    path: string;
    method: string;
} | {
    kind: AddObservationKind.InteractionMatchedOperation;
    capturedPath: string;
    pathPattern: string;
    method: string;
} | {
    kind: AddObservationKind.InteractionPatchGenerated;
    capturedPath: string;
    pathPattern: string;
    method: string;
    description: string;
});
export interface AddObservations extends AsyncIterable<AddObservation> {
}
type RecentlyDocumented = {
    method: string;
    pathPattern: string;
    jsonPointer: string;
}[];
export {};
//# sourceMappingURL=document.d.ts.map