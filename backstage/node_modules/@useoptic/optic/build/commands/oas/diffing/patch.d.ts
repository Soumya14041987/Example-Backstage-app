import { SpecFilesAsync, SpecFilesSourcemap } from '../specs';
import { JsonSchemaSourcemap } from '@useoptic/openapi-io';
import { FlatOpenAPIV3, FlatOpenAPIV3_1 } from '@useoptic/openapi-utilities';
import { ApiCoverageCounter } from '../../capture/coverage/api-coverage';
import { ParsedOperation } from './document';
import { CapturedInteractions } from '../../capture/sources/captured-interactions';
import { SpecPatches } from '../../capture/patches/patchers/spec/patches';
export declare function patchOperationsAsNeeded(patchInteractions: CapturedInteractions, spec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document, sourcemap: JsonSchemaSourcemap, isAddAll?: boolean, filterToOperations?: ParsedOperation[]): Promise<{
    interactions: number;
    patched: number;
    fileUpdates: number;
}>;
export declare function renderDiffs(specPath: string, sourcemap: JsonSchemaSourcemap, spec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document, patches: SpecPatches, coverage: ApiCoverageCounter): Promise<{
    totalDiffCount: number;
    undocumentedBody: number;
    shapeDiff: number;
}>;
export declare function updateByInteractions(spec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document, interactions: CapturedInteractions, isAddAll?: boolean, filterToOperations?: ParsedOperation[]): {
    results: SpecPatches;
    observations: UpdateObservations;
};
export declare function updateSpecFiles(updatePatches: SpecPatches, sourcemap: SpecFilesSourcemap): {
    results: SpecFilesAsync;
    observations: UpdateObservations;
};
export declare enum UpdateObservationKind {
    InteractionBodyMatched = "interaction-body-matched",
    InteractionCaptured = "interaction-captured",
    InteractionMatchedOperation = "interaction-matched-operation",
    InteractionPatchGenerated = "interaction-patch-generated",
    SpecFileUpdated = "spec-file-updated"
}
export type UpdateObservation = {
    kind: UpdateObservationKind;
} & ({
    kind: UpdateObservationKind.InteractionBodyMatched;
    capturedPath: string;
    pathPattern: string;
    method: string;
    capturedContentType: string | null;
    decodable: boolean;
} | {
    kind: UpdateObservationKind.InteractionMatchedOperation;
    capturedPath: string;
    pathPattern: string;
    method: string;
} | {
    kind: UpdateObservationKind.InteractionPatchGenerated;
    capturedPath: string;
    pathPattern: string;
    method: string;
    description: string;
} | {
    kind: UpdateObservationKind.InteractionCaptured;
    path: string;
    method: string;
} | {
    kind: UpdateObservationKind.SpecFileUpdated;
    path: string;
    overwrittenComments: boolean;
});
export interface UpdateObservations extends AsyncIterable<UpdateObservation> {
}
export declare function renderUpdateStats(updateObservations: UpdateObservations): Promise<{
    interactions: number;
    patched: number;
    fileUpdates: number;
}>;
//# sourceMappingURL=patch.d.ts.map