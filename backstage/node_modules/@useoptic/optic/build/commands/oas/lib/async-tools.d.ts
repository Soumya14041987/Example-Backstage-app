export * from 'axax/esnext';
import { Result } from 'ts-results';
export declare function forkable<T>(iterable: AsyncIterable<T>): {
    fork: () => AsyncIterable<T>;
    start: () => void;
};
export declare function tap<T>(predicate: (subject: T) => void): (source: AsyncIterable<T>) => AsyncIterable<T>;
export declare function concat<T>(...iters: AsyncIterable<T>[]): AsyncIterable<T>;
export declare function collect<T>(source: AsyncIterable<T>): Promise<T[]>;
export declare function unwrap<T, E>(source: AsyncIterable<Result<T, E>>): AsyncIterable<T>;
export declare function unwrapOr<T, E>(source: AsyncIterable<Result<T, E>>, handler: (error: E) => void | Promise<void>): AsyncIterable<T>;
//# sourceMappingURL=async-tools.d.ts.map