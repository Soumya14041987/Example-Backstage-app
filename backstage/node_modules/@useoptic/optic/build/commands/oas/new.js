"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newCommand = newCommand;
var _commander = require("commander");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _semver = _interopRequireDefault(require("semver"));
var _openapiIo = require("@useoptic/openapi-io");
var _segment = require("../../segment");
var _feedback = require("./reporters/feedback");
var _logger = require("../../logger");
var _specs = require("../../utils/specs");
const defaultOpenAPIVersion = '3.1.0';
async function newCommand() {
  const command = new _commander.Command('new');
  const feedback = (0, _feedback.createCommandFeedback)(command);
  command.description('create a new OpenAPI spec file').argument('<file-path>', 'path of the new OpenAPI file to create').option('--oas-version <version-number>', 'OpenAPI version number to be used', defaultOpenAPIVersion).action(async filePath => {
    if (await _fsExtra.default.pathExists(filePath)) {
      return await feedback.inputError(`File already exists at ${filePath}`, _feedback.InputErrors.DESTINATION_FILE_ALREADY_EXISTS);
    }
    if (!(0, _openapiIo.isJson)(filePath) && !(0, _openapiIo.isYaml)(filePath)) {
      return await feedback.inputError(`to create a new spec file by filename, either a .yml, .yaml or .json extension is required`, 'spec-file-extension-unsupported');
    }
    const options = command.opts();
    let oasVersion;
    if (options.oasVersion) {
      let semver = _semver.default.coerce(options.oasVersion); // be liberal with the inputs we accept
      if (!semver || !_semver.default.valid(semver)) {
        return await feedback.inputError(`--oas-version must be a valid OpenAPI version`, 'oas-version-uninterpretable', {
          suppliedVersion: options.oasVersion
        });
      } else if (!_semver.default.satisfies(semver, '3.0.x || 3.1.x')) {
        return await feedback.inputError(`currently only OpenAPI v3.0.x and v3.1.x spec files can be created`, 'oas-version-unsupported', {
          suppliedVersion: semver.version
        });
      } else {
        oasVersion = semver.version;
      }
    } else {
      oasVersion = defaultOpenAPIVersion;
    }
    const specFile = (0, _specs.createNewSpecFile)(oasVersion);
    if ((0, _openapiIo.isJson)(filePath)) {
      _logger.logger.info(`Initializing OpenAPI file at ${filePath}`);
      await _fsExtra.default.writeFile(filePath, JSON.stringify(specFile, null, 2));
    } else if ((0, _openapiIo.isYaml)(filePath)) {
      _logger.logger.info(`Initializing OpenAPI file at ${filePath}`);
      await _fsExtra.default.writeFile(filePath, (0, _openapiIo.writeYaml)(specFile));
    } else {
      return await feedback.inputError('OpenAPI file not found', _feedback.InputErrors.SPEC_FILE_NOT_FOUND);
    }
    await trackStats({
      oasVersion
    });
    feedback.success(`New spec file created at ${filePath}`);
  });
  return command;
}
async function trackStats({
  oasVersion
}) {
  (0, _segment.trackEvent)('openapi_cli.new.completed', {
    oasVersion
  });
  try {
    await (0, _segment.flushEvents)();
  } catch (err) {
    console.warn('Could not flush usage analytics (non-critical)');
  }
}