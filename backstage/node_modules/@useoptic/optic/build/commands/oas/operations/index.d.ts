import { OpenAPIV3 } from '../specs';
import { CapturedInteraction } from '../../capture/sources/captured-interactions';
export { DocumentedInteractions } from './streams/documented-interactions';
export { UndocumentedOperations } from './streams/undocumented';
export interface Operation extends OpenAPIV3.OperationObject {
    pathPattern: string;
    method: string;
    requestBody?: OpenAPIV3.RequestBodyObject;
    responses: {
        [code: string]: OpenAPIV3.ResponseObject;
    };
}
export declare class Operation {
    static fromOperationObject(pathPattern: string, method: string, operation: OpenAPIV3.OperationObject): Operation;
    static isHttpMethod(method: string): method is OpenAPIV3.HttpMethods;
}
export declare enum UndocumentedOperationType {
    MissingMethod = "missing-method",
    MissingPath = "missing-path",
    MissingPathParameter = "missing-path-parameter"
}
export type UndocumentedOperation = {
    type: UndocumentedOperationType;
    pathPattern: string;
} & ({
    type: UndocumentedOperationType.MissingMethod;
    specPath: string;
    method: OpenAPIV3.HttpMethods;
} | {
    type: UndocumentedOperationType.MissingPath;
    specPath: string;
    methods: OpenAPIV3.HttpMethods[];
    pathParameters: string[];
} | {
    type: UndocumentedOperationType.MissingPathParameter;
    parameters: OpenAPIV3.ParameterObject[] | null;
    specPath: string;
    parameterName: string;
});
export declare enum PathComponentKind {
    Literal = "literal",
    Template = "template"
}
export interface PathComponent {
    kind: PathComponentKind;
    name: string;
}
export declare class PathComponent {
    static isTemplate(component: PathComponent): component is PathComponent & {
        kind: PathComponentKind.Template;
    };
}
export interface PathComponents extends Array<PathComponent> {
}
export declare class PathComponents {
    static fromPath(path: string): PathComponents;
}
export interface DocumentedInteraction {
    interaction: CapturedInteraction;
    operation: Operation;
    specJsonPath: string;
}
declare const HttpMethods: typeof OpenAPIV3.HttpMethods;
export { HttpMethods };
export type HttpMethod = OpenAPIV3.HttpMethods;
export declare function findResponse({ responses }: Pick<Operation, 'responses'>, statusCode: string): [OpenAPIV3.ResponseObject, string] | null;
export declare function findBody(bodyObject: {
    content?: {
        [media: string]: OpenAPIV3.MediaTypeObject;
    };
}, contentType?: string | null): [OpenAPIV3.MediaTypeObject, string] | null;
export declare const statusRangePattern: RegExp;
//# sourceMappingURL=index.d.ts.map