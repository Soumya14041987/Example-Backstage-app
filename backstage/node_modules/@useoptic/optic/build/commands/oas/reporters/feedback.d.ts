/// <reference types="node" />
import { Command } from 'commander';
import { Writable } from 'stream';
export declare function createCommandFeedback(command: Command, options?: {
    destination?: Writable;
}): {
    inputError: (message: string, name: string, eventProperties?: {
        [key: string]: any;
    }, errCode?: number) => Promise<void>;
    internal: (message: string, exit?: boolean, errCode?: number) => void;
    commandInstruction: (command: string, action: string) => void;
    instruction: (message: string, errCode?: number) => void;
    notable: (message: string) => void;
    log: (message: string) => boolean;
    logChild: (child: string, message: string) => boolean;
    title: (title: string) => boolean;
    success: (message: string) => boolean;
    warning: (message: string) => void;
};
export declare enum InputErrors {
    CAPTURE_METHOD_MISSING = "capture-method-missing",
    DESTINATION_FILE_DIR_MISSING = "destination-file-dir-missing",
    DESTINATION_FILE_ALREADY_EXISTS = " destination-file-already-exists",
    HAR_FILE_NOT_FOUND = "har-file-not-found",
    POSTMAN_FILE_NOT_FOUND = "postman-file-not-found",
    PROXY_IN_NON_TTY = "proxy-in-non-tty",
    SPEC_FILE_NOT_FOUND = "spec-file-not-found",
    DOCUMENT_OPERATION_FORMAT = "document-operation-format",
    SPEC_FILE_NOT_READABLE = "spec-file-not-readable"
}
//# sourceMappingURL=feedback.d.ts.map