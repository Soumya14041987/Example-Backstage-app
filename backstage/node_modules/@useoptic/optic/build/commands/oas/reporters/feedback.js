"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputErrors = void 0;
exports.createCommandFeedback = createCommandFeedback;
var _segment = require("../../../segment");
var _chalk = _interopRequireDefault(require("chalk"));
function createCommandFeedback(command, options) {
  if (!options) options = {};
  let commandName = command.name();
  const destination = options.destination || process.stderr;
  command.configureOutput({
    writeErr: message => inputError(message, 'command.error')
  });
  function inputError(message, name, eventProperties = {}, errCode = 1) {
    const prefix = message.indexOf('error: ') > -1 ? '' : 'error: ';
    destination.write(_chalk.default.bgRed.white(' input ') + ' ' + prefix + message + '\n');
    (0, _segment.trackEvent)(`openapi_cli.${commandName}.input-error.${name}`, {
      ...eventProperties,
      message
    });
    return (0, _segment.flushEvents)().catch(err => {
      console.warn('Could not flush usage analytics (non-critical)');
    }).finally(() => {
      process.exit(errCode);
    });
  }
  function instruction(message, errCode = 1) {
    destination.write(_chalk.default.bgBlue.white(' help ') + ' ' + message + '\n');
  }
  function commandInstruction(command, action) {
    destination.write(` (use "${_chalk.default.bold(command)}" to ${action})` + '\n');
  }
  function notable(message) {
    destination.write(_chalk.default.blueBright('» ') + message + '\n');
  }
  function warning(message) {
    destination.write(_chalk.default.bgYellow.black(' warning ') + ' ' + message + '\n');
  }
  function internal(message, exit = false, errCode = 1) {
    destination.write(_chalk.default.bgRed.white(' internal-error ') + ' ' + message + '\n');
    if (exit) {
      process.exit(errCode);
    }
  }
  function log(message) {
    return destination.write(message + '\n');
  }
  function logChild(child, message) {
    return destination.write(_chalk.default.magenta(`[${child}]`) + ' ' + message + '\n');
  }
  function title(title) {
    return destination.write('\n' + _chalk.default.bold.underline(title + '\n'));
  }
  function success(message) {
    return destination.write(' ' + _chalk.default.greenBright('✓') + ' ' + message + '\n');
  }
  return {
    inputError,
    internal,
    commandInstruction,
    instruction,
    notable,
    log,
    logChild,
    title,
    success,
    warning
  };
}
let InputErrors = exports.InputErrors = /*#__PURE__*/function (InputErrors) {
  InputErrors["CAPTURE_METHOD_MISSING"] = "capture-method-missing";
  InputErrors["DESTINATION_FILE_DIR_MISSING"] = "destination-file-dir-missing";
  InputErrors["DESTINATION_FILE_ALREADY_EXISTS"] = " destination-file-already-exists";
  InputErrors["HAR_FILE_NOT_FOUND"] = "har-file-not-found";
  InputErrors["POSTMAN_FILE_NOT_FOUND"] = "postman-file-not-found";
  InputErrors["PROXY_IN_NON_TTY"] = "proxy-in-non-tty";
  InputErrors["SPEC_FILE_NOT_FOUND"] = "spec-file-not-found";
  InputErrors["DOCUMENT_OPERATION_FORMAT"] = "document-operation-format";
  InputErrors["SPEC_FILE_NOT_READABLE"] = "spec-file-not-readable";
  return InputErrors;
}({});