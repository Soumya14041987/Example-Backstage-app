"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileExtensions = exports.applyPatch = void 0;
var _openapiIo = require("@useoptic/openapi-io");
var _fastJsonPatch = _interopRequireDefault(require("fast-json-patch"));
var _isUrl = _interopRequireDefault(require("is-url"));
var _tsInvariant = _interopRequireDefault(require("ts-invariant"));
var _tsResults = require("ts-results");
const applyPatch = exports.applyPatch = async function applyPatch(filePath, fileContents, operations) {
  (0, _tsInvariant.default)(!(0, _isUrl.default)(filePath), `Unable to patch one of your dependencies. It a URL and not writable ${filePath}`);
  const parsed = parse(filePath, fileContents);
  (0, _tsInvariant.default)(parsed.ok, `Patch not possible because ${filePath} could not be parsed: ${parsed.val}`);
  const newDocument = _fastJsonPatch.default.applyPatch(parsed.val || {}, operations).newDocument;
  const updatedString = stringifyDocument(filePath, newDocument);
  return {
    success: true,
    filePath,
    contents: updatedString
  };
};
const fileExtensions = exports.fileExtensions = ['.json', '.yaml', '.yml'];
function parse(filePath, fileContents) {
  if ((0, _openapiIo.isJson)(filePath)) {
    return (0, _tsResults.Ok)(fileContents && JSON.parse(fileContents) || {});
  } else if ((0, _openapiIo.isYaml)(filePath)) {
    return (0, _tsResults.Ok)((0, _openapiIo.loadYaml)(fileContents));
  } else {
    return (0, _tsResults.Err)(`${filePath} is not .json or .yaml file. Unsure how to parse and apply patches`);
  }
}
function stringifyDocument(filePath, document) {
  if ((0, _openapiIo.isJson)(filePath)) {
    return JSON.stringify(document, null, 2);
  } else if ((0, _openapiIo.isYaml)(filePath)) {
    return (0, _openapiIo.writeYaml)(document);
  } else {
    throw new Error(`${filePath} is not .json or .yaml file. Unsure how to serialize`);
  }
}