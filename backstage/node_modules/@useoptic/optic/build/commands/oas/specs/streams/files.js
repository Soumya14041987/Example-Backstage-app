"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpecFilesAsync = exports.SpecFiles = exports.SpecFileOperations = void 0;
var _ = require("..");
var _openapiUtilities = require("@useoptic/openapi-utilities");
var _tsInvariant = _interopRequireDefault(require("ts-invariant"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _patches = require("./patches");
class SpecFileOperations {
  static async *fromSpecPatches(specPatches, sourcemap) {
    const sourcemapQueries = (0, _openapiUtilities.sourcemapReader)(sourcemap);
    let operations = _patches.LegacySpecPatches.operations(specPatches);
    for await (let operation of operations) {
      const result = sourcemapQueries.findFilePosition(operation.path);
      (0, _tsInvariant.default)(result, 'should be able to resolve the file for json patch operation in source map');
      const {
        filePath,
        startsAt
      } = result;
      yield {
        filePath,
        operation: {
          ...operation,
          path: startsAt
        }
      };
    }
  }
  static async *fromNewFilePatches(absoluteFilePath, specPatches) {
    let operations = _patches.LegacySpecPatches.operations(specPatches);
    for await (let operation of operations) {
      yield {
        filePath: absoluteFilePath,
        operation
      };
    }
  }
}
exports.SpecFileOperations = SpecFileOperations;
class SpecFiles {
  static *fromSourceMap(sourcemap) {
    for (let file of sourcemap.files) {
      yield {
        path: file.path,
        contents: file.contents
      };
    }
  }
  static async *patch(specFiles, fileOperations) {
    const files = [...specFiles];
    const operationsByFile = {};

    // buffer all the operations per path, to reconcile once per file
    for await (let {
      filePath,
      operation
    } of fileOperations) {
      if (!operationsByFile[filePath]) operationsByFile[filePath] = [];
      operationsByFile[filePath].push(operation);
    }
    for (let [filePath, operations] of Object.entries(operationsByFile)) {
      const file = files.find(({
        path
      }) => path === filePath);
      yield await _.SpecFile.applyPatch(file, operations);
    }
  }
  static async *writeFiles(specFiles) {
    for await (let {
      path,
      contents
    } of specFiles) {
      await _fsExtra.default.writeFile(path, contents);
      yield path;
    }
  }
}
exports.SpecFiles = SpecFiles;
class SpecFilesAsync {}
exports.SpecFilesAsync = SpecFilesAsync;