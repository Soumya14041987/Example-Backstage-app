"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRunAction = void 0;
exports.registerRunCommand = registerRunCommand;
var _commander = require("commander");
var _errorHandler = require("../error-handler");
var _fs = _interopRequireDefault(require("fs"));
var _commentApi = require("./ci/comment/comment-api");
var _common = require("./ci/comment/common");
const usage = () => `
  To see how Optic handles changes, run Optic in your repository a first time; then make
  changes to one or more of your OpenAPI files and run again:

  $ optic run

  Visit https://www.useoptic.com/docs/setup-ci for CI setup instructions.
`;
const severities = ['none', 'error'];
function getProvider() {
  const githubToken = process.env.GITHUB_TOKEN;
  if (githubToken) return 'github';
  const gitlabToken = process.env.OPTIC_GITLAB_TOKEN;
  if (gitlabToken) return 'gitlab';else return null;
}
async function getGithubCommenter() {
  const eventFile = _fs.default.readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8');
  const event = JSON.parse(eventFile);
  const pullRequest = event.pull_request.number;
  const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
  const sha = process.env.GITHUB_SHA;
  const token = process.env.GITHUB_TOKEN;
  const commenter = new _commentApi.GithubCommenter({
    owner,
    repo,
    pullRequest,
    sha,
    token,
    enterpriseBaseUrl: process.env.GITHUB_API_URL
  });
  return commenter;
}
async function getGitlabCommenter() {
  const commenter = new _commentApi.GitlabCommenter({
    token: process.env.OPTIC_GITLAB_TOKEN,
    enterpriseBaseUrl: process.env.CI_SERVER_URL,
    projectId: process.env.CI_PROJECT_ID,
    sha: process.env.CI_COMMIT_SHA,
    mergeRequestId: process.env.CI_MERGE_REQUEST_IID
  });
  return commenter;
}
async function comment(data, commenter, sha) {
  const maybeComment = await commenter.getComment(_common.COMPARE_SUMMARY_IDENTIFIER);
  const body = (0, _common.generateCompareSummaryMarkdown)({
    sha
  }, data, {
    verbose: false
  });
  if (maybeComment) {
    await commenter.updateComment(maybeComment.id, body);
  } else {
    if (data.completed.length > 0 || data.failed.length > 0) {
      await commenter.createComment(body);
    }
  }
}
function registerRunCommand(cli, config, options) {
  cli.command('run', {
    hidden: true
  }).description('CI workflow command that tests each OpenAPI specification in your repo and summarizes the results as a pull (or merge) request comment').configureHelp({
    commandUsage: usage
  }).option('-i, --ignore <glob_pattern,...>', 'Glob patterns matching specifications to ignore').option('-I, --include-git-ignored', 'Include specifications matched in .gitignore', false).addOption(new _commander.Option('-s, --severity <severity>', 'Control the exit code when there are issues: error=1, none=0').choices(severities).default('error')).argument('[file_paths]', 'Comma-seperated glob patterns matching specifications to process. When omitted, matches all non-ignored specifications.').action((0, _errorHandler.errorHandler)(getRunAction(config, options), {
    command: 'run'
  }));
}
const getRunAction = (config, customOptions) => async (matchArg, options) => {
  console.error('Run is not supported - use `optic diff` or `optic diff-all` instead');
  return;
};
exports.getRunAction = getRunAction;