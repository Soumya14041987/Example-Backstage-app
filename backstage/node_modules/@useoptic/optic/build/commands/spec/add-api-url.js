"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerSpecAddApiUrl = void 0;
var _errorHandler = require("../../error-handler");
var _constants = require("../../constants");
var _writeToFile = require("../../utils/write-to-file");
var _chalk = _interopRequireDefault(require("chalk"));
var _logger = require("../../logger");
const usage = () => `
  optic spec add-api-url <path_to_spec.yml> <optic-api-url>`;
const helpText = `
Example usage:
  Add an Optic API URL to a spec file.
  $ optic spec add-api-url <path_to_spec.yml> <optic-api-url>
`;
const registerSpecAddApiUrl = (cli, config) => {
  cli.command('add-api-url').configureHelp({
    commandUsage: usage
  }).addHelpText('after', helpText).description('Add Optic API URL to a spec file').argument('<spec_path>', 'path to spec file').argument('<api_url>', 'api url to add to spec file').action((0, _errorHandler.errorHandler)(getAddApiUrlAction(config), {
    command: 'spec-add-api-url'
  }));
};
exports.registerSpecAddApiUrl = registerSpecAddApiUrl;
const getAddApiUrlAction = config => async (spec_path, api_url) => {
  if (/.json/i.test(spec_path)) {
    await (0, _writeToFile.writeJson)(spec_path, {
      [_constants.OPTIC_URL_KEY]: api_url
    });
  } else {
    await (0, _writeToFile.writeYml)(spec_path, {
      [_constants.OPTIC_URL_KEY]: api_url
    });
  }
  _logger.logger.info(_chalk.default.green(`Added ${_constants.OPTIC_URL_KEY} to ${spec_path}`));
};