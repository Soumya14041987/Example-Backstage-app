import { OpticBackendClient } from './client';
import { Static } from '@sinclair/typebox';
export declare enum VCS {
    Git = "git",
    Cloud = "cloud"
}
export declare const OPTIC_YML_NAME = "optic.yml";
export declare const OPTIC_DEV_YML_NAME = "optic.dev.yml";
export declare const USER_CONFIG_DIR: string;
export declare const USER_CONFIG_PATH: string;
declare const RequestSend: import("@sinclair/typebox").TObject<{
    path: import("@sinclair/typebox").TString;
    method: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    data: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
    headers: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TString>>;
}>;
declare const RequestRun: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
    command: import("@sinclair/typebox").TString;
    proxy_variable: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>>;
declare const CaptureConfigData: import("@sinclair/typebox").TObject<{
    config: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        request_concurrency: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    }>>;
    server: import("@sinclair/typebox").TObject<{
        dir: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        command: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        url: import("@sinclair/typebox").TString;
        ready_endpoint: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        ready_interval: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        ready_timeout: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    }>;
    requests: import("@sinclair/typebox").TObject<{
        run: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            command: import("@sinclair/typebox").TString;
            proxy_variable: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        }>>>;
        send: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
            path: import("@sinclair/typebox").TString;
            method: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            data: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
            headers: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TString>>;
        }>>>;
    }>;
}>;
export type CaptureConfigData = Static<typeof CaptureConfigData>;
export type ServerConfig = CaptureConfigData['server'];
export type RequestSend = Static<typeof RequestSend>;
export type RequestRun = Static<typeof RequestRun>;
export type CaptureConfigConfig = CaptureConfigData['config'];
export declare const ProjectYmlConfig: import("@sinclair/typebox").TObject<{
    extends: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    ruleset: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TObject<{}>]>>>;
    capture: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TObject<{
        config: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            request_concurrency: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        }>>;
        server: import("@sinclair/typebox").TObject<{
            dir: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            command: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            url: import("@sinclair/typebox").TString;
            ready_endpoint: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            ready_interval: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
            ready_timeout: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        }>;
        requests: import("@sinclair/typebox").TObject<{
            run: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
                command: import("@sinclair/typebox").TString;
                proxy_variable: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            }>>>;
            send: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
                path: import("@sinclair/typebox").TString;
                method: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
                data: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
                headers: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TString>>;
            }>>>;
        }>;
    }>>>;
    external_refs: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        resolve_headers: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
            headers: import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TString>;
            url_prefix: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        }>>>;
    }>>;
}>;
export type ProjectYmlConfig = Static<typeof ProjectYmlConfig>;
export type ConfigRuleset = {
    name: string;
    config: unknown;
};
export type OpticCliConfig = Omit<ProjectYmlConfig, 'ruleset'> & {
    isDefaultConfig: boolean;
    ruleset?: ConfigRuleset[];
    configPath?: string;
    root: string;
    vcs?: {
        type: VCS;
        sha: string;
        diffSet: Set<string>;
    };
    isAuthenticated: boolean;
    authenticationType?: 'user' | 'env';
    userId?: string;
    client: OpticBackendClient;
    isInCi: boolean;
};
export declare function detectCliConfig(topLevelDir: string): Promise<string | undefined>;
export declare function RenderTemplate(configPath: string): Promise<unknown>;
export declare function loadCliConfig(configPath: string, client: OpticBackendClient): Promise<OpticCliConfig>;
export declare const validateConfig: (config: unknown, path: string) => void;
export declare const initializeRules: (config: ProjectYmlConfig, client: OpticBackendClient) => Promise<void>;
export type UserConfig = {
    token: string;
};
export declare function readUserConfig(): Promise<UserConfig | null>;
export declare function initializeConfig(): Promise<OpticCliConfig>;
export {};
//# sourceMappingURL=config.d.ts.map