"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initCli = void 0;
var _commander = require("commander");
var _sentry = require("./sentry");
var _segment = require("./segment");
var _updateNotifier = _interopRequireDefault(require("update-notifier"));
var _diff = require("./commands/diff/diff");
var _upload = require("./commands/ruleset/upload");
var _config = require("./config");
var _init = require("./commands/ruleset/init");
var _add = require("./commands/api/add");
var _create = require("./commands/api/create");
var _capture = require("./commands/capture/capture");
var _config2 = require("./commands/config");
var _diffAll = require("./commands/diff/diff-all");
var _push = require("./commands/spec/push");
var _addApiUrl = require("./commands/spec/add-api-url");
var _login = require("./commands/login/login");
var _comment = require("./commands/ci/comment/comment");
var _logger = require("./logger");
var _chalk = _interopRequireDefault(require("chalk"));
var _dereference = require("./commands/dereference/dereference");
var _setup = require("./commands/ci/setup");
var _lint = require("./commands/lint/lint");
var _bundle = require("./commands/bundle/bundle");
var _list = require("./commands/api/list");
var _history = require("./commands/history");
var _run = require("./commands/run");
const packageJson = require('../package.json');
const allowedMethods = ['binary', 'npm/yarn', 'docker'];
function getInstallMethod() {
  if (process.env.INSTALLATION_METHOD !== undefined && allowedMethods.includes(process.env.INSTALLATION_METHOD)) {
    return process.env.INSTALLATION_METHOD;
  }
  return 'npm/yarn';
}
const getInstallInstruction = () => {
  const installMethod = getInstallMethod();

  // TODO: distinguish between 'binary' and 'npm/yarn' installations
  // vercel/pkg is deprecated. waiting on node's native packaging to explore this more

  if (installMethod === 'docker') {
    return 'docker pull docker.io/useoptic/optic:latest';
  }
  return 'npm i -g @useoptic/optic';
};
const initCli = async (cli = _commander.program, options = {}) => {
  cli.name('optic');
  cli.helpOption('-h, --help', 'Display help for the command');
  _logger.logger.debug(`Using Optic version ${packageJson.version} - ${getInstallMethod()}`);
  (0, _sentry.initSentry)(undefined, packageJson.version);
  (0, _segment.initSegment)(undefined);
  cli.hook('preAction', async command => {
    const subcommands = ['ruleset', 'oas', 'api', 'spec', 'ci'];
    let commandName;
    let args;
    if (subcommands.includes(command.args[0])) {
      commandName = command.args.slice(0, 2).join('.');
      args = command.args.slice(2);
    } else {
      [commandName, ...args] = command.args;
    }
    (0, _segment.trackEvent)(`optic.${commandName}`, {
      args,
      isInCi: process.env.CI === 'true'
    });
    (0, _segment.trackEvent)(`optic.cli`, {
      commandName,
      args,
      installMethod: getInstallMethod(),
      isInCi: process.env.CI === 'true'
    });
  });
  if (options.hideNotifier !== true) {
    const notifier = (0, _updateNotifier.default)({
      pkg: {
        name: packageJson.name,
        version: packageJson.version
      }
    });
    cli.hook('postAction', async () => {
      if (notifier.update) {
        _logger.logger.info(`
  ${_chalk.default.green(_chalk.default.bold(`New Optic version available:`))} ${notifier.update.latest} (current ${notifier.update.current})
  
  Run ${_chalk.default.yellow(getInstallInstruction())} to upgrade Optic`);
      }
      try {
        await (0, _segment.flushEvents)();
        // we can ignore non-critical tracking errors
      } catch (e) {}
    });
  }
  let cliConfig;
  try {
    cliConfig = await (0, _config.initializeConfig)();
  } catch (e) {
    _logger.logger.error(_chalk.default.red('Error initializing the cli config'));
    _logger.logger.error(e.message);
    process.exitCode = 1;
    return cli;
  }
  cli.version(packageJson.version, '-V, --version', 'Display version');
  cli.addHelpCommand(false);
  (0, _run.registerRunCommand)(cli, cliConfig, options);
  (0, _diff.registerDiff)(cli, cliConfig, options);
  const betaSubcommands = cli.command('beta', {
    hidden: true
  });
  (0, _capture.registerCaptureCommand)(cli, cliConfig);
  (0, _config2.registerConfigCommand)(cli, cliConfig);
  (0, _lint.registerLint)(cli, cliConfig);
  (0, _diffAll.registerDiffAll)(cli, cliConfig, options);
  (0, _login.registerLogin)(cli, cliConfig);
  (0, _dereference.registerDereference)(cli, cliConfig);
  (0, _bundle.registerBundle)(cli, cliConfig);
  const rulesetSubcommands = cli.command('ruleset', {
    hidden: true
  }).description('Commands to build your own optic rulesets. See `optic ruleset --help`').addHelpCommand(false);
  (0, _upload.registerRulesetUpload)(rulesetSubcommands, cliConfig);
  (0, _init.registerRulesetInit)(rulesetSubcommands, cliConfig);
  const apiSubcommands = cli.command('api', {
    hidden: true
  }).addHelpCommand(false);
  (0, _add.registerApiAdd)(apiSubcommands, cliConfig);
  (0, _create.registerApiCreate)(apiSubcommands, cliConfig);
  (0, _list.registerApiList)(apiSubcommands, cliConfig);
  const specSubcommands = cli.command('spec', {
    hidden: true
  }).addHelpCommand(false);
  (0, _push.registerSpecPush)(specSubcommands, cliConfig);
  (0, _addApiUrl.registerSpecAddApiUrl)(specSubcommands, cliConfig);
  const ciSubcommands = cli.command('ci', {
    hidden: true
  }).addHelpCommand(false);
  (0, _comment.registerCiComment)(ciSubcommands, cliConfig);
  (0, _setup.registerCiSetup)(ciSubcommands, cliConfig);
  (0, _history.registerHistory)(cli, cliConfig);
  return cli;
};
exports.initCli = initCli;