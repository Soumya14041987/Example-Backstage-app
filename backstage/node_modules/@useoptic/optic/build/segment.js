"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trackEvent = exports.initSegment = exports.identify = exports.flushEvents = exports.alias = void 0;
var _analyticsNode = _interopRequireDefault(require("@segment/analytics-node"));
var _nodeMachineId = require("node-machine-id");
const packageJson = require('../package.json');
let analytics = null;
let id;
try {
  id = (0, _nodeMachineId.machineIdSync)();
} catch (e) {
  id = 'unknown-user';
}
const initSegment = key => {
  const isSegmentDisabled = process.env.OPTIC_TELEMETRY_LEVEL === 'off' || process.env.OPTIC_TELEMETRY_LEVEL === 'error' || process.env.OPTIC_ENV === 'staging' || process.env.OPTIC_ENV === 'local';
  if (key && !isSegmentDisabled) {
    analytics = new _analyticsNode.default({
      writeKey: key
    });
  }
};
exports.initSegment = initSegment;
const trackEvent = (eventName, properties, userId) => {
  const mergedProperties = {
    version: packageJson.version,
    ...(properties ? properties : {})
  };
  if (analytics) {
    analytics.track({
      event: eventName,
      userId: userId ?? id,
      properties: mergedProperties
    });
  }
};
exports.trackEvent = trackEvent;
const flushEvents = () => {
  if (analytics) {
    return analytics.closeAndFlush({
      timeout: 3000
    });
  } else {
    return Promise.resolve();
  }
};
exports.flushEvents = flushEvents;
const identify = email => {
  if (analytics) {
    analytics.identify({
      userId: id,
      traits: {
        email
      }
    });
  }
};
exports.identify = identify;
const alias = externalId => {
  if (analytics) {
    analytics.alias({
      userId: externalId,
      previousId: id
    });
  }
};
exports.alias = alias;