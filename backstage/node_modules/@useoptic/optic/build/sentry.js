"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapActionHandlerWithSentry = exports.initSentry = exports.SentryClient = void 0;
var Sentry = _interopRequireWildcard(require("@sentry/node"));
exports.SentryClient = Sentry;
var _openapiUtilities = require("@useoptic/openapi-utilities");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const initSentry = (sentryUrl, version) => {
  const disableTelemetry = process.env.OPTIC_TELEMETRY_LEVEL === 'off';
  const opticEnvNotProd = process.env.OPTIC_ENV === 'staging' || process.env.OPTIC_ENV === 'local';
  const isSentryDisabled = disableTelemetry || opticEnvNotProd;
  if (sentryUrl && !isSentryDisabled) {
    Sentry.init({
      dsn: sentryUrl,
      integrations: integrations => {
        // Disable the Sentry Http integration, we don't use traces across http bounds and this breaks certain cases with capture
        // as it adds custom sentry http headers
        return integrations.filter(integration => integration.name !== 'Http');
      },
      release: version
    });
  }
};
exports.initSentry = initSentry;
const wrapActionHandlerWithSentry = fn => {
  return async (...args) => {
    try {
      return await fn(...args);
    } catch (e) {
      const err = e;
      console.error(err.message);
      if (!_openapiUtilities.UserError.isInstance(e)) {
        Sentry.captureException(e);
      }
      await Sentry.flush();
      process.exit(1);
    }
  };
};
exports.wrapActionHandlerWithSentry = wrapActionHandlerWithSentry;