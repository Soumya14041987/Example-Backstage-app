import { compareSpecs, RuleResult, groupDiffsByEndpoint, Severity } from '@useoptic/openapi-utilities';
type Comparison = {
    groupedDiffs: ReturnType<typeof groupDiffsByEndpoint>;
    results: Awaited<ReturnType<typeof compareSpecs>>['results'];
};
export type CiRunDetails = {
    completed: {
        warnings: string[];
        apiName: string;
        opticWebUrl?: string | null;
        comparison: Comparison;
        specUrl?: string | null;
        capture?: CaptureForCI;
    }[];
    failed: {
        apiName: string;
        error: string;
    }[];
    noop: {
        apiName: string;
    }[];
    severity: Severity;
};
export type CaptureForCI = {
    success: false;
} | {
    unmatchedInteractions: number;
    mismatchedEndpoints: number;
    percentCovered: number;
    success: true;
};
export declare function getDataForCi(specs: ({
    warnings: string[];
    results: RuleResult[];
    groupedDiffs: ReturnType<typeof groupDiffsByEndpoint>;
    changelogUrl?: string | null;
    specUrl?: string | null;
    name: string;
    capture?: CaptureForCI;
} | {
    name: string;
    error: string;
})[], options: {
    severity: Severity;
}): Promise<CiRunDetails>;
export declare function writeDataForCi(specs: ({
    warnings: string[];
    results: RuleResult[];
    groupedDiffs: ReturnType<typeof groupDiffsByEndpoint>;
    changelogUrl?: string | null;
    specUrl?: string | null;
    name: string;
    capture?: CaptureForCI;
} | {
    name: string;
    error: string;
})[], options: {
    severity: Severity;
}): Promise<void>;
export declare function readDataForCi(): Promise<CiRunDetails>;
export {};
//# sourceMappingURL=ci-data.d.ts.map