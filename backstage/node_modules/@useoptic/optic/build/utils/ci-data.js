"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDataForCi = getDataForCi;
exports.readDataForCi = readDataForCi;
exports.writeDataForCi = writeDataForCi;
var _promises = _interopRequireDefault(require("node:fs/promises"));
var _path = _interopRequireDefault(require("path"));
const CI_DETAILS_FILE_PATH = _path.default.join(process.cwd(), 'ci-run-details.json');
async function getDataForCi(specs, options) {
  const data = {
    completed: [],
    failed: [],
    noop: [],
    severity: options.severity
  };
  for (const spec of specs) {
    if ('error' in spec) {
      data.failed.push({
        apiName: spec.name,
        error: spec.error
      });
    } else {
      if (Object.keys(spec.groupedDiffs.endpoints).length === 0 && spec.groupedDiffs.specification.diffs.length === 0 && spec.results.length === 0 && !spec.capture) {
        data.noop.push({
          apiName: spec.name
        });
      } else {
        data.completed.push({
          apiName: spec.name,
          warnings: spec.warnings,
          opticWebUrl: spec.changelogUrl,
          specUrl: spec.specUrl,
          comparison: {
            groupedDiffs: spec.groupedDiffs,
            results: spec.results
          },
          capture: spec.capture
        });
      }
    }
  }
  return data;
}
async function writeDataForCi(specs, options) {
  const data = await getDataForCi(specs, options);
  await _promises.default.writeFile(CI_DETAILS_FILE_PATH, JSON.stringify(data), 'utf-8');
}
async function readDataForCi() {
  const file = await _promises.default.readFile(CI_DETAILS_FILE_PATH, 'utf-8');
  return JSON.parse(file);
}