"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApiFromOpticUrl = getApiFromOpticUrl;
exports.getApiUrl = getApiUrl;
exports.getCiSetupUrl = getCiSetupUrl;
exports.getNewTokenUrl = getNewTokenUrl;
exports.getRunUrl = getRunUrl;
exports.getSpecUrl = getSpecUrl;
exports.getStandardsUrl = getStandardsUrl;
var _nodeUrl = require("node:url");
var _urlJoin = _interopRequireDefault(require("url-join"));
// expected format: app.useoptic.com/organizations/:orgId/apis/:apiId
const PATH_NAME_REGEXP = /^\/organizations\/([a-zA-Z0-9-_]+)\/apis\/([a-zA-Z0-9-_]+)$/i;
function getApiFromOpticUrl(opticUrl) {
  if (!opticUrl) return null;
  try {
    const url = new _nodeUrl.URL(opticUrl);
    const match = url.pathname.match(PATH_NAME_REGEXP);
    const maybeOrgId = match === null || match === void 0 ? void 0 : match[1];
    const maybeApiId = match === null || match === void 0 ? void 0 : match[2];
    return maybeOrgId && maybeApiId ? {
      apiId: maybeApiId,
      orgId: maybeOrgId
    } : null;
  } catch (e) {
    return null;
  }
}
function getApiUrl(baseUrl, orgId, apiId) {
  return (0, _urlJoin.default)(baseUrl, `organizations/${orgId}/apis/${apiId}`);
}
function getRunUrl(baseUrl, orgId, apiId, runId) {
  return (0, _urlJoin.default)(baseUrl, `organizations/${orgId}/apis/${apiId}/runs/${runId}`);
}
function getSpecUrl(baseUrl, orgId, apiId, specId) {
  return (0, _urlJoin.default)(baseUrl, `organizations/${orgId}/apis/${apiId}?specId=${specId}`);
}
function getStandardsUrl(baseUrl, orgId, standardId) {
  return (0, _urlJoin.default)(baseUrl, `organizations/${orgId}/settings/standards/${standardId}`);
}
function getNewTokenUrl(baseUrl) {
  return (0, _urlJoin.default)(baseUrl, 'user-settings/personal-access-token/new');
}
function getCiSetupUrl(baseUrl, provider, web_url) {
  const url = new _nodeUrl.URL((0, _urlJoin.default)(baseUrl, 'ci-setup'));
  if (provider) {
    url.searchParams.set('provider', provider);
  }
  if (web_url) {
    url.searchParams.set('web_url', web_url);
  }
  return url.toString();
}