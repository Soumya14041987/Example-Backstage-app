import { FlatOpenAPIV2, FlatOpenAPIV3, FlatOpenAPIV3_1, OpenAPIV2, OpenAPIV3 } from '@useoptic/openapi-utilities';
import { ParseOpenAPIResult } from '@useoptic/openapi-io';
import { OpticCliConfig } from '../config';
import { OpticBackendClient } from '../client';
export type ParseResultContext = {
    vcs: 'git';
    sha: string;
    effective_at?: Date;
    name: string;
    email: string;
    message: string;
} | {
    vcs: 'cloud';
    specId: string;
} | null;
export type ParseResult = (ParseOpenAPIResult<FlatOpenAPIV2.Document> & {
    isEmptySpec: boolean;
    from: 'git' | 'file' | 'url' | 'empty' | 'cloud';
    fileContext: SpecFromInput;
    version: '2.x.x';
    context: ParseResultContext;
}) | (ParseOpenAPIResult<FlatOpenAPIV3.Document> & {
    isEmptySpec: boolean;
    from: 'git' | 'file' | 'url' | 'empty' | 'cloud';
    fileContext: SpecFromInput;
    version: '3.0.x';
    context: ParseResultContext;
}) | (ParseOpenAPIResult<FlatOpenAPIV3_1.Document> & {
    isEmptySpec: boolean;
    from: 'git' | 'file' | 'url' | 'empty' | 'cloud';
    fileContext: SpecFromInput;
    version: '3.1.x';
    context: ParseResultContext;
});
type SpecFromInput = {
    from: 'cloud';
    apiId: string;
    tag: string;
} | {
    from: 'file';
    filePath: string;
} | {
    from: 'git';
    branch: string;
    name: string;
} | {
    from: 'empty';
} | {
    from: 'url';
    url: string;
};
export declare function parseOpticRef(raw?: string | null): SpecFromInput;
export declare function loadRaw(opticRef: string, config: {
    client: OpticBackendClient;
}): Promise<OpenAPIV2.Document | OpenAPIV3.Document>;
export declare const loadSpec: (opticRef: string | undefined, config: OpticCliConfig, options: {
    strict: boolean;
    denormalize: boolean;
}) => Promise<ParseResult>;
export declare const parseFilesFromRef: (filePath: string, base: string, rootGitPath: string, config: OpticCliConfig, options: {
    denormalize: boolean;
    headStrict: boolean;
}) => Promise<{
    baseFile: ParseResult;
    headFile: ParseResult;
    pathFromGitRoot: string;
}>;
export {};
//# sourceMappingURL=spec-loaders.d.ts.map