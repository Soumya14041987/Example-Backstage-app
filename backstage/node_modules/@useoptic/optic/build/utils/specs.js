"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNewSpecFile = createNewSpecFile;
exports.createNullSpec = createNullSpec;
exports.createNullSpecSourcemap = createNullSpecSourcemap;
exports.getIgnorePaths = getIgnorePaths;
var _openapiUtilities = require("@useoptic/openapi-utilities");
var _constants = require("../constants");
var _openapiIo = require("@useoptic/openapi-io");
var _logger = require("../logger");
function getIgnorePaths(spec) {
  const ignorePaths = spec[_constants.OPTIC_PATH_IGNORE_KEY];
  const paths = [];
  if (!Array.isArray(ignorePaths)) {
    return [];
  } else {
    for (const ignore of ignorePaths) {
      if (typeof ignore === 'string') {
        paths.push({
          path: ignore
        });
      } else if (ignore.method && ignore.path) {
        paths.push({
          method: ignore.method,
          path: ignore.path
        });
      } else {
        _logger.logger.debug(`Skipping x-optic-path-ignore ${JSON.stringify(ignore)} - must be type string or {method: string, path: string}`);
      }
    }
  }
  return paths;
}
function createNewSpecFile(version) {
  return {
    info: {
      title: 'Untitled service',
      version: '1.0.0'
    },
    openapi: version,
    paths: {}
  };
}
function createNullSpec() {
  return {
    ..._openapiUtilities.defaultEmptySpec,
    [_constants.OPTIC_EMPTY_SPEC_KEY]: true
  };
}
function createNullSpecSourcemap(nullSpec) {
  const emptySpecName = 'empty.json';
  const sourcemap = new _openapiIo.JsonSchemaSourcemap(emptySpecName);
  sourcemap.addFileIfMissingFromContents(emptySpecName, JSON.stringify(nullSpec, null, 2), 0);
  return sourcemap;
}