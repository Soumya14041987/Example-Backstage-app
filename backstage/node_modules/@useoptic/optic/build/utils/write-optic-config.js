"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateOpticConfig = updateOpticConfig;
var _yaml = _interopRequireDefault(require("yaml"));
var _promises = _interopRequireDefault(require("node:fs/promises"));
var _path = _interopRequireDefault(require("path"));
// merges a yaml document into the existing optic.yml and writes it to disk. if newDocument's top-level
// key already exists in the Optic config, it is overwritten.
async function updateOpticConfig(newDocument, filePath, config) {
  let opticYml = new _yaml.default.Document();
  let configPath = config.configPath;
  if (configPath) {
    opticYml = _yaml.default.parseDocument(await _promises.default.readFile(configPath, 'utf8'));
  } else {
    configPath = _path.default.join(config.root, 'optic.yml');
  }
  opticYml.setIn(['capture', filePath], newDocument);
  await _promises.default.writeFile(configPath, opticYml.toString());
  return configPath;
}