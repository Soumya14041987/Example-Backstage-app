"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadRuleset = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const node_zlib_1 = __importDefault(require("node:zlib"));
const node_os_1 = __importDefault(require("node:os"));
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
async function downloadRuleset(name, url, uploaded_at, should_decompress) {
    const filepath = node_path_1.default.join(node_os_1.default.tmpdir(), name, `${uploaded_at}.js`);
    try {
        await promises_1.default.access(filepath);
        // If the file exists, we have this file in the cache and can return filepath
        return filepath;
    }
    catch (e) { }
    const resp = await (0, node_fetch_1.default)(url);
    if (!resp.ok) {
        throw new Error(`Downloading ruleset failed (${resp.status}): ${await resp.text()}`);
    }
    let raw;
    if (should_decompress) {
        const compressed = await resp.buffer();
        raw = node_zlib_1.default.brotliDecompressSync(compressed);
    }
    else {
        raw = await resp.buffer();
    }
    const filefolder = node_path_1.default.dirname(filepath);
    // Does not error if folder exists when recursive = true
    await promises_1.default.mkdir(filefolder, { recursive: true });
    await promises_1.default.writeFile(filepath, raw);
    return filepath;
}
exports.downloadRuleset = downloadRuleset;
//# sourceMappingURL=download-ruleset.js.map