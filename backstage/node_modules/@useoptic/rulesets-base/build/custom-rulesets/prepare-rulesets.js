"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareRulesets = void 0;
const download_ruleset_1 = require("./download-ruleset");
const resolve_ruleset_1 = require("./resolve-ruleset");
async function prepareRulesets(payload, options) {
    const StandardRulesets = payload.standardRulesets;
    const rulesets = [];
    const warnings = [];
    for (const ruleset of payload.ruleset) {
        let instanceOrErrorMsg;
        if (StandardRulesets[ruleset.name]) {
            const RulesetClass = StandardRulesets[ruleset.name];
            try {
                instanceOrErrorMsg = await RulesetClass.fromOpticConfig(ruleset.config, { client: options.client, specVersion: options.specVersion });
            }
            catch (e) {
                console.error(e);
                warnings.push(`Constructing ruleset ${ruleset.name} failed`);
                continue;
            }
        }
        else if (payload.localRulesets[ruleset.name]) {
            try {
                instanceOrErrorMsg = await (0, resolve_ruleset_1.resolveRuleset)(ruleset, payload.localRulesets[ruleset.name]);
            }
            catch (e) {
                console.error(e);
                warnings.push(`Constructing ruleset ${ruleset.name} failed`);
                continue;
            }
        }
        else if (payload.hostedRulesets[ruleset.name]) {
            const hostedRuleset = payload.hostedRulesets[ruleset.name];
            let rulesetPath;
            try {
                rulesetPath = await (0, download_ruleset_1.downloadRuleset)(ruleset.name, hostedRuleset.url, hostedRuleset.uploaded_at, hostedRuleset.should_decompress);
            }
            catch (e) {
                warnings.push(`Loading ruleset ${ruleset.name} failed`);
                continue;
            }
            try {
                instanceOrErrorMsg = await (0, resolve_ruleset_1.resolveRuleset)(ruleset, rulesetPath);
            }
            catch (e) {
                console.error(e);
                warnings.push(`Constructing ruleset ${ruleset.name} failed`);
                continue;
            }
        }
        else {
            warnings.push(`Ruleset ${ruleset.name} does not exist`);
            continue;
        }
        if (typeof instanceOrErrorMsg === 'string') {
            warnings.push(instanceOrErrorMsg);
        }
        else {
            rulesets.push(instanceOrErrorMsg);
        }
    }
    return {
        warnings,
        rulesets,
    };
}
exports.prepareRulesets = prepareRulesets;
//# sourceMappingURL=prepare-rulesets.js.map