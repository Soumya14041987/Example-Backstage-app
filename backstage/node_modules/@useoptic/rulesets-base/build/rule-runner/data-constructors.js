"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSpecification = exports.createOperation = exports.createResponseBody = exports.createResponse = exports.createRequest = void 0;
const json_pointer_helpers_1 = require("@useoptic/json-pointer-helpers");
const createFactsWithRaw = (nodeDetailMap, key, openApiSpec) => {
    const factsWithRaw = new Map();
    for (const [name, nodeDetail] of nodeDetailMap.entries()) {
        const nodeFact = nodeDetail[key];
        if (nodeFact) {
            factsWithRaw.set(name, {
                ...nodeFact,
                raw: json_pointer_helpers_1.jsonPointerHelpers.get(openApiSpec, nodeFact.location.jsonPath),
            });
        }
    }
    return factsWithRaw;
};
const createPropertyFactsWithRaw = (nodeDetailMap, key, openApiSpec) => {
    const factsWithRaw = new Map();
    for (const [name, nodeDetail] of nodeDetailMap.entries()) {
        const nodeFact = nodeDetail[key];
        if (nodeFact) {
            const parentPath = json_pointer_helpers_1.jsonPointerHelpers.pop(json_pointer_helpers_1.jsonPointerHelpers.pop(nodeFact.location.jsonPath));
            factsWithRaw.set(name, {
                ...nodeFact,
                raw: json_pointer_helpers_1.jsonPointerHelpers.get(openApiSpec, nodeFact.location.jsonPath),
                parent: json_pointer_helpers_1.jsonPointerHelpers.get(openApiSpec, parentPath),
            });
        }
    }
    return factsWithRaw;
};
const createRequest = (request, contentType, key, openApiSpec) => {
    const requestFact = request[key];
    const requestBody = request.bodies.get(contentType);
    const requestBodyFact = requestBody?.[key];
    if (!requestFact || !requestBody || !requestBodyFact) {
        return null;
    }
    const requestPointer = json_pointer_helpers_1.jsonPointerHelpers.compile([
        ...json_pointer_helpers_1.jsonPointerHelpers.decode(requestBodyFact.location.jsonPath).slice(0, 3),
        'requestBody',
    ]);
    const required = json_pointer_helpers_1.jsonPointerHelpers.get(openApiSpec, requestPointer).required;
    return {
        ...requestBodyFact,
        required: required,
        raw: json_pointer_helpers_1.jsonPointerHelpers.get(openApiSpec, requestBodyFact.location.jsonPath),
        contentType,
        schemas: createPropertyFactsWithRaw(requestBody.schemas, key, openApiSpec),
        properties: createPropertyFactsWithRaw(requestBody.fields, key, openApiSpec),
    };
};
exports.createRequest = createRequest;
const createResponse = (response, key, openApiSpec) => {
    const responseFact = response[key];
    if (!responseFact) {
        return null;
    }
    const bodies = [];
    for (const [contentType, bodyNode] of response.bodies.entries()) {
        const responseBody = (0, exports.createResponseBody)(bodyNode, response.statusCode, contentType, key, openApiSpec);
        if (responseBody) {
            bodies.push(responseBody);
        }
    }
    return {
        ...responseFact,
        raw: json_pointer_helpers_1.jsonPointerHelpers.get(openApiSpec, responseFact.location.jsonPath),
        statusCode: response.statusCode,
        bodies,
        headers: createFactsWithRaw(response.headers, key, openApiSpec),
    };
};
exports.createResponse = createResponse;
const createResponseBody = (bodyNode, statusCode, contentType, key, openApiSpec) => {
    const responseBodyFact = bodyNode?.[key];
    if (!responseBodyFact) {
        return null;
    }
    return {
        ...responseBodyFact,
        raw: json_pointer_helpers_1.jsonPointerHelpers.get(openApiSpec, responseBodyFact.location.jsonPath),
        contentType,
        statusCode: statusCode,
        properties: createPropertyFactsWithRaw(bodyNode.fields, key, openApiSpec),
        schemas: createPropertyFactsWithRaw(bodyNode.schemas, key, openApiSpec),
    };
};
exports.createResponseBody = createResponseBody;
const createOperation = (endpoint, key, openApiSpec) => {
    const operationFact = endpoint[key];
    if (!operationFact) {
        return null;
    }
    const requests = [];
    const responses = new Map();
    for (const contentType of endpoint.request.bodies.keys()) {
        const request = (0, exports.createRequest)(endpoint.request, contentType, key, openApiSpec);
        if (request) {
            requests.push(request);
        }
    }
    for (const responseNode of endpoint.responses.values()) {
        const response = (0, exports.createResponse)(responseNode, key, openApiSpec);
        if (response) {
            responses.set(responseNode.statusCode, response);
        }
    }
    const security = (() => {
        const operationOverride = json_pointer_helpers_1.jsonPointerHelpers.tryGet(openApiSpec, json_pointer_helpers_1.jsonPointerHelpers.append(operationFact.location.jsonPath, 'security'));
        if (operationOverride.match)
            return operationOverride.value;
        const specLevel = json_pointer_helpers_1.jsonPointerHelpers.tryGet(openApiSpec, '/security');
        if (specLevel.match)
            return specLevel.value;
        return null;
    })();
    return {
        ...operationFact,
        polymorphicSchemas: endpoint.polymorphicSchemas,
        raw: json_pointer_helpers_1.jsonPointerHelpers.get(openApiSpec, operationFact.location.jsonPath),
        path: endpoint.path,
        method: endpoint.method,
        security,
        headerParameters: createFactsWithRaw(endpoint.headerParameters, key, openApiSpec),
        queryParameters: createFactsWithRaw(endpoint.queryParameters, key, openApiSpec),
        pathParameters: createFactsWithRaw(endpoint.pathParameters, key, openApiSpec),
        cookieParameters: createFactsWithRaw(endpoint.cookieParameters, key, openApiSpec),
        requests,
        responses,
    };
};
exports.createOperation = createOperation;
const createSpecification = (specificationNode, key, openApiSpec) => {
    const specificationFact = specificationNode[key];
    if (!specificationFact) {
        return null;
    }
    return {
        ...specificationFact,
        raw: openApiSpec,
    };
};
exports.createSpecification = createSpecification;
//# sourceMappingURL=data-constructors.js.map