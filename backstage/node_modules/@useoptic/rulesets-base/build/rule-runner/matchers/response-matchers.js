"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResponseHelpers = void 0;
const errors_1 = require("../../errors");
const utils_1 = require("./utils");
const createResponseHelpers = (addAssertion) => {
    const createAssertions = (isNot) => {
        const conditionPrefix = isNot ? 'not ' : '';
        return {
            get not() {
                return createAssertions(true);
            },
            hasResponseHeaderMatching: (name, reference, options = {}) => {
                const { strict = false } = options;
                addAssertion(conditionPrefix + 'have response header matching shape', (response) => {
                    const headerMatchingShapeAndName = [
                        ...response.headers.entries(),
                    ].find(([headerName, responseHeader]) => name === headerName &&
                        (0, utils_1.valuesMatcher)(reference, responseHeader.raw, strict));
                    if (isNot) {
                        if (headerMatchingShapeAndName) {
                            throw new errors_1.RuleError({
                                message: `Found a ${strict ? 'exact' : 'partial'} match in header parameters with name ${name}. Value to match: ${JSON.stringify(reference)}`,
                            });
                        }
                    }
                    else {
                        if (!headerMatchingShapeAndName) {
                            throw new errors_1.RuleError({
                                message: `Could not find a ${strict ? 'exact' : 'partial'} match in header parameters with name ${name}. Value to match: ${JSON.stringify(reference)}`,
                            });
                        }
                    }
                });
            },
        };
    };
    return createAssertions(false);
};
exports.createResponseHelpers = createResponseHelpers;
//# sourceMappingURL=response-matchers.js.map