"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runRequestRules = void 0;
const data_constructors_1 = require("./data-constructors");
const utils_1 = require("./utils");
const assertions_1 = require("./assertions");
const rule_filters_1 = require("./rule-filters");
const createRequestBodyResult = (assertionResult, request, operation, rule) => ({
    type: assertionResult.type,
    severity: assertionResult.severity,
    where: `${operation.method.toUpperCase()} ${operation.path} request body: ${request.contentType}`,
    isMust: true,
    change: assertionResult.changeOrFact,
    name: rule.name,
    condition: assertionResult.condition,
    passed: assertionResult.passed,
    exempted: assertionResult.exempted,
    received: assertionResult.received,
    expected: assertionResult.expected,
    error: assertionResult.error,
    docsLink: rule.docsLink,
    isShould: false,
});
const createRequestPropertyResult = (assertionResult, property, request, operation, rule) => ({
    type: assertionResult.type,
    severity: assertionResult.severity,
    where: `${operation.method.toUpperCase()} ${operation.path} request body: ${request.contentType} property: ${property.location.conceptualLocation.jsonSchemaTrail.join('/')}`,
    isMust: true,
    change: assertionResult.changeOrFact,
    name: rule.name,
    condition: assertionResult.condition,
    passed: assertionResult.passed,
    received: assertionResult.received,
    expected: assertionResult.expected,
    error: assertionResult.error,
    docsLink: rule.docsLink,
    isShould: false,
});
const runRequestRules = ({ specificationNode, operationNode, requestNode, rules, customRuleContext, beforeApiSpec, afterApiSpec, }) => {
    const results = [];
    const requestRules = (0, rule_filters_1.getRequestRules)(rules);
    const propertyRules = (0, rule_filters_1.getPropertyRules)(rules);
    const beforeSpecification = (0, data_constructors_1.createSpecification)(specificationNode, 'before', beforeApiSpec);
    const beforeOperation = (0, data_constructors_1.createOperation)(operationNode, 'before', beforeApiSpec);
    const afterSpecification = (0, data_constructors_1.createSpecification)(specificationNode, 'after', afterApiSpec);
    const afterOperation = (0, data_constructors_1.createOperation)(operationNode, 'after', afterApiSpec);
    // Runs rules on all requests - this will:
    // - run rules with values from the before spec (this will trigger `removed` rules)
    // - run rules with values from the after spec (this will trigger `added`, `changed` and `requirement` rules)
    // for each rule:
    // - if there is a matches block, check if the current operation matches the rule `matches` condition
    // - if yes, run the user's defined `rule`. for requests, this runs against the request body and request properties
    for (const requestRule of requestRules) {
        if (beforeOperation && beforeSpecification) {
            const ruleContext = (0, utils_1.createRuleContextWithOperation)({
                node: specificationNode,
                before: beforeSpecification,
                after: afterSpecification,
            }, {
                node: operationNode,
                before: beforeOperation,
                after: afterOperation,
            }, customRuleContext);
            const requestAssertions = (0, assertions_1.createRequestAssertions)(requestRule.severity);
            // Register the user's rule definition, this is collected in the requestAssertions object
            requestRule.rule(requestAssertions, ruleContext);
            for (const contentType of requestNode.bodies.keys()) {
                const beforeRequest = (0, data_constructors_1.createRequest)(requestNode, contentType, 'before', beforeApiSpec);
                if (beforeRequest) {
                    const matches = !requestRule.matches ||
                        requestRule.matches(beforeRequest, ruleContext);
                    const exempted = (0, utils_1.isExempted)(beforeRequest.raw, requestRule.name);
                    if (matches) {
                        // Run the user's rules that have been stored in requestAssertions for body
                        results.push(...requestAssertions.body
                            .runBefore(beforeRequest, requestNode.bodies.get(contentType)?.change || null, exempted)
                            .map((assertionResult) => createRequestBodyResult(assertionResult, beforeRequest, beforeOperation, requestRule)));
                        for (const [key, property] of beforeRequest.properties.entries()) {
                            const propertyChange = requestNode.bodies.get(contentType)?.fields.get(key)?.change ||
                                null;
                            // Run the user's rules that have been stored in requestAssertions for property
                            results.push(...requestAssertions.property
                                .runBefore(property, propertyChange, exempted)
                                .map((assertionResult) => createRequestPropertyResult(assertionResult, property, beforeRequest, beforeOperation, requestRule)));
                        }
                        for (const [key, schema] of beforeRequest.schemas.entries()) {
                            const propertyChange = requestNode.bodies
                                .get(beforeRequest.contentType)
                                ?.schemas.get(key)?.change || null;
                            // Run the user's rules that have been stored in responseAssertions for property
                            results.push(...requestAssertions.schema
                                .runBefore(schema, propertyChange, exempted)
                                .map((assertionResult) => createRequestPropertyResult(assertionResult, schema, beforeRequest, beforeOperation, requestRule)));
                        }
                    }
                }
            }
        }
        if (afterOperation && afterSpecification) {
            const ruleContext = (0, utils_1.createRuleContextWithOperation)({
                node: specificationNode,
                before: beforeSpecification,
                after: afterSpecification,
            }, {
                node: operationNode,
                before: beforeOperation,
                after: afterOperation,
            }, customRuleContext);
            const requestAssertions = (0, assertions_1.createRequestAssertions)(requestRule.severity);
            // Register the user's rule definition, this is collected in the requestAssertions object
            requestRule.rule(requestAssertions, ruleContext);
            for (const contentType of requestNode.bodies.keys()) {
                const maybeBeforeRequest = (0, data_constructors_1.createRequest)(requestNode, contentType, 'before', beforeApiSpec);
                const afterRequest = (0, data_constructors_1.createRequest)(requestNode, contentType, 'after', afterApiSpec);
                if (afterRequest) {
                    const matches = !requestRule.matches ||
                        requestRule.matches(afterRequest, ruleContext);
                    const exempted = (0, utils_1.isExempted)(afterRequest.raw, requestRule.name);
                    if (matches) {
                        // Run the user's rules that have been stored in requestAssertions for body
                        results.push(...requestAssertions.body
                            .runAfter(maybeBeforeRequest, afterRequest, requestNode.bodies.get(contentType)?.change || null, exempted)
                            .map((assertionResult) => createRequestBodyResult(assertionResult, afterRequest, afterOperation, requestRule)));
                        for (const [key, property] of afterRequest.properties.entries()) {
                            const maybeBeforeProperty = maybeBeforeRequest?.properties.get(key) || null;
                            const propertyChange = requestNode.bodies.get(contentType)?.fields.get(key)?.change ||
                                null;
                            // Run the user's rules that have been stored in requestAssertions for property
                            results.push(...requestAssertions.property
                                .runAfter(maybeBeforeProperty, property, propertyChange, exempted)
                                .map((assertionResult) => createRequestPropertyResult(assertionResult, property, afterRequest, afterOperation, requestRule)));
                        }
                        for (const [key, schema] of afterRequest.schemas.entries()) {
                            const maybeBeforeSchema = maybeBeforeRequest?.schemas.get(key) || null;
                            const propertyChange = requestNode.bodies
                                .get(afterRequest.contentType)
                                ?.schemas.get(key)?.change || null;
                            // Run the user's rules that have been stored in responseAssertions for property
                            results.push(...requestAssertions.schema
                                .runAfter(maybeBeforeSchema, schema, propertyChange, exempted)
                                .map((assertionResult) => createRequestPropertyResult(assertionResult, schema, afterRequest, afterOperation, requestRule)));
                        }
                    }
                }
            }
        }
    }
    for (const propertyRule of propertyRules) {
        if (beforeOperation && beforeSpecification) {
            const ruleContext = (0, utils_1.createRuleContextWithOperation)({
                node: specificationNode,
                before: beforeSpecification,
                after: afterSpecification,
            }, {
                node: operationNode,
                before: beforeOperation,
                after: afterOperation,
            }, customRuleContext);
            const propertyAssertions = (0, assertions_1.createPropertyAssertions)(propertyRule.severity);
            // // Register the user's rule definition, this is collected in the propertyAssertions object
            propertyRule.rule(propertyAssertions, ruleContext);
            for (const contentType of requestNode.bodies.keys()) {
                const beforeRequest = (0, data_constructors_1.createRequest)(requestNode, contentType, 'before', beforeApiSpec);
                if (beforeRequest) {
                    for (const [key, property] of beforeRequest.properties.entries()) {
                        const propertyChange = requestNode.bodies.get(contentType)?.fields.get(key)?.change ||
                            null;
                        const matches = !propertyRule.matches ||
                            propertyRule.matches(property, ruleContext);
                        const exempted = (0, utils_1.isExempted)(property.raw, propertyRule.name);
                        if (matches) {
                            results.push(...propertyAssertions
                                .runBefore(property, propertyChange, exempted)
                                .map((assertionResult) => createRequestPropertyResult(assertionResult, property, beforeRequest, beforeOperation, propertyRule)));
                        }
                    }
                }
            }
        }
        if (afterOperation && afterSpecification) {
            const ruleContext = (0, utils_1.createRuleContextWithOperation)({
                node: specificationNode,
                before: beforeSpecification,
                after: afterSpecification,
            }, {
                node: operationNode,
                before: beforeOperation,
                after: afterOperation,
            }, customRuleContext);
            // Register the user's rule definition, this is collected in the propertyAssertions object
            const propertyAssertions = (0, assertions_1.createPropertyAssertions)(propertyRule.severity);
            // Run the user's rules that have been stored in propertyAssertions
            propertyRule.rule(propertyAssertions, ruleContext);
            for (const contentType of requestNode.bodies.keys()) {
                const maybeBeforeRequest = (0, data_constructors_1.createRequest)(requestNode, contentType, 'before', beforeApiSpec);
                const afterRequest = (0, data_constructors_1.createRequest)(requestNode, contentType, 'after', afterApiSpec);
                if (afterRequest) {
                    for (const [key, property] of afterRequest.properties.entries()) {
                        const maybeBeforeProperty = maybeBeforeRequest?.properties.get(key) || null;
                        const propertyChange = requestNode.bodies.get(afterRequest.contentType)?.fields.get(key)
                            ?.change || null;
                        const matches = !propertyRule.matches ||
                            propertyRule.matches(property, ruleContext);
                        const exempted = (0, utils_1.isExempted)(property.raw, propertyRule.name);
                        if (matches) {
                            // Run the user's rules that have been stored in propertyAssertions for property
                            results.push(...propertyAssertions
                                .runAfter(maybeBeforeProperty, property, propertyChange, exempted)
                                .map((assertionResult) => createRequestPropertyResult(assertionResult, property, afterRequest, afterOperation, propertyRule)));
                        }
                    }
                }
            }
        }
    }
    return results;
};
exports.runRequestRules = runRequestRules;
//# sourceMappingURL=request.js.map