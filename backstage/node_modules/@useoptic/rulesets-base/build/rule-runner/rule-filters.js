"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropertyRules = exports.getResponseBodyRules = exports.getResponseRules = exports.getRequestRules = exports.getOperationRules = exports.getSpecificationRules = void 0;
const rules_1 = require("../rules");
const getRulesetRuleId = (rulesetName, ruleName) => `${rulesetName}:${ruleName}`;
const createRulesetMatcher = ({ ruleMatcher: maybeRuleMatcher, rulesetMatcher: maybeRulesetMatcher, }) => (item, ruleContext) => {
    const ruleMatcher = maybeRuleMatcher || (() => true);
    const rulesetMatcher = maybeRulesetMatcher || (() => true);
    return ruleMatcher(item, ruleContext) && rulesetMatcher(ruleContext);
};
const getRuleAliases = (rulesetName, ruleName) => [
    getRulesetRuleId(rulesetName, ruleName),
    rulesetName,
];
const getSpecificationRules = (rules) => {
    const specificationRules = [];
    for (const ruleOrRuleset of rules) {
        if (rules_1.SpecificationRule.isInstance(ruleOrRuleset)) {
            specificationRules.push({
                ...ruleOrRuleset,
                aliases: [],
            });
        }
        if (rules_1.Ruleset.isInstance(ruleOrRuleset)) {
            for (const rule of ruleOrRuleset.rules) {
                if (rules_1.SpecificationRule.isInstance(rule)) {
                    specificationRules.push({
                        ...rule,
                        matches: createRulesetMatcher({
                            ruleMatcher: rule.matches,
                            rulesetMatcher: ruleOrRuleset.matches,
                        }),
                        aliases: getRuleAliases(ruleOrRuleset.name, rule.name),
                        docsLink: rule.docsLink || ruleOrRuleset.docsLink,
                    });
                }
            }
        }
    }
    return specificationRules;
};
exports.getSpecificationRules = getSpecificationRules;
const getOperationRules = (rules) => {
    const operationRules = [];
    for (const ruleOrRuleset of rules) {
        if (rules_1.OperationRule.isInstance(ruleOrRuleset)) {
            operationRules.push({
                ...ruleOrRuleset,
                aliases: [],
            });
        }
        if (rules_1.Ruleset.isInstance(ruleOrRuleset)) {
            for (const rule of ruleOrRuleset.rules) {
                if (rules_1.OperationRule.isInstance(rule)) {
                    operationRules.push({
                        ...rule,
                        matches: createRulesetMatcher({
                            ruleMatcher: rule.matches,
                            rulesetMatcher: ruleOrRuleset.matches,
                        }),
                        aliases: getRuleAliases(ruleOrRuleset.name, rule.name),
                        docsLink: rule.docsLink || ruleOrRuleset.docsLink,
                    });
                }
            }
        }
    }
    return operationRules;
};
exports.getOperationRules = getOperationRules;
const getRequestRules = (rules) => {
    const requestRules = [];
    for (const ruleOrRuleset of rules) {
        if (rules_1.RequestRule.isInstance(ruleOrRuleset)) {
            requestRules.push({
                ...ruleOrRuleset,
                aliases: [],
            });
        }
        if (rules_1.Ruleset.isInstance(ruleOrRuleset)) {
            for (const rule of ruleOrRuleset.rules) {
                if (rules_1.RequestRule.isInstance(rule)) {
                    requestRules.push({
                        ...rule,
                        matches: createRulesetMatcher({
                            ruleMatcher: rule.matches,
                            rulesetMatcher: ruleOrRuleset.matches,
                        }),
                        aliases: getRuleAliases(ruleOrRuleset.name, rule.name),
                        docsLink: rule.docsLink || ruleOrRuleset.docsLink,
                    });
                }
            }
        }
    }
    return requestRules;
};
exports.getRequestRules = getRequestRules;
const getResponseRules = (rules) => {
    const responseRule = [];
    for (const ruleOrRuleset of rules) {
        if (rules_1.ResponseRule.isInstance(ruleOrRuleset)) {
            responseRule.push({
                ...ruleOrRuleset,
                aliases: [],
            });
        }
        if (rules_1.Ruleset.isInstance(ruleOrRuleset)) {
            for (const rule of ruleOrRuleset.rules) {
                if (rules_1.ResponseRule.isInstance(rule)) {
                    responseRule.push({
                        ...rule,
                        matches: createRulesetMatcher({
                            ruleMatcher: rule.matches,
                            rulesetMatcher: ruleOrRuleset.matches,
                        }),
                        aliases: getRuleAliases(ruleOrRuleset.name, rule.name),
                        docsLink: rule.docsLink || ruleOrRuleset.docsLink,
                    });
                }
            }
        }
    }
    return responseRule;
};
exports.getResponseRules = getResponseRules;
const getResponseBodyRules = (rules) => {
    const responseRule = [];
    for (const ruleOrRuleset of rules) {
        if (rules_1.ResponseBodyRule.isInstance(ruleOrRuleset)) {
            responseRule.push({
                ...ruleOrRuleset,
                aliases: [],
            });
        }
        if (rules_1.Ruleset.isInstance(ruleOrRuleset)) {
            for (const rule of ruleOrRuleset.rules) {
                if (rules_1.ResponseBodyRule.isInstance(rule)) {
                    responseRule.push({
                        ...rule,
                        matches: createRulesetMatcher({
                            ruleMatcher: rule.matches,
                            rulesetMatcher: ruleOrRuleset.matches,
                        }),
                        aliases: getRuleAliases(ruleOrRuleset.name, rule.name),
                        docsLink: rule.docsLink || ruleOrRuleset.docsLink,
                    });
                }
            }
        }
    }
    return responseRule;
};
exports.getResponseBodyRules = getResponseBodyRules;
const getPropertyRules = (rules) => {
    const propertyRules = [];
    for (const ruleOrRuleset of rules) {
        if (rules_1.PropertyRule.isInstance(ruleOrRuleset)) {
            propertyRules.push({
                ...ruleOrRuleset,
                aliases: [],
            });
        }
        if (rules_1.Ruleset.isInstance(ruleOrRuleset)) {
            for (const rule of ruleOrRuleset.rules) {
                if (rules_1.PropertyRule.isInstance(rule)) {
                    propertyRules.push({
                        ...rule,
                        matches: createRulesetMatcher({
                            ruleMatcher: rule.matches,
                            rulesetMatcher: ruleOrRuleset.matches,
                        }),
                        aliases: getRuleAliases(ruleOrRuleset.name, rule.name),
                        docsLink: rule.docsLink || ruleOrRuleset.docsLink,
                    });
                }
            }
        }
    }
    return propertyRules;
};
exports.getPropertyRules = getPropertyRules;
//# sourceMappingURL=rule-filters.js.map