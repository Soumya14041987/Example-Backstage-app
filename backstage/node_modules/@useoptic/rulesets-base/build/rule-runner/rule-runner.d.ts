import { IFact, IChange, Result, ObjectDiff, RuleResult } from '@useoptic/openapi-utilities';
import { RulesetDefinition as SpectralRulesetDefinition } from '@stoplight/spectral-core';
import { ExternalRule, Rule, Ruleset } from '../rules';
import { OpenAPIDocument } from '..';
type SpectralRules = Extract<SpectralRulesetDefinition, {
    extends: any;
    rules: any;
}>['rules'];
export declare class RuleRunner {
    private rules;
    constructor(rules: (Ruleset | Rule | ExternalRule)[]);
    runSpectralRules({ ruleset, nextFacts, nextJsonLike, }: {
        ruleset: SpectralRules;
        nextFacts: IFact[];
        nextJsonLike: OpenAPIDocument;
    }): Promise<Result[]>;
    runRulesWithFacts(inputs: {
        context: any;
        nextFacts: IFact[];
        currentFacts: IFact[];
        changelog: IChange[];
        nextJsonLike: OpenAPIDocument;
        currentJsonLike: OpenAPIDocument;
    }): Promise<Result[]>;
    runRules(inputs: {
        context: any;
        diffs: ObjectDiff[];
        fromSpec: OpenAPIDocument;
        toSpec: OpenAPIDocument;
    }): Promise<RuleResult[]>;
}
export {};
//# sourceMappingURL=rule-runner.d.ts.map