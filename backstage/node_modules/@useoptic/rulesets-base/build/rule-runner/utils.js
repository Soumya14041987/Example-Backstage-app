"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExempted = exports.createRuleContextWithOperation = exports.createRuleContextWithoutOperation = void 0;
const openapi_utilities_1 = require("@useoptic/openapi-utilities");
const semver_1 = __importDefault(require("semver"));
const getSpecificationChange = (specificationNode) => {
    return specificationNode.after?.value['x-optic-ci-empty-spec'] === true
        ? 'removed'
        : specificationNode.before?.value['x-optic-ci-empty-spec'] === true
            ? 'added'
            : specificationNode.change?.changeType || null;
};
const createRuleContextWithoutOperation = (specification, custom) => {
    const specificationChange = getSpecificationChange(specification.node);
    const beforeVersion = specification.before?.raw.info.version || '0.0.0';
    const afterVersion = specification.after?.raw.info.version || '0.0.0';
    let versionChange;
    try {
        versionChange = semver_1.default.diff(beforeVersion, afterVersion);
    }
    catch (e) {
        versionChange = null;
    }
    return {
        custom,
        specification: {
            ...(specificationChange === 'removed'
                ? specification.before
                : specification.after),
            change: specificationChange,
            versionChange,
        },
        operation: {
            location: {
                jsonPath: '',
                conceptualLocation: { path: '', method: '' },
                conceptualPath: [],
                kind: openapi_utilities_1.OpenApiKind.Operation,
            },
            polymorphicSchemas: { before: new Set(), after: new Set() },
            value: { pathPattern: '', method: '' },
            path: '',
            method: '',
            raw: {
                responses: {},
            },
            security: null,
            change: null,
            queryParameters: new Map(),
            pathParameters: new Map(),
            headerParameters: new Map(),
            cookieParameters: new Map(),
            requests: [],
            responses: new Map(),
        },
    };
};
exports.createRuleContextWithoutOperation = createRuleContextWithoutOperation;
const createRuleContextWithOperation = (specification, operation, custom) => {
    const specificationChange = getSpecificationChange(specification.node);
    const beforeVersion = specification.before?.raw.info.version || '0.0.0';
    const afterVersion = specification.after?.raw.info.version || '0.0.0';
    let versionChange;
    try {
        versionChange = semver_1.default.diff(beforeVersion, afterVersion);
    }
    catch (e) {
        versionChange = null;
    }
    if (specificationChange === 'removed') {
        return {
            custom,
            specification: {
                ...specification.before,
                change: specificationChange,
                versionChange,
            },
            operation: {
                ...operation.before,
                change: specificationChange,
            },
        };
    }
    else {
        return {
            custom,
            specification: {
                ...specification.after,
                change: specificationChange,
                versionChange,
            },
            operation: {
                ...(operation.after ? operation.after : operation.before),
                change: operation.node.change?.changeType || null,
            },
        };
    }
};
exports.createRuleContextWithOperation = createRuleContextWithOperation;
const isExempted = (raw, ruleName) => {
    const exemptions = raw['x-optic-exemptions'];
    return (exemptions === ruleName ||
        (Array.isArray(exemptions) && exemptions.includes(ruleName)));
};
exports.isExempted = isExempted;
//# sourceMappingURL=utils.js.map