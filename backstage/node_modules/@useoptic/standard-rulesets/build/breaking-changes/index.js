"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BreakingChangesRuleset = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const preventOperationRemoval_1 = require("./preventOperationRemoval");
const preventRequestPropertyRequired_1 = require("./preventRequestPropertyRequired");
const preventRequestPropertyTypeChange_1 = require("./preventRequestPropertyTypeChange");
const preventResponsePropertyOptional_1 = require("./preventResponsePropertyOptional");
const preventResponsePropertyRemoval_1 = require("./preventResponsePropertyRemoval");
const preventResponsePropertyTypeChange_1 = require("./preventResponsePropertyTypeChange");
const preventResponseStatusCodeRemoval_1 = require("./preventResponseStatusCodeRemoval");
const preventEnumBreak_1 = require("./preventEnumBreak");
const preventNewRequiredParameter_1 = require("./preventNewRequiredParameter");
const preventRequireExistingParameter_1 = require("./preventRequireExistingParameter");
const preventParameterTypeChange_1 = require("./preventParameterTypeChange");
const ajv_1 = __importDefault(require("ajv"));
const openapi_utilities_1 = require("@useoptic/openapi-utilities");
const preventRequestExpandingWithUnionTypes_1 = require("./preventRequestExpandingWithUnionTypes");
const preventResponseNarrowingWithUnionType_1 = require("./preventResponseNarrowingWithUnionType");
const utils_1 = require("../utils");
const ajv = new ajv_1.default();
const configSchema = {
    type: 'object',
    properties: {
        exclude_operations_with_extension: {
            oneOf: [{ type: 'string' }, { type: 'array', items: { type: 'string' } }],
        },
        skip_when_major_version_changes: {
            type: 'boolean',
        },
        docs_link: {
            type: 'string',
        },
        severity: {
            type: 'string',
            enum: openapi_utilities_1.SeverityTextOptions,
        },
    },
};
const validateConfigSchema = ajv.compile(configSchema);
class BreakingChangesRuleset extends rulesets_base_1.Ruleset {
    static async fromOpticConfig(config) {
        const result = validateConfigSchema(config);
        if (!result) {
            return `- ${ajv.errorsText(validateConfigSchema.errors, {
                separator: '\n- ',
                dataVar: 'ruleset/breaking-changes',
            })}`;
        }
        const validatedConfig = config;
        const shouldCheckSpecVersion = validatedConfig.hasOwnProperty('skip_when_major_version_changes')
            ? validatedConfig.skip_when_major_version_changes
            : true;
        const constructorConfig = {
            severity: validatedConfig.severity,
        };
        constructorConfig.matches = (context) => {
            if (shouldCheckSpecVersion &&
                context.specification.versionChange === 'major')
                return false;
            if (validatedConfig.exclude_operations_with_extension) {
                return (0, utils_1.excludeOperationWithExtensionMatches)(validatedConfig.exclude_operations_with_extension)(context);
            }
            return true;
        };
        if (validatedConfig.docs_link !== undefined) {
            constructorConfig.docsLink = validatedConfig.docs_link;
        }
        return new BreakingChangesRuleset(constructorConfig);
    }
    constructor(config = {}) {
        const breakingChangesRules = [
            (0, preventEnumBreak_1.preventCookieParameterEnumBreak)(),
            (0, preventParameterTypeChange_1.preventCookieParameterTypeChange)(),
            (0, preventEnumBreak_1.preventHeaderParameterEnumBreak)(),
            (0, preventEnumBreak_1.preventPropertyEnumBreak)(),
            (0, preventParameterTypeChange_1.preventHeaderParameterTypeChange)(),
            (0, preventNewRequiredParameter_1.preventNewRequiredCookieParameter)(),
            (0, preventNewRequiredParameter_1.preventNewRequiredHeaderParameter)(),
            (0, preventNewRequiredParameter_1.preventNewRequiredQueryParameter)(),
            (0, preventOperationRemoval_1.preventOperationRemoval)(),
            (0, preventEnumBreak_1.preventPathParameterEnumBreak)(),
            (0, preventParameterTypeChange_1.preventPathParameterTypeChange)(),
            (0, preventEnumBreak_1.preventQueryParameterEnumBreak)(),
            (0, preventParameterTypeChange_1.preventQueryParameterTypeChange)(),
            (0, preventRequestPropertyRequired_1.preventRequestPropertyRequired)(),
            (0, preventRequestPropertyTypeChange_1.preventRequestPropertyTypeChange)(),
            (0, preventRequireExistingParameter_1.preventRequireExistingCookieParameter)(),
            (0, preventRequireExistingParameter_1.preventRequireExistingHeaderParameter)(),
            (0, preventRequireExistingParameter_1.preventRequireExistingQueryParameter)(),
            (0, preventResponsePropertyOptional_1.preventResponsePropertyOptional)(),
            (0, preventResponsePropertyRemoval_1.preventResponsePropertyRemoval)(),
            (0, preventResponsePropertyTypeChange_1.preventResponsePropertyTypeChange)(),
            (0, preventResponseStatusCodeRemoval_1.preventResponseStatusCodeRemoval)(),
            (0, preventRequestExpandingWithUnionTypes_1.preventRequestExpandingInUnionTypes)(),
            (0, preventResponseNarrowingWithUnionType_1.preventResponseNarrowingInUnionTypes)(),
        ];
        super({
            ...config,
            name: 'Breaking changes ruleset',
            rules: breakingChangesRules,
            severity: config.severity,
        });
    }
}
exports.BreakingChangesRuleset = BreakingChangesRuleset;
//# sourceMappingURL=index.js.map