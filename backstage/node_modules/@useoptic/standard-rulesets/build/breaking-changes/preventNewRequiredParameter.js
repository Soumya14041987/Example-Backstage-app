"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preventNewRequiredHeaderParameter = exports.preventNewRequiredCookieParameter = exports.preventNewRequiredQueryParameter = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const getOperationAssertionsParameter_1 = require("./helpers/getOperationAssertionsParameter");
const getName = (parameterIn) => `prevent new required ${parameterIn} parameters`;
const getPreventNewRequiredParameter = (parameterIn) => new rulesets_base_1.OperationRule({
    name: getName(parameterIn),
    matches: (_operation, ruleContext) => ruleContext.operation.change !== 'added', // rule doesn't apply for new operations
    rule: (operationAssertions, _ruleContext) => {
        const parameter = (0, getOperationAssertionsParameter_1.getOperationAssertionsParameter)(operationAssertions, parameterIn);
        parameter.added((parameter) => {
            if (parameter.value.required) {
                throw new rulesets_base_1.RuleError({
                    message: `cannot add required ${parameterIn} parameter ${parameter.value.name} to an existing operation. This is a breaking change.`,
                });
            }
        });
    },
});
const preventNewRequiredQueryParameter = () => getPreventNewRequiredParameter('query');
exports.preventNewRequiredQueryParameter = preventNewRequiredQueryParameter;
const preventNewRequiredCookieParameter = () => getPreventNewRequiredParameter('cookie');
exports.preventNewRequiredCookieParameter = preventNewRequiredCookieParameter;
const preventNewRequiredHeaderParameter = () => getPreventNewRequiredParameter('header');
exports.preventNewRequiredHeaderParameter = preventNewRequiredHeaderParameter;
//# sourceMappingURL=preventNewRequiredParameter.js.map