import { OperationRule } from '@useoptic/rulesets-base';
import { ParameterIn } from './helpers/types';
declare const getName: <P extends ParameterIn>(parameterIn: P) => `prevent ${P} parameters type changes`;
export type PreventParameterTypeChangeRuleName = ReturnType<typeof getName>;
export declare const preventQueryParameterTypeChange: () => OperationRule<"prevent path parameters type changes" | "prevent cookie parameters type changes" | "prevent query parameters type changes" | "prevent header parameters type changes">;
export declare const preventCookieParameterTypeChange: () => OperationRule<"prevent path parameters type changes" | "prevent cookie parameters type changes" | "prevent query parameters type changes" | "prevent header parameters type changes">;
export declare const preventPathParameterTypeChange: () => OperationRule<"prevent path parameters type changes" | "prevent cookie parameters type changes" | "prevent query parameters type changes" | "prevent header parameters type changes">;
export declare const preventHeaderParameterTypeChange: () => OperationRule<"prevent path parameters type changes" | "prevent cookie parameters type changes" | "prevent query parameters type changes" | "prevent header parameters type changes">;
export {};
//# sourceMappingURL=preventParameterTypeChange.d.ts.map