"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preventHeaderParameterTypeChange = exports.preventPathParameterTypeChange = exports.preventCookieParameterTypeChange = exports.preventQueryParameterTypeChange = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const getOperationAssertionsParameter_1 = require("./helpers/getOperationAssertionsParameter");
const type_change_1 = require("./helpers/type-change");
const getName = (parameterIn) => `prevent ${parameterIn} parameters type changes`;
const getPreventParameterTypeChange = (parameterIn) => new rulesets_base_1.OperationRule({
    name: getName(parameterIn),
    rule: (operationAssertions, _ruleContext) => {
        const parameter = (0, getOperationAssertionsParameter_1.getOperationAssertionsParameter)(operationAssertions, parameterIn);
        parameter.changed((before, after) => {
            // TODO: this has some possible false positives as something could change from having a type
            //  to being a oneOf, anyOf, or allOf
            if (before.value.schema &&
                'type' in before.value.schema &&
                after.value.schema &&
                'type' in after.value.schema &&
                (0, type_change_1.computeEffectiveTypeChange)(before.value.schema.type, after.value.schema.type).narrowed) {
                throw new rulesets_base_1.RuleError({
                    message: `expected ${parameterIn} parameter '${after.value.name}' not be narrowed. This is a breaking change.`,
                });
            }
        });
    },
});
const preventQueryParameterTypeChange = () => getPreventParameterTypeChange('query');
exports.preventQueryParameterTypeChange = preventQueryParameterTypeChange;
const preventCookieParameterTypeChange = () => getPreventParameterTypeChange('cookie');
exports.preventCookieParameterTypeChange = preventCookieParameterTypeChange;
const preventPathParameterTypeChange = () => getPreventParameterTypeChange('path');
exports.preventPathParameterTypeChange = preventPathParameterTypeChange;
const preventHeaderParameterTypeChange = () => getPreventParameterTypeChange('header');
exports.preventHeaderParameterTypeChange = preventHeaderParameterTypeChange;
//# sourceMappingURL=preventParameterTypeChange.js.map