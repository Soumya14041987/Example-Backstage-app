"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preventRequireExistingHeaderParameter = exports.preventRequireExistingCookieParameter = exports.preventRequireExistingQueryParameter = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const getOperationAssertionsParameter_1 = require("./helpers/getOperationAssertionsParameter");
const getRuleName = (parameterIn) => `prevent requiring existing ${parameterIn} parameters`;
const getPreventRequireExistingParameter = (parameterIn) => new rulesets_base_1.OperationRule({
    name: getRuleName(parameterIn),
    rule: (operationAssertions, _ruleContext) => {
        const parameter = (0, getOperationAssertionsParameter_1.getOperationAssertionsParameter)(operationAssertions, parameterIn);
        parameter.changed((before, after) => {
            if (!before.value.required && after.value.required) {
                throw new rulesets_base_1.RuleError({
                    message: `cannot make optional ${parameterIn} parameter '${after.value.name}' required. This is a breaking change.`,
                });
            }
        });
    },
});
const preventRequireExistingQueryParameter = () => getPreventRequireExistingParameter('query');
exports.preventRequireExistingQueryParameter = preventRequireExistingQueryParameter;
const preventRequireExistingCookieParameter = () => getPreventRequireExistingParameter('cookie');
exports.preventRequireExistingCookieParameter = preventRequireExistingCookieParameter;
const preventRequireExistingHeaderParameter = () => getPreventRequireExistingParameter('header');
exports.preventRequireExistingHeaderParameter = preventRequireExistingHeaderParameter;
//# sourceMappingURL=preventRequireExistingParameter.js.map