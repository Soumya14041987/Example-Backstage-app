"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preventResponsePropertyRemoval = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const unions_1 = require("./helpers/unions");
const preventResponsePropertyRemoval = () => new rulesets_base_1.ResponseBodyRule({
    name: 'prevent removing response property',
    rule: (responseAssertions, ruleContext) => {
        responseAssertions.property.removed((property) => {
            const afterPolymorphicSchemas = [
                ...ruleContext.operation.polymorphicSchemas.after.values(),
            ];
            // Children of union properties / transitions are handled in a separate rule
            if ((0, unions_1.isInUnionProperty)(property.location.jsonPath) ||
                (0, unions_1.schemaIsUnion)(property.value.flatSchema) ||
                afterPolymorphicSchemas.some((schemaPath) => property.location.jsonPath.startsWith(schemaPath))) {
                return;
            }
            throw new rulesets_base_1.RuleError({
                message: `cannot remove response property '${property.value.key}'. This is a breaking change.`,
            });
        });
    },
});
exports.preventResponsePropertyRemoval = preventResponsePropertyRemoval;
//# sourceMappingURL=preventResponsePropertyRemoval.js.map