"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentationRuleset = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const openapi_utilities_1 = require("@useoptic/openapi-utilities");
const ajv_1 = __importDefault(require("ajv"));
const constants_1 = require("./constants");
const requireOperationDescription_1 = require("./requireOperationDescription");
const requireOperationId_1 = require("./requireOperationId");
const requireOperationSummary_1 = require("./requireOperationSummary");
const requirePropertyDescriptions_1 = require("./requirePropertyDescriptions");
const utils_1 = require("../utils");
const ajv = new ajv_1.default();
const configSchema = {
    type: 'object',
    properties: {
        exclude_operations_with_extension: {
            oneOf: [{ type: 'string' }, { type: 'array', items: { type: 'string' } }],
        },
        severity: {
            type: 'string',
            enum: openapi_utilities_1.SeverityTextOptions,
        },
        docs_link: {
            type: 'string',
        },
        require_property_descriptions: {
            type: 'boolean',
        },
        require_operation_summary: {
            type: 'boolean',
        },
        require_operation_description: {
            type: 'boolean',
        },
        require_operation_id: {
            type: 'boolean',
        },
        required_on: {
            type: 'string',
            enum: constants_1.appliesWhen,
        },
    },
};
const validateConfigSchema = ajv.compile(configSchema);
class DocumentationRuleset extends rulesets_base_1.Ruleset {
    static async fromOpticConfig(config) {
        const result = validateConfigSchema(config);
        if (!result) {
            return `- ${ajv.errorsText(validateConfigSchema.errors, {
                separator: '\n- ',
                dataVar: 'ruleset/naming',
            })}`;
        }
        const validatedConfig = config;
        let matches = undefined;
        if (validatedConfig.exclude_operations_with_extension !== undefined) {
            matches = (0, utils_1.excludeOperationWithExtensionMatches)(validatedConfig.exclude_operations_with_extension);
        }
        return new DocumentationRuleset({
            required_on: validatedConfig.required_on ?? 'always',
            docsLink: validatedConfig.docs_link,
            matches,
            severity: validatedConfig.severity,
            require_property_descriptions: validatedConfig.require_property_descriptions,
            require_operation_summary: validatedConfig.require_operation_summary,
            require_operation_description: validatedConfig.require_operation_description,
            require_operation_id: validatedConfig.require_operation_id,
        });
    }
    constructor(config) {
        const rules = [];
        if (config.require_property_descriptions) {
            rules.push((0, requirePropertyDescriptions_1.requirePropertyDescription)(config.required_on));
        }
        if (config.require_operation_summary) {
            rules.push((0, requireOperationSummary_1.requireOperationSummary)(config.required_on));
        }
        if (config.require_operation_description) {
            rules.push((0, requireOperationDescription_1.requireOperationDescription)(config.required_on));
        }
        if (config.require_operation_id) {
            rules.push((0, requireOperationId_1.requireOperationId)(config.required_on));
        }
        super({
            ...config,
            name: 'Documentation ruleset',
            rules: rules,
            matches: config.matches,
            docsLink: config.docsLink,
            severity: config.severity,
        });
    }
}
exports.DocumentationRuleset = DocumentationRuleset;
//# sourceMappingURL=index.js.map