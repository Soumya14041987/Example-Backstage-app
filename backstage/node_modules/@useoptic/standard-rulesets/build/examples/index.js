"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExamplesRuleset = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const openapi_utilities_1 = require("@useoptic/openapi-utilities");
const ajv_1 = __importDefault(require("ajv"));
const constants_1 = require("./constants");
const requireExample_1 = require("./requireExample");
const requireValidExamples_1 = require("./requireValidExamples");
const utils_1 = require("../utils");
const ajv = new ajv_1.default();
const configSchema = {
    type: 'object',
    properties: {
        exclude_operations_with_extension: {
            oneOf: [{ type: 'string' }, { type: 'array', items: { type: 'string' } }],
        },
        severity: {
            type: 'string',
            enum: openapi_utilities_1.SeverityTextOptions,
        },
        docs_link: {
            type: 'string',
        },
        require_request_examples: {
            type: 'boolean',
        },
        require_response_examples: {
            type: 'boolean',
        },
        require_parameter_examples: {
            type: 'boolean',
        },
        required_on: {
            type: 'string',
            enum: constants_1.appliesWhen,
        },
    },
};
const validateConfigSchema = ajv.compile(configSchema);
class ExamplesRuleset extends rulesets_base_1.Ruleset {
    static async fromOpticConfig(config, { specVersion } = {}) {
        const result = validateConfigSchema(config);
        if (!result) {
            return `- ${ajv.errorsText(validateConfigSchema.errors, {
                separator: '\n- ',
                dataVar: 'ruleset/examples',
            })}`;
        }
        const validatedConfig = config;
        const constructorConfig = {
            ...validatedConfig,
            spec_version: specVersion,
            severity: validatedConfig.severity,
        };
        if (validatedConfig.exclude_operations_with_extension !== undefined) {
            constructorConfig.matches = (0, utils_1.excludeOperationWithExtensionMatches)(validatedConfig.exclude_operations_with_extension);
        }
        if (validatedConfig.docs_link !== undefined) {
            constructorConfig.docsLink = validatedConfig.docs_link;
        }
        return new ExamplesRuleset(constructorConfig);
    }
    constructor(config) {
        const specVersion = config.spec_version ?? '3.1.x';
        const customAjv = (0, requireValidExamples_1.defaultAjv)(specVersion);
        if (config.configureAjv) {
            config.configureAjv(customAjv);
        }
        const rules = [
            (0, requireValidExamples_1.requireValidResponseExamples)(customAjv),
            (0, requireValidExamples_1.requirePropertyExamplesMatchSchema)(customAjv),
            (0, requireValidExamples_1.requireValidParameterExamples)(customAjv),
            (0, requireValidExamples_1.requireValidRequestExamples)(customAjv),
        ];
        if (config.require_response_examples)
            rules.push((0, requireExample_1.requireResponseExamples)(config.required_on || 'always'));
        if (config.require_request_examples)
            rules.push((0, requireExample_1.requireRequestExamples)(config.required_on || 'always'));
        if (config.require_parameter_examples)
            rules.push((0, requireExample_1.requireParameterExamples)(config.required_on || 'always'));
        super({
            ...config,
            name: 'Examples ruleset',
            rules: rules,
            matches: config.matches,
            docsLink: config.docsLink,
            severity: config.severity,
        });
    }
}
exports.ExamplesRuleset = ExamplesRuleset;
//# sourceMappingURL=index.js.map