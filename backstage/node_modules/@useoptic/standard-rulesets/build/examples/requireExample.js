"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireParameterExamples = exports.requireRequestExamples = exports.requireResponseExamples = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const qualifiedContentType_1 = require("./qualifiedContentType");
const requireResponseExamples = (applies) => new rulesets_base_1.ResponseBodyRule({
    name: 'require response body examples',
    matches: (body) => (0, qualifiedContentType_1.qualifiedContentType)(body.contentType),
    rule: (responseBodyAssertions) => {
        function responseToNumberOfExamples(body) {
            const numberOfExamples = (body.raw.example ? 1 : 0) +
                Object.keys(body.raw.examples || {}).length;
            return numberOfExamples;
        }
        if (applies === 'always') {
            responseBodyAssertions.body.requirement((body) => {
                if (responseToNumberOfExamples(body) < 1) {
                    throw new rulesets_base_1.RuleError({
                        message: `a valid example is required for every documented response body`,
                    });
                }
            });
        }
        if (applies === 'added') {
            responseBodyAssertions.body.added((body) => {
                if (responseToNumberOfExamples(body) < 1) {
                    throw new rulesets_base_1.RuleError({
                        message: `a valid example is required for added response bodies`,
                    });
                }
            });
        }
        if (applies === 'addedOrChanged' || applies === 'added') {
            responseBodyAssertions.body.addedOrChanged((body) => {
                if (responseToNumberOfExamples(body) < 1) {
                    throw new rulesets_base_1.RuleError({
                        message: `a valid example is required for added response bodies`,
                    });
                }
            });
        }
    },
});
exports.requireResponseExamples = requireResponseExamples;
const requireRequestExamples = (applies) => new rulesets_base_1.RequestRule({
    name: 'require request body examples',
    rule: (requestAssertions) => {
        function requestToNumberOfExamples(body) {
            const numberOfExamples = (body.example ? 1 : 0) + Object.keys(body.examples || {}).length;
            return numberOfExamples;
        }
        if (applies === 'always') {
            requestAssertions.body.requirement((value) => {
                if (!(0, qualifiedContentType_1.qualifiedContentType)(value.contentType))
                    return;
                const body = value.raw;
                if (requestToNumberOfExamples(body) < 1) {
                    throw new rulesets_base_1.RuleError({
                        message: `a valid example is required for every documented request body`,
                    });
                }
            });
        }
        if (applies === 'addedOrChanged' || applies === 'added') {
            requestAssertions.body.addedOrChanged((value) => {
                const body = value.raw;
                if (!(0, qualifiedContentType_1.qualifiedContentType)(value.contentType))
                    return;
                if (requestToNumberOfExamples(body) < 1) {
                    throw new rulesets_base_1.RuleError({
                        message: `a valid example is required for added request bodies`,
                    });
                }
            });
        }
    },
});
exports.requireRequestExamples = requireRequestExamples;
const requireParameterExamples = (applies) => new rulesets_base_1.OperationRule({
    name: 'require parameter examples',
    rule: (operation) => {
        const lifecycle = applies === 'always' ? 'requirement' : 'addedOrChanged';
        const errorMessageType = applies === 'always' ? 'every' : 'added';
        function schemaHasExample(schema) {
            if (schema) {
                if ('example' in schema) {
                    return typeof schema.example !== 'undefined';
                }
            }
            return false;
        }
        operation.headerParameter[lifecycle]((header) => {
            if (!header.raw.example &&
                Object.keys(header.raw.examples || {}).length === 0 &&
                !schemaHasExample(header.raw.schema)) {
                throw new rulesets_base_1.RuleError({
                    message: `a valid example is required for ${errorMessageType} header`,
                });
            }
        });
        operation.queryParameter[lifecycle]((query) => {
            if (!query.raw.example &&
                Object.keys(query.raw.examples || {}).length === 0 &&
                !schemaHasExample(query.raw.schema)) {
                throw new rulesets_base_1.RuleError({
                    message: `a valid example is required for ${errorMessageType} query parameter`,
                });
            }
        });
        operation.cookieParameter[lifecycle]((cookie) => {
            if (!cookie.raw.example &&
                Object.keys(cookie.raw.examples || {}).length === 0 &&
                !schemaHasExample(cookie.raw.schema)) {
                throw new rulesets_base_1.RuleError({
                    message: `a valid example is required for ${errorMessageType} cookie parameter`,
                });
            }
        });
    },
});
exports.requireParameterExamples = requireParameterExamples;
//# sourceMappingURL=requireExample.js.map