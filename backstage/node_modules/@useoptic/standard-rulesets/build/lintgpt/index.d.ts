import { ObjectDiff, RuleResult, SeverityText, FlatOpenAPIV3, FlatOpenAPIV3_1 } from '@useoptic/openapi-utilities';
import { appliesWhen } from './constants';
import { PreparedRule } from './rules-helper';
import { ExternalRuleBase } from '@useoptic/rulesets-base/build/rules/external-rule-base';
import { OpenAPIFactNodes } from '@useoptic/rulesets-base/build/rule-runner/rule-runner-types';
export type LintGptConfig = {
    [key: string]: {
        required_on?: (typeof appliesWhen)[number];
        severity?: SeverityText;
        rules: string[];
    };
};
export declare class LintGpt extends ExternalRuleBase {
    private config;
    private requirementRules;
    private addedRules;
    private lintgptClient;
    static fromOpticConfig(config: unknown): Promise<LintGpt | string>;
    constructor(config: LintGptConfig, requirementRules: PreparedRule[], addedRules: PreparedRule[], lintgptClient: any);
    runRulesV2(inputs: {
        context: any;
        diffs: ObjectDiff[];
        fromSpec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document;
        toSpec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document;
        groupedFacts: OpenAPIFactNodes;
    }): Promise<RuleResult[]>;
}
//# sourceMappingURL=index.d.ts.map