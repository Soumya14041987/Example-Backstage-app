"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareResponse = exports.prepareOperation = void 0;
const json_pointer_helpers_1 = require("@useoptic/json-pointer-helpers");
function prepareOperation(operation) {
    const copied = JSON.parse(JSON.stringify(operation));
    removeSchemasFromOperation(copied);
    return copied;
}
exports.prepareOperation = prepareOperation;
function removeSchemasFromOperation(operation) {
    if (operation.requestBody && !('$ref' in operation.requestBody)) {
        for (const value of Object.values(operation.requestBody.content)) {
            value.schema = undefined;
        }
    }
    for (const response of Object.values(operation.responses)) {
        if (!('$ref' in response)) {
            for (const value of Object.values(response.content ?? {})) {
                value.schema = undefined;
            }
        }
    }
}
function removeExamplesAndDescriptionsFromProperties(value, path) {
    if (Array.isArray(value)) {
        value.forEach((item, index) => removeExamplesAndDescriptionsFromProperties(item, [
            ...path,
            index.toString(),
        ]));
    }
    else if (typeof value === 'object' && value !== null) {
        if (value.hasOwnProperty('description') &&
            json_pointer_helpers_1.jsonPointerHelpers.endsWith(json_pointer_helpers_1.jsonPointerHelpers.compile([...path, 'description']), ['properties', '**', 'description'])) {
            delete value['description'];
        }
        if (value.hasOwnProperty('example') &&
            json_pointer_helpers_1.jsonPointerHelpers.endsWith(json_pointer_helpers_1.jsonPointerHelpers.compile([...path, 'example']), ['properties', '**', 'example'])) {
            delete value['example'];
        }
        if (value.hasOwnProperty('examples') &&
            json_pointer_helpers_1.jsonPointerHelpers.endsWith(json_pointer_helpers_1.jsonPointerHelpers.compile([...path, 'examples']), ['properties', '**', 'examples'])) {
            delete value['examples'];
        }
        Object.keys(value).forEach((key) => removeExamplesAndDescriptionsFromProperties(value[key], [...path, key]));
    }
    else {
    }
}
function prepareResponse(response) {
    const copied = JSON.parse(JSON.stringify(response));
    removeExamplesAndDescriptionsFromProperties(copied, []);
    return copied;
}
exports.prepareResponse = prepareResponse;
//# sourceMappingURL=prepare-openapi.js.map