type OpenAPIRuleType = 'OPERATION' | 'PROPERTY' | 'REQUEST' | 'RESPONSE' | 'RESPONSE_HEADER' | 'PATH_PARAMETER' | 'QUERY_PARAMETER' | 'HEADER_PARAMETER';
type Severity = 'ERROR' | 'WARNING';
export type PreparedRule = {
    rule: string;
    changed: boolean;
    severity: Severity;
    slug: string;
    entity: OpenAPIRuleType;
};
export type LintgptEval = {
    rule_checksum: string;
    node_checksum: string;
    status: 'requested' | 'success' | 'failed';
    passed?: boolean | null;
    skipped?: boolean | null;
    error?: string | null;
    eval_error?: string | null;
};
export type EvalRequest = {
    rule_checksum: string;
    location_context: string;
    node: string;
    node_before?: string;
};
export declare class LintgptRulesHelper {
    constructor();
    private getPrepSpinnerText;
    getRulePreps(rules: string[]): Promise<void>;
    getRuleEvals(eval_requests: EvalRequest[]): Promise<Map<string, {
        rule_checksum: string;
        node_checksum: string;
        eval_request: EvalRequest;
        rule_eval?: LintgptEval | undefined;
    }>>;
}
export declare const computeRuleChecksum: (rule: string) => string;
export declare const computeNodeChecksum: ({ node, node_before, location_context, }: {
    node: string;
    location_context: string;
    node_before?: string;
}) => string;
export {};
//# sourceMappingURL=rules-helper.d.ts.map