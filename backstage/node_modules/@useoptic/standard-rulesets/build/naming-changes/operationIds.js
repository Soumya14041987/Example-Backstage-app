"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOperationIdRule = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const isCase_1 = require("./isCase");
const createOperationIdRule = (applies, format) => {
    const operationIdTest = (operationId) => {
        if (!(0, isCase_1.isCase)(operationId, format)) {
            throw new rulesets_base_1.RuleError({
                message: `${operationId} is not ${format}`,
            });
        }
    };
    const operationIdChecks = new rulesets_base_1.OperationRule({
        name: 'operationId naming check',
        rule: (operationAssertions) => {
            if (applies === 'always') {
                operationAssertions.requirement((operation) => {
                    if (operation.raw.operationId)
                        operationIdTest(operation.raw.operationId);
                });
            }
            else if (applies === 'addedOrChanged') {
                operationAssertions.added((operation) => {
                    if (operation.raw.operationId)
                        operationIdTest(operation.raw.operationId);
                });
                operationAssertions.changed((before, after) => {
                    if (before.raw.operationId &&
                        after.raw.operationId &&
                        before.raw.operationId !== after.raw.operationId) {
                        operationIdTest(after.raw.operationId);
                    }
                });
            }
            else if (applies === 'added') {
                operationAssertions.added((operation) => {
                    if (operation.raw.operationId)
                        operationIdTest(operation.raw.operationId);
                });
            }
        },
    });
    return operationIdChecks;
};
exports.createOperationIdRule = createOperationIdRule;
//# sourceMappingURL=operationIds.js.map