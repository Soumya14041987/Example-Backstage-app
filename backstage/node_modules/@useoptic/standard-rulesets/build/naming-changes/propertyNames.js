"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPropertyNamingChecks = void 0;
const rulesets_base_1 = require("@useoptic/rulesets-base");
const isCase_1 = require("./isCase");
const createPropertyNamingChecks = (applies, format) => {
    const propertyTest = (property) => {
        if (!(0, isCase_1.isCase)(property.value.key, format)) {
            throw new rulesets_base_1.RuleError({
                message: `${property.value.key} is not ${format}`,
            });
        }
    };
    const requestPropertyChecks = new rulesets_base_1.RequestRule({
        name: 'request property naming check',
        rule: (requestAssertions) => {
            if (applies === 'always') {
                requestAssertions.property.requirement(propertyTest);
            }
            else if (applies === 'addedOrChanged') {
                requestAssertions.property.added(propertyTest);
                requestAssertions.property.changed((before, after) => propertyTest(after));
            }
            else if (applies === 'added') {
                requestAssertions.property.added(propertyTest);
            }
        },
    });
    const responsePropertyChecks = new rulesets_base_1.ResponseBodyRule({
        name: 'response property naming check',
        rule: (responseAssertions) => {
            if (applies === 'always') {
                responseAssertions.property.requirement(propertyTest);
            }
            else if (applies === 'addedOrChanged') {
                responseAssertions.property.added(propertyTest);
                responseAssertions.property.changed((before, after) => propertyTest(after));
            }
            else if (applies === 'added') {
                responseAssertions.property.added(propertyTest);
            }
        },
    });
    return [requestPropertyChecks, responsePropertyChecks];
};
exports.createPropertyNamingChecks = createPropertyNamingChecks;
//# sourceMappingURL=propertyNames.js.map