import { RuleContext } from '@useoptic/rulesets-base';
import { IChange, IFact, ObjectDiff, FlatOpenAPIV3, FlatOpenAPIV3_1, Result, RuleResult } from '@useoptic/openapi-utilities';
import { ExternalRuleBase } from '@useoptic/rulesets-base/build/rules/external-rule-base';
import { OpenAPIFactNodes } from '@useoptic/rulesets-base/build/rule-runner/rule-runner-types';
export declare class SpectralRulesets extends ExternalRuleBase {
    private options;
    constructor(options: {
        always?: string[];
        added?: string[];
        changed?: string[];
        addedOrChanged?: string[];
        matches?: (context: RuleContext) => boolean;
    });
    runRules(inputs: {
        context: any;
        nextFacts: IFact[];
        currentFacts: IFact[];
        changelog: IChange[];
        nextJsonLike: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document;
        currentJsonLike: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document;
        groupedFacts: OpenAPIFactNodes;
    }): Promise<Result[]>;
    runRulesV2(inputs: {
        context: any;
        diffs: ObjectDiff[];
        fromSpec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document;
        toSpec: FlatOpenAPIV3.Document | FlatOpenAPIV3_1.Document;
        groupedFacts: OpenAPIFactNodes;
    }): Promise<RuleResult[]>;
    static fromOpticConfig(config: unknown): Promise<SpectralRulesets | string>;
}
//# sourceMappingURL=index.d.ts.map