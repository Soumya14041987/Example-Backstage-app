/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gendocu.documentation.v1
// file: gendocu/documentation/v1/styling.proto

import * as jspb from "google-protobuf";
import * as gendocu_documentation_v1_sections_pb from "../../../gendocu/documentation/v1/sections_pb";

export class UpdateDocumentationStylingRequest extends jspb.Message {
  getProjectId(): string;
  setProjectId(value: string): void;

  getPreviousSettingsVersion(): string;
  setPreviousSettingsVersion(value: string): void;

  hasSettings(): boolean;
  clearSettings(): void;
  getSettings(): StylingSettings | undefined;
  setSettings(value?: StylingSettings): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateDocumentationStylingRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateDocumentationStylingRequest): UpdateDocumentationStylingRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdateDocumentationStylingRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateDocumentationStylingRequest;
  static deserializeBinaryFromReader(message: UpdateDocumentationStylingRequest, reader: jspb.BinaryReader): UpdateDocumentationStylingRequest;
}

export namespace UpdateDocumentationStylingRequest {
  export type AsObject = {
    projectId: string,
    previousSettingsVersion: string,
    settings?: StylingSettings.AsObject,
  }
}

export class UpdateDocumentationStylingResponse extends jspb.Message {
  getProjectId(): string;
  setProjectId(value: string): void;

  hasSettings(): boolean;
  clearSettings(): void;
  getSettings(): StylingSettings | undefined;
  setSettings(value?: StylingSettings): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateDocumentationStylingResponse.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateDocumentationStylingResponse): UpdateDocumentationStylingResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdateDocumentationStylingResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateDocumentationStylingResponse;
  static deserializeBinaryFromReader(message: UpdateDocumentationStylingResponse, reader: jspb.BinaryReader): UpdateDocumentationStylingResponse;
}

export namespace UpdateDocumentationStylingResponse {
  export type AsObject = {
    projectId: string,
    settings?: StylingSettings.AsObject,
  }
}

export class StylingSettings extends jspb.Message {
  getSettingsVersion(): string;
  setSettingsVersion(value: string): void;

  getLogoImg(): string;
  setLogoImg(value: string): void;

  getLogoWidth(): string;
  setLogoWidth(value: string): void;

  getLogoHeight(): string;
  setLogoHeight(value: string): void;

  getDocumentationName(): string;
  setDocumentationName(value: string): void;

  hasThemeSettings(): boolean;
  clearThemeSettings(): void;
  getThemeSettings(): ThemeSettings | undefined;
  setThemeSettings(value?: ThemeSettings): void;

  clearCustomSectionsList(): void;
  getCustomSectionsList(): Array<gendocu_documentation_v1_sections_pb.CustomSection>;
  setCustomSectionsList(value: Array<gendocu_documentation_v1_sections_pb.CustomSection>): void;
  addCustomSections(value?: gendocu_documentation_v1_sections_pb.CustomSection, index?: number): gendocu_documentation_v1_sections_pb.CustomSection;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StylingSettings.AsObject;
  static toObject(includeInstance: boolean, msg: StylingSettings): StylingSettings.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StylingSettings, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StylingSettings;
  static deserializeBinaryFromReader(message: StylingSettings, reader: jspb.BinaryReader): StylingSettings;
}

export namespace StylingSettings {
  export type AsObject = {
    settingsVersion: string,
    logoImg: string,
    logoWidth: string,
    logoHeight: string,
    documentationName: string,
    themeSettings?: ThemeSettings.AsObject,
    customSectionsList: Array<gendocu_documentation_v1_sections_pb.CustomSection.AsObject>,
  }
}

export class ThemeSettings extends jspb.Message {
  getThemeId(): string;
  setThemeId(value: string): void;

  getThemeParams(): string;
  setThemeParams(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThemeSettings.AsObject;
  static toObject(includeInstance: boolean, msg: ThemeSettings): ThemeSettings.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThemeSettings, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThemeSettings;
  static deserializeBinaryFromReader(message: ThemeSettings, reader: jspb.BinaryReader): ThemeSettings;
}

export namespace ThemeSettings {
  export type AsObject = {
    themeId: string,
    themeParams: string,
  }
}

export class RenderMarkdownRequest extends jspb.Message {
  getProjectId(): string;
  setProjectId(value: string): void;

  clearMarkdownList(): void;
  getMarkdownList(): Array<string>;
  setMarkdownList(value: Array<string>): void;
  addMarkdown(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RenderMarkdownRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RenderMarkdownRequest): RenderMarkdownRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RenderMarkdownRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RenderMarkdownRequest;
  static deserializeBinaryFromReader(message: RenderMarkdownRequest, reader: jspb.BinaryReader): RenderMarkdownRequest;
}

export namespace RenderMarkdownRequest {
  export type AsObject = {
    projectId: string,
    markdownList: Array<string>,
  }
}

export class RenderMarkdownResponse extends jspb.Message {
  getProjectId(): string;
  setProjectId(value: string): void;

  clearHtmlList(): void;
  getHtmlList(): Array<string>;
  setHtmlList(value: Array<string>): void;
  addHtml(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RenderMarkdownResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RenderMarkdownResponse): RenderMarkdownResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RenderMarkdownResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RenderMarkdownResponse;
  static deserializeBinaryFromReader(message: RenderMarkdownResponse, reader: jspb.BinaryReader): RenderMarkdownResponse;
}

export namespace RenderMarkdownResponse {
  export type AsObject = {
    projectId: string,
    htmlList: Array<string>,
  }
}

