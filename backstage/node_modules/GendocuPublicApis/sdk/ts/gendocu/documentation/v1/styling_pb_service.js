/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gendocu.documentation.v1
// file: gendocu/documentation/v1/styling.proto

var gendocu_documentation_v1_styling_pb = require("../../../gendocu/documentation/v1/styling_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var StylingService = (function () {
  function StylingService() {}
  StylingService.serviceName = "gendocu.documentation.v1.StylingService";
  return StylingService;
}());

StylingService.UpdateDocumentationStyling = {
  methodName: "UpdateDocumentationStyling",
  service: StylingService,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_documentation_v1_styling_pb.UpdateDocumentationStylingRequest,
  responseType: gendocu_documentation_v1_styling_pb.UpdateDocumentationStylingResponse
};

StylingService.RenderMarkdown = {
  methodName: "RenderMarkdown",
  service: StylingService,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_documentation_v1_styling_pb.RenderMarkdownRequest,
  responseType: gendocu_documentation_v1_styling_pb.RenderMarkdownResponse
};

exports.StylingService = StylingService;

function StylingServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

StylingServiceClient.prototype.updateDocumentationStyling = function updateDocumentationStyling(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(StylingService.UpdateDocumentationStyling, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

StylingServiceClient.prototype.renderMarkdown = function renderMarkdown(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(StylingService.RenderMarkdown, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.StylingServiceClient = StylingServiceClient;

