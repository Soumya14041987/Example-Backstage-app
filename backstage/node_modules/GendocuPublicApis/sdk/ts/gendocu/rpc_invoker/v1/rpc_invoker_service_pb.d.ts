/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gendocu.rpc_invoker.v1
// file: gendocu/rpc_invoker/v1/rpc_invoker_service.proto

import * as jspb from "google-protobuf";

export class InvokeMethodRequest extends jspb.Message {
  getServiceId(): string;
  setServiceId(value: string): void;

  getMethodId(): string;
  setMethodId(value: string): void;

  getEnvironment(): string;
  setEnvironment(value: string): void;

  getBody(): string;
  setBody(value: string): void;

  clearHeadersList(): void;
  getHeadersList(): Array<Header>;
  setHeadersList(value: Array<Header>): void;
  addHeaders(value?: Header, index?: number): Header;

  getBuildId(): string;
  setBuildId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InvokeMethodRequest.AsObject;
  static toObject(includeInstance: boolean, msg: InvokeMethodRequest): InvokeMethodRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InvokeMethodRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InvokeMethodRequest;
  static deserializeBinaryFromReader(message: InvokeMethodRequest, reader: jspb.BinaryReader): InvokeMethodRequest;
}

export namespace InvokeMethodRequest {
  export type AsObject = {
    serviceId: string,
    methodId: string,
    environment: string,
    body: string,
    headersList: Array<Header.AsObject>,
    buildId: string,
  }
}

export class Header extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getValue(): string;
  setValue(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Header.AsObject;
  static toObject(includeInstance: boolean, msg: Header): Header.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Header, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Header;
  static deserializeBinaryFromReader(message: Header, reader: jspb.BinaryReader): Header;
}

export namespace Header {
  export type AsObject = {
    name: string,
    value: string,
  }
}

export class InvokeMethodResponse extends jspb.Message {
  getResponse(): string;
  setResponse(value: string): void;

  getResponseCode(): number;
  setResponseCode(value: number): void;

  getResponseMessage(): string;
  setResponseMessage(value: string): void;

  getRequestDebugToken(): string;
  setRequestDebugToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InvokeMethodResponse.AsObject;
  static toObject(includeInstance: boolean, msg: InvokeMethodResponse): InvokeMethodResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InvokeMethodResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InvokeMethodResponse;
  static deserializeBinaryFromReader(message: InvokeMethodResponse, reader: jspb.BinaryReader): InvokeMethodResponse;
}

export namespace InvokeMethodResponse {
  export type AsObject = {
    response: string,
    responseCode: number,
    responseMessage: string,
    requestDebugToken: string,
  }
}

export class RequestMeta extends jspb.Message {
  getRequestId(): string;
  setRequestId(value: string): void;

  getAnonymousUserId(): string;
  setAnonymousUserId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RequestMeta.AsObject;
  static toObject(includeInstance: boolean, msg: RequestMeta): RequestMeta.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestMeta, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestMeta;
  static deserializeBinaryFromReader(message: RequestMeta, reader: jspb.BinaryReader): RequestMeta;
}

export namespace RequestMeta {
  export type AsObject = {
    requestId: string,
    anonymousUserId: string,
  }
}

