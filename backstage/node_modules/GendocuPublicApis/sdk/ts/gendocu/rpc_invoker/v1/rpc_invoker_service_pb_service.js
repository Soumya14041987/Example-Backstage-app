/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gendocu.rpc_invoker.v1
// file: gendocu/rpc_invoker/v1/rpc_invoker_service.proto

var gendocu_rpc_invoker_v1_rpc_invoker_service_pb = require("../../../gendocu/rpc_invoker/v1/rpc_invoker_service_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var RpcInvoker = (function () {
  function RpcInvoker() {}
  RpcInvoker.serviceName = "gendocu.rpc_invoker.v1.RpcInvoker";
  return RpcInvoker;
}());

RpcInvoker.InvokeMethod = {
  methodName: "InvokeMethod",
  service: RpcInvoker,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_rpc_invoker_v1_rpc_invoker_service_pb.InvokeMethodRequest,
  responseType: gendocu_rpc_invoker_v1_rpc_invoker_service_pb.InvokeMethodResponse
};

exports.RpcInvoker = RpcInvoker;

function RpcInvokerClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

RpcInvokerClient.prototype.invokeMethod = function invokeMethod(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RpcInvoker.InvokeMethod, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.RpcInvokerClient = RpcInvokerClient;

