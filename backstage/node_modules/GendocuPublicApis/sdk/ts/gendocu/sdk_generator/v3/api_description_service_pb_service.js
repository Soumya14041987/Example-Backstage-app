/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gendocu.sdk_generator.v3
// file: gendocu/sdk_generator/v3/api_description_service.proto

var gendocu_sdk_generator_v3_api_description_service_pb = require("../../../gendocu/sdk_generator/v3/api_description_service_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var SdkGenerator = (function () {
  function SdkGenerator() {}
  SdkGenerator.serviceName = "gendocu.sdk_generator.v3.SdkGenerator";
  return SdkGenerator;
}());

SdkGenerator.GenerateInputCodeSnippets = {
  methodName: "GenerateInputCodeSnippets",
  service: SdkGenerator,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_sdk_generator_v3_api_description_service_pb.GenerateInputCodeSnippetsRequest,
  responseType: gendocu_sdk_generator_v3_api_description_service_pb.GenerateInputCodeSnippetsResponse
};

SdkGenerator.GenerateCodeSample = {
  methodName: "GenerateCodeSample",
  service: SdkGenerator,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_sdk_generator_v3_api_description_service_pb.GenerateCodeSampleRequest,
  responseType: gendocu_sdk_generator_v3_api_description_service_pb.GenerateCodeSampleResponse
};

SdkGenerator.UpdateBuild = {
  methodName: "UpdateBuild",
  service: SdkGenerator,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_sdk_generator_v3_api_description_service_pb.UpdateBuildRequest,
  responseType: google_protobuf_empty_pb.Empty
};

SdkGenerator.CreateBuild = {
  methodName: "CreateBuild",
  service: SdkGenerator,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_sdk_generator_v3_api_description_service_pb.CreateAPIDecode,
  responseType: gendocu_sdk_generator_v3_api_description_service_pb.CreateAPIDecodeResponse
};

SdkGenerator.GetBuild = {
  methodName: "GetBuild",
  service: SdkGenerator,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_sdk_generator_v3_api_description_service_pb.BuildSelectorRequest,
  responseType: gendocu_sdk_generator_v3_api_description_service_pb.Build
};

SdkGenerator.GetDocumentation = {
  methodName: "GetDocumentation",
  service: SdkGenerator,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_sdk_generator_v3_api_description_service_pb.GetDocumentationRequest,
  responseType: gendocu_sdk_generator_v3_api_description_service_pb.GetDocumentationResponse
};

SdkGenerator.DeleteBuild = {
  methodName: "DeleteBuild",
  service: SdkGenerator,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_sdk_generator_v3_api_description_service_pb.BuildSelectorRequest,
  responseType: google_protobuf_empty_pb.Empty
};

SdkGenerator.EnterPassword = {
  methodName: "EnterPassword",
  service: SdkGenerator,
  requestStream: false,
  responseStream: false,
  requestType: gendocu_sdk_generator_v3_api_description_service_pb.EnterPasswordRequest,
  responseType: gendocu_sdk_generator_v3_api_description_service_pb.EnterPasswordResponse
};

exports.SdkGenerator = SdkGenerator;

function SdkGeneratorClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

SdkGeneratorClient.prototype.generateInputCodeSnippets = function generateInputCodeSnippets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(SdkGenerator.GenerateInputCodeSnippets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

SdkGeneratorClient.prototype.generateCodeSample = function generateCodeSample(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(SdkGenerator.GenerateCodeSample, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

SdkGeneratorClient.prototype.updateBuild = function updateBuild(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(SdkGenerator.UpdateBuild, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

SdkGeneratorClient.prototype.createBuild = function createBuild(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(SdkGenerator.CreateBuild, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

SdkGeneratorClient.prototype.getBuild = function getBuild(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(SdkGenerator.GetBuild, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

SdkGeneratorClient.prototype.getDocumentation = function getDocumentation(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(SdkGenerator.GetDocumentation, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

SdkGeneratorClient.prototype.deleteBuild = function deleteBuild(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(SdkGenerator.DeleteBuild, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

SdkGeneratorClient.prototype.enterPassword = function enterPassword(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(SdkGenerator.EnterPassword, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.SdkGeneratorClient = SdkGeneratorClient;

