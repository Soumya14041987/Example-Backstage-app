/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gendocu.sdk_generator.v3
// file: gendocu/sdk_generator/v3/authentication_model.proto

import * as jspb from "google-protobuf";

export class AuthenticationDescription extends jspb.Message {
  clearMethodsList(): void;
  getMethodsList(): Array<AuthenticationMethod>;
  setMethodsList(value: Array<AuthenticationMethod>): void;
  addMethods(value?: AuthenticationMethod, index?: number): AuthenticationMethod;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthenticationDescription.AsObject;
  static toObject(includeInstance: boolean, msg: AuthenticationDescription): AuthenticationDescription.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthenticationDescription, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthenticationDescription;
  static deserializeBinaryFromReader(message: AuthenticationDescription, reader: jspb.BinaryReader): AuthenticationDescription;
}

export namespace AuthenticationDescription {
  export type AsObject = {
    methodsList: Array<AuthenticationMethod.AsObject>,
  }
}

export class AuthenticationMethod extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  hasCallAuthentication(): boolean;
  clearCallAuthentication(): void;
  getCallAuthentication(): CallAuthenticationMethod | undefined;
  setCallAuthentication(value?: CallAuthenticationMethod): void;

  hasChannelAuthentication(): boolean;
  clearChannelAuthentication(): void;
  getChannelAuthentication(): ChannelAuthenticationMethod | undefined;
  setChannelAuthentication(value?: ChannelAuthenticationMethod): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthenticationMethod.AsObject;
  static toObject(includeInstance: boolean, msg: AuthenticationMethod): AuthenticationMethod.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthenticationMethod, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthenticationMethod;
  static deserializeBinaryFromReader(message: AuthenticationMethod, reader: jspb.BinaryReader): AuthenticationMethod;
}

export namespace AuthenticationMethod {
  export type AsObject = {
    id: string,
    title: string,
    description: string,
    callAuthentication?: CallAuthenticationMethod.AsObject,
    channelAuthentication?: ChannelAuthenticationMethod.AsObject,
  }
}

export class ChannelAuthenticationMethod extends jspb.Message {
  hasNoAuth(): boolean;
  clearNoAuth(): void;
  getNoAuth(): NoAuthScheme | undefined;
  setNoAuth(value?: NoAuthScheme): void;

  getSchemeCase(): ChannelAuthenticationMethod.SchemeCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChannelAuthenticationMethod.AsObject;
  static toObject(includeInstance: boolean, msg: ChannelAuthenticationMethod): ChannelAuthenticationMethod.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChannelAuthenticationMethod, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChannelAuthenticationMethod;
  static deserializeBinaryFromReader(message: ChannelAuthenticationMethod, reader: jspb.BinaryReader): ChannelAuthenticationMethod;
}

export namespace ChannelAuthenticationMethod {
  export type AsObject = {
    noAuth?: NoAuthScheme.AsObject,
  }

  export enum SchemeCase {
    SCHEME_NOT_SET = 0,
    NO_AUTH = 1,
  }
}

export class CallAuthenticationMethod extends jspb.Message {
  hasNoAuth(): boolean;
  clearNoAuth(): void;
  getNoAuth(): NoAuthScheme | undefined;
  setNoAuth(value?: NoAuthScheme): void;

  hasTokenScheme(): boolean;
  clearTokenScheme(): void;
  getTokenScheme(): TokenScheme | undefined;
  setTokenScheme(value?: TokenScheme): void;

  getSchemeCase(): CallAuthenticationMethod.SchemeCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CallAuthenticationMethod.AsObject;
  static toObject(includeInstance: boolean, msg: CallAuthenticationMethod): CallAuthenticationMethod.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CallAuthenticationMethod, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CallAuthenticationMethod;
  static deserializeBinaryFromReader(message: CallAuthenticationMethod, reader: jspb.BinaryReader): CallAuthenticationMethod;
}

export namespace CallAuthenticationMethod {
  export type AsObject = {
    noAuth?: NoAuthScheme.AsObject,
    tokenScheme?: TokenScheme.AsObject,
  }

  export enum SchemeCase {
    SCHEME_NOT_SET = 0,
    NO_AUTH = 1,
    TOKEN_SCHEME = 2,
  }
}

export class TokenScheme extends jspb.Message {
  getExampleValue(): string;
  setExampleValue(value: string): void;

  hasGrpc(): boolean;
  clearGrpc(): void;
  getGrpc(): TokenScheme.gRPCScheme | undefined;
  setGrpc(value?: TokenScheme.gRPCScheme): void;

  hasGrpcweb(): boolean;
  clearGrpcweb(): void;
  getGrpcweb(): TokenScheme.gRPCWebScheme | undefined;
  setGrpcweb(value?: TokenScheme.gRPCWebScheme): void;

  hasRest(): boolean;
  clearRest(): void;
  getRest(): TokenScheme.RESTScheme | undefined;
  setRest(value?: TokenScheme.RESTScheme): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TokenScheme.AsObject;
  static toObject(includeInstance: boolean, msg: TokenScheme): TokenScheme.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TokenScheme, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TokenScheme;
  static deserializeBinaryFromReader(message: TokenScheme, reader: jspb.BinaryReader): TokenScheme;
}

export namespace TokenScheme {
  export type AsObject = {
    exampleValue: string,
    grpc?: TokenScheme.gRPCScheme.AsObject,
    grpcweb?: TokenScheme.gRPCWebScheme.AsObject,
    rest?: TokenScheme.RESTScheme.AsObject,
  }

  export class gRPCScheme extends jspb.Message {
    getMeta(): string;
    setMeta(value: string): void;

    getValuePrefix(): string;
    setValuePrefix(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): gRPCScheme.AsObject;
    static toObject(includeInstance: boolean, msg: gRPCScheme): gRPCScheme.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: gRPCScheme, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): gRPCScheme;
    static deserializeBinaryFromReader(message: gRPCScheme, reader: jspb.BinaryReader): gRPCScheme;
  }

  export namespace gRPCScheme {
    export type AsObject = {
      meta: string,
      valuePrefix: string,
    }
  }

  export class gRPCWebScheme extends jspb.Message {
    getHeader(): string;
    setHeader(value: string): void;

    getValuePrefix(): string;
    setValuePrefix(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): gRPCWebScheme.AsObject;
    static toObject(includeInstance: boolean, msg: gRPCWebScheme): gRPCWebScheme.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: gRPCWebScheme, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): gRPCWebScheme;
    static deserializeBinaryFromReader(message: gRPCWebScheme, reader: jspb.BinaryReader): gRPCWebScheme;
  }

  export namespace gRPCWebScheme {
    export type AsObject = {
      header: string,
      valuePrefix: string,
    }
  }

  export class RESTScheme extends jspb.Message {
    getHeader(): string;
    setHeader(value: string): void;

    getValuePrefix(): string;
    setValuePrefix(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RESTScheme.AsObject;
    static toObject(includeInstance: boolean, msg: RESTScheme): RESTScheme.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RESTScheme, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RESTScheme;
    static deserializeBinaryFromReader(message: RESTScheme, reader: jspb.BinaryReader): RESTScheme;
  }

  export namespace RESTScheme {
    export type AsObject = {
      header: string,
      valuePrefix: string,
    }
  }
}

export class NoAuthScheme extends jspb.Message {
  getNoAuth(): boolean;
  setNoAuth(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NoAuthScheme.AsObject;
  static toObject(includeInstance: boolean, msg: NoAuthScheme): NoAuthScheme.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NoAuthScheme, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NoAuthScheme;
  static deserializeBinaryFromReader(message: NoAuthScheme, reader: jspb.BinaryReader): NoAuthScheme;
}

export namespace NoAuthScheme {
  export type AsObject = {
    noAuth: boolean,
  }
}

