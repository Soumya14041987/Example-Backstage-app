/* eslint-disable */
/*Generated by GenDocu.com*/
// package: gendocu.sdk_generator.v3
// file: gendocu/sdk_generator/v3/sdk_generator.proto

import * as jspb from "google-protobuf";
import * as gendocu_common_types_pb from "../../../gendocu/common/types_pb";
import * as google_protobuf_descriptor_pb from "google-protobuf/google/protobuf/descriptor_pb";

export class Version extends jspb.Message {
  getMajor(): number;
  setMajor(value: number): void;

  getMinor(): number;
  setMinor(value: number): void;

  getPatch(): string;
  setPatch(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Version.AsObject;
  static toObject(includeInstance: boolean, msg: Version): Version.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Version, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Version;
  static deserializeBinaryFromReader(message: Version, reader: jspb.BinaryReader): Version;
}

export namespace Version {
  export type AsObject = {
    major: number,
    minor: number,
    patch: string,
  }
}

export class APIDescriptionGeneratorModel extends jspb.Message {
  hasVersion(): boolean;
  clearVersion(): void;
  getVersion(): Version | undefined;
  setVersion(value?: Version): void;

  getDescription(): string;
  setDescription(value: string): void;

  getAuthenticationDescription(): string;
  setAuthenticationDescription(value: string): void;

  getMethodsMap(): jspb.Map<string, MethodDescription>;
  clearMethodsMap(): void;
  getServicesMap(): jspb.Map<string, ServiceDescription>;
  clearServicesMap(): void;
  getTypesMap(): jspb.Map<string, TypeDescription>;
  clearTypesMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): APIDescriptionGeneratorModel.AsObject;
  static toObject(includeInstance: boolean, msg: APIDescriptionGeneratorModel): APIDescriptionGeneratorModel.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: APIDescriptionGeneratorModel, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): APIDescriptionGeneratorModel;
  static deserializeBinaryFromReader(message: APIDescriptionGeneratorModel, reader: jspb.BinaryReader): APIDescriptionGeneratorModel;
}

export namespace APIDescriptionGeneratorModel {
  export type AsObject = {
    version?: Version.AsObject,
    description: string,
    authenticationDescription: string,
    methodsMap: Array<[string, MethodDescription.AsObject]>,
    servicesMap: Array<[string, ServiceDescription.AsObject]>,
    typesMap: Array<[string, TypeDescription.AsObject]>,
  }
}

export class MethodDescription extends jspb.Message {
  getMethodId(): string;
  setMethodId(value: string): void;

  getServiceId(): string;
  setServiceId(value: string): void;

  getName(): string;
  setName(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  getSourceProtoFile(): string;
  setSourceProtoFile(value: string): void;

  getInTypeId(): string;
  setInTypeId(value: string): void;

  getOutTypeId(): string;
  setOutTypeId(value: string): void;

  clearIncludeInfoList(): void;
  getIncludeInfoList(): Array<IncludeInfo>;
  setIncludeInfoList(value: Array<IncludeInfo>): void;
  addIncludeInfo(value?: IncludeInfo, index?: number): IncludeInfo;

  getInStreaming(): boolean;
  setInStreaming(value: boolean): void;

  getOutStreaming(): boolean;
  setOutStreaming(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MethodDescription.AsObject;
  static toObject(includeInstance: boolean, msg: MethodDescription): MethodDescription.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MethodDescription, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MethodDescription;
  static deserializeBinaryFromReader(message: MethodDescription, reader: jspb.BinaryReader): MethodDescription;
}

export namespace MethodDescription {
  export type AsObject = {
    methodId: string,
    serviceId: string,
    name: string,
    description: string,
    sourceProtoFile: string,
    inTypeId: string,
    outTypeId: string,
    includeInfoList: Array<IncludeInfo.AsObject>,
    inStreaming: boolean,
    outStreaming: boolean,
  }
}

export class IncludeInfo extends jspb.Message {
  getSdkProvider(): gendocu_common_types_pb.SDKProviderMap[keyof gendocu_common_types_pb.SDKProviderMap];
  setSdkProvider(value: gendocu_common_types_pb.SDKProviderMap[keyof gendocu_common_types_pb.SDKProviderMap]): void;

  getProtoPkg(): string;
  setProtoPkg(value: string): void;

  getGoImportPath(): string;
  setGoImportPath(value: string): void;

  getGoPkg(): string;
  setGoPkg(value: string): void;

  getTsImportPath(): string;
  setTsImportPath(value: string): void;

  getJavaServicePkg(): string;
  setJavaServicePkg(value: string): void;

  getJavaMessagePkg(): string;
  setJavaMessagePkg(value: string): void;

  getCsharpPkg(): string;
  setCsharpPkg(value: string): void;

  getRustCrate(): string;
  setRustCrate(value: string): void;

  getRustPackage(): string;
  setRustPackage(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IncludeInfo.AsObject;
  static toObject(includeInstance: boolean, msg: IncludeInfo): IncludeInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: IncludeInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IncludeInfo;
  static deserializeBinaryFromReader(message: IncludeInfo, reader: jspb.BinaryReader): IncludeInfo;
}

export namespace IncludeInfo {
  export type AsObject = {
    sdkProvider: gendocu_common_types_pb.SDKProviderMap[keyof gendocu_common_types_pb.SDKProviderMap],
    protoPkg: string,
    goImportPath: string,
    goPkg: string,
    tsImportPath: string,
    javaServicePkg: string,
    javaMessagePkg: string,
    csharpPkg: string,
    rustCrate: string,
    rustPackage: string,
  }
}

export class ServiceDescription extends jspb.Message {
  getServiceId(): string;
  setServiceId(value: string): void;

  getShortName(): string;
  setShortName(value: string): void;

  getFullName(): string;
  setFullName(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  getSourceProtoFile(): string;
  setSourceProtoFile(value: string): void;

  clearIncludeInfoList(): void;
  getIncludeInfoList(): Array<IncludeInfo>;
  setIncludeInfoList(value: Array<IncludeInfo>): void;
  addIncludeInfo(value?: IncludeInfo, index?: number): IncludeInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ServiceDescription.AsObject;
  static toObject(includeInstance: boolean, msg: ServiceDescription): ServiceDescription.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ServiceDescription, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ServiceDescription;
  static deserializeBinaryFromReader(message: ServiceDescription, reader: jspb.BinaryReader): ServiceDescription;
}

export namespace ServiceDescription {
  export type AsObject = {
    serviceId: string,
    shortName: string,
    fullName: string,
    description: string,
    sourceProtoFile: string,
    includeInfoList: Array<IncludeInfo.AsObject>,
  }
}

export class TypeDescription extends jspb.Message {
  getTypeId(): string;
  setTypeId(value: string): void;

  getShortName(): string;
  setShortName(value: string): void;

  getFullName(): string;
  setFullName(value: string): void;

  getSourceProtoFile(): string;
  setSourceProtoFile(value: string): void;

  clearIncludeInfoList(): void;
  getIncludeInfoList(): Array<IncludeInfo>;
  setIncludeInfoList(value: Array<IncludeInfo>): void;
  addIncludeInfo(value?: IncludeInfo, index?: number): IncludeInfo;

  clearFieldsList(): void;
  getFieldsList(): Array<FieldDescription>;
  setFieldsList(value: Array<FieldDescription>): void;
  addFields(value?: FieldDescription, index?: number): FieldDescription;

  getDescription(): string;
  setDescription(value: string): void;

  getIsMapType(): boolean;
  setIsMapType(value: boolean): void;

  hasEnumDescription(): boolean;
  clearEnumDescription(): void;
  getEnumDescription(): EnumDescription | undefined;
  setEnumDescription(value?: EnumDescription): void;

  hasPbDescriptor(): boolean;
  clearPbDescriptor(): void;
  getPbDescriptor(): google_protobuf_descriptor_pb.DescriptorProto | undefined;
  setPbDescriptor(value?: google_protobuf_descriptor_pb.DescriptorProto): void;

  getSubtypeOf(): string;
  setSubtypeOf(value: string): void;

  clearExamplesList(): void;
  getExamplesList(): Array<Example>;
  setExamplesList(value: Array<Example>): void;
  addExamples(value?: Example, index?: number): Example;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TypeDescription.AsObject;
  static toObject(includeInstance: boolean, msg: TypeDescription): TypeDescription.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TypeDescription, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TypeDescription;
  static deserializeBinaryFromReader(message: TypeDescription, reader: jspb.BinaryReader): TypeDescription;
}

export namespace TypeDescription {
  export type AsObject = {
    typeId: string,
    shortName: string,
    fullName: string,
    sourceProtoFile: string,
    includeInfoList: Array<IncludeInfo.AsObject>,
    fieldsList: Array<FieldDescription.AsObject>,
    description: string,
    isMapType: boolean,
    enumDescription?: EnumDescription.AsObject,
    pbDescriptor?: google_protobuf_descriptor_pb.DescriptorProto.AsObject,
    subtypeOf: string,
    examplesList: Array<Example.AsObject>,
  }
}

export class Example extends jspb.Message {
  getDefault(): boolean;
  setDefault(value: boolean): void;

  getEncoded(): string;
  setEncoded(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Example.AsObject;
  static toObject(includeInstance: boolean, msg: Example): Example.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Example, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Example;
  static deserializeBinaryFromReader(message: Example, reader: jspb.BinaryReader): Example;
}

export namespace Example {
  export type AsObject = {
    pb_default: boolean,
    encoded: string,
  }
}

export class EnumDescription extends jspb.Message {
  getValuesMap(): jspb.Map<string, number>;
  clearValuesMap(): void;
  getDescriptionMap(): jspb.Map<string, string>;
  clearDescriptionMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EnumDescription.AsObject;
  static toObject(includeInstance: boolean, msg: EnumDescription): EnumDescription.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EnumDescription, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EnumDescription;
  static deserializeBinaryFromReader(message: EnumDescription, reader: jspb.BinaryReader): EnumDescription;
}

export namespace EnumDescription {
  export type AsObject = {
    valuesMap: Array<[string, number]>,
    descriptionMap: Array<[string, string]>,
  }
}

export class FieldDescription extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getTypeId(): string;
  setTypeId(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  getRepeated(): boolean;
  setRepeated(value: boolean): void;

  getRequired(): boolean;
  setRequired(value: boolean): void;

  getOptional(): boolean;
  setOptional(value: boolean): void;

  getProto3Optional(): boolean;
  setProto3Optional(value: boolean): void;

  getOneOf(): string;
  setOneOf(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FieldDescription.AsObject;
  static toObject(includeInstance: boolean, msg: FieldDescription): FieldDescription.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FieldDescription, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FieldDescription;
  static deserializeBinaryFromReader(message: FieldDescription, reader: jspb.BinaryReader): FieldDescription;
}

export namespace FieldDescription {
  export type AsObject = {
    name: string,
    typeId: string,
    description: string,
    repeated: boolean,
    required: boolean,
    optional: boolean,
    proto3Optional: boolean,
    oneOf: string,
  }
}

